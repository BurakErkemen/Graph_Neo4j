{"https://neo4j.com/docs": {"links": ["https://neo4j.com/docs/genai", "https://neo4j.com/docs/upgrade-migration-guide", "https://neo4j.com/docs/security-docs", "https://neo4j.com/docs/cypher-manual", "https://neo4j.com/docs/apoc/current", "https://neo4j.com/docs/aura/aurads", "https://neo4j.com/docs/getting-started", "https://neo4j.com/docs/aura/auradb", "https://neo4j.com/docs/developer-tools", "https://neo4j.com/docs/cypher-cheat-sheet", "https://neo4j.com/docs/connectors", "https://neo4j.com/docs/license", "https://neo4j.com/docs/graph-data-science-client", "https://neo4j.com/docs/graph-data-science", "https://neo4j.com/docs/create-applications"], "text": "Neo4j documentation\nNeo4j DBMS\nLearn about graph database concepts, introduce yourself to Cypher, and find useful resources.\nGet started\nNeo4j Aura\nLearn how to create accounts, manage databases, and access Aura via cloud providers.\nAuraDB AuraDS\nCypher\nLearn about Cypher; the graph query language for Neo4j and AuraDB.\nCypher docs Cypher Cheat Sheet\nGenerative AI\nLearn how to integrate Neo4j with Generative AI models.\nGenAI documentation\nAPOC\nDiscover the APOC library, now supported in Neo4j version 5.\nAPOC User Guide\nUpgrade or migrate\nLearn how to keep your Neo4j deployment up-to-date.\nUpgrade / Migrate\nCreate applications\nDiscover the client libraries and APIs to develop applications with Neo4j and AuraDB.\nCreate applications with Neo4j\nConnect data sources\nLearn to use the connectors and other tools to connect Neo4j with other data sources.\nConnect data sources with Neo4j\nNeo4j Graph Data Science\nFor data scientists and analysts interested in scalable analytics powered by graph algorithms and machine learning models.\nGDS library GDS client AuraDS\nNeo4j Bloom and other tooling\nLearn to explore your graph with Neo4j Bloom and other tools, such as Neo4j Desktop, Neo4j Browser, and Neo4j Ops Manager.\nNeo4j tools\nNeo4j security\nJump straight into the security sections of our product documentation, and find other useful security-related content.\nSecurity documentation\n\u00a9 2024 license: Creative Commons 4.0", "embeddings": [-0.008772381581366062, -0.03343938663601875, -0.035029761493206024, 0.021499909460544586, -0.03832554444670677, -0.0042136129923164845, -0.02813003957271576, -0.023343712091445923, -0.09630751609802246, 0.059481047093868256, -0.05755765363574028, -0.008758310228586197, 0.06812641769647598, 0.0476163849234581, 0.020778397098183632, 0.11510134488344193, 0.037610746920108795, 0.01954372227191925, 0.015476987697184086, -0.06447208672761917, -0.06008748337626457, -0.05778483301401138, 0.04694875329732895, -0.020126594230532646, 0.0014107237802818418, 0.033925775438547134, 0.026359688490629196, -0.04346710070967674, -0.032857805490493774, -0.0038589900359511375, -0.0013436265289783478, -0.003991755191236734, -0.03545749932527542, 0.06708648800849915, -0.13103890419006348, 0.05920461565256119, 0.08072540163993835, -0.013922028243541718, 0.012146077118813992, -0.01540374755859375, -0.006955410819500685, 0.01839342527091503, -0.09024340659379959, 0.009016446769237518, 0.07365512102842331, -0.01381961815059185, -0.10491277277469635, -0.07380501180887222, 0.058471404016017914, 0.01070160698145628, -0.06581433117389679, -0.08189650624990463, -0.06123156100511551, -0.0009212793665938079, -0.01901969499886036, 0.030177529901266098, -0.016314635053277016, -0.009980849921703339, 0.03023575246334076, 0.03136701136827469, 0.0636354461312294, -0.08593318611383438, -0.021808523684740067, 0.01705959066748619, -0.0473158024251461, -0.0006843699957244098, 0.04458609223365784, 0.07121392339468002, 0.023169733583927155, -0.035630084574222565, -0.014264469966292381, 0.03223405405879021, -0.07584981620311737, -0.04476132243871689, -0.05986682325601578, 0.09508886933326721, 0.05418902263045311, -0.06460098922252655, -0.025190239772200584, -0.027974378317594528, 0.020366176962852478, 0.12530449032783508, -0.051303401589393616, 0.06873028725385666, -0.049113720655441284, 0.07338279485702515, 0.004988923203200102, -0.008901570923626423, -0.04389474168419838, 0.03563809022307396, 0.04884839802980423, -0.006151293870061636, -0.018500560894608498, -0.062286850064992905, 0.002423387486487627, 0.02671511471271515, 0.09532848745584488, -0.022945677861571312, 0.06641935557126999, -0.01872885599732399, -0.014214624650776386, -0.015126313082873821, -0.012433749623596668, -0.0035448421258479357, -0.06958873569965363, 0.022407226264476776, 0.0015730982413515449, 0.04803542047739029, 0.00646239472553134, 0.049430057406425476, -0.03951054438948631, 0.05405246093869209, -0.1280275583267212, -0.064798504114151, 0.007210981100797653, 0.047576989978551865, -0.01810026355087757, -0.03072493150830269, -0.0014076607767492533, 0.1101786196231842, -0.030992982909083366, 0.07298845797777176, -0.004716488067060709, 0.0469251424074173, 0.05692877247929573, 0.025706252083182335, -0.13134068250656128, 8.521667685101462e-33, 0.02608109638094902, 0.052178531885147095, 0.07159698009490967, 0.053211748600006104, 0.002707704668864608, 0.043281201273202896, -0.013912443071603775, -0.0464043952524662, -0.0888415053486824, -0.08009790629148483, -0.07019158452749252, 0.12488162517547607, -0.012684822082519531, 0.005767511669546366, 0.04445388540625572, -0.04430331289768219, 0.03167050704360008, -0.026264511048793793, 0.04619068279862404, -0.028540484607219696, 0.009338724426925182, -0.04243592172861099, -0.02277779020369053, 0.1510622650384903, 0.07225960493087769, 0.1030985489487648, 0.030781680718064308, -0.010211735032498837, 0.05820366367697716, 0.008533436805009842, -0.08284366875886917, 0.002052866853773594, -0.02948002517223358, 0.006365108769387007, -0.0050518992356956005, -0.020257357507944107, -0.07982746511697769, -0.031563468277454376, 0.006127785891294479, -0.12563760578632355, -0.09139513969421387, 0.01627536304295063, -0.0354449525475502, -0.06257056444883347, -0.03205282613635063, -0.034976083785295486, -0.01231833640486002, -0.05573215335607529, 0.026512691751122475, -0.04293029010295868, -0.07941566407680511, 0.0012790423352271318, 0.011144820600748062, 0.0811518207192421, -0.03966126963496208, 0.0007552712922915816, 0.07812204957008362, -0.004728156141936779, -0.006760728545486927, 0.02020997367799282, 0.027507806196808815, 0.018158284947276115, -0.01562157366424799, 0.022558897733688354, 0.006350749637931585, 0.03518235683441162, -0.06989321112632751, 0.026416661217808723, 0.05765917897224426, 0.07356342673301697, 0.00694528641179204, 0.04566118121147156, 0.05567671358585358, 0.04280729219317436, 0.00602787546813488, -0.05916672199964523, -0.01336711086332798, -0.09185849875211716, -0.02259758859872818, -0.00011327974789310247, -0.12663929164409637, -0.08309389650821686, 0.015152589417994022, 0.03971803933382034, 0.052080050110816956, -0.051955703645944595, 0.05290753394365311, 0.03909756615757942, 0.014952138066291809, 0.05705873668193817, 0.028880281373858452, 0.004052021540701389, 0.013838893733918667, -0.015142599120736122, -0.08688998222351074, -9.041300840354208e-33, 0.008910114876925945, 0.03795676305890083, 0.0036813034676015377, 0.05106991529464722, 0.045412082225084305, -0.014829657971858978, -0.055872879922389984, -0.025784708559513092, -0.0664861872792244, -0.015451590530574322, -0.00516837602481246, -0.028861500322818756, 0.05696837604045868, 0.02277364954352379, -0.033105604350566864, 0.021218229085206985, -0.03133011981844902, -0.07921817898750305, -0.03067842684686184, 0.08893360197544098, -0.07738231122493744, 0.027953356504440308, -0.035722050815820694, -0.01086093857884407, 0.041432470083236694, -0.04882635548710823, 0.022825930267572403, -0.03558558598160744, -0.02128797024488449, -0.006406301166862249, -0.024109812453389168, -0.058056917041540146, -0.04011770710349083, -0.053971510380506516, 0.02526894398033619, -0.013080762699246407, 0.08088648319244385, -0.023673171177506447, -0.028153683990240097, 0.01570417545735836, 0.032068077474832535, 0.0062636760994791985, -0.09064138680696487, -0.03855973854660988, 0.029802748933434486, 0.07553435862064362, -0.05928918346762657, 0.17739291489124298, -0.028033887967467308, -0.03285324573516846, 0.019635727629065514, 0.018676139414310455, 0.019288886338472366, -0.01700977236032486, 0.029780665412545204, -0.10623391717672348, 0.08871187269687653, 0.049644626677036285, -0.002785783028230071, 0.027964580804109573, -0.059590499848127365, -0.09658562391996384, 0.014580127783119678, 0.03489034250378609, -0.029790224507451057, -0.05301930010318756, -0.018162870779633522, -0.00428346823900938, -0.1089131161570549, -0.03461793065071106, 0.01773107796907425, 0.0236345324665308, -0.012559223920106888, 0.026859775185585022, 0.06721783429384232, 0.01429181732237339, -0.062057461589574814, -0.05195726454257965, -0.0159770380705595, 0.0033938626293092966, 0.03144325688481331, 0.09523768723011017, 0.014753425493836403, 0.05711427703499794, 0.05142413452267647, 0.033841051161289215, 0.0530843585729599, 0.04761214181780815, -0.062222305685281754, -0.021308213472366333, -0.04373417794704437, 0.04160604998469353, -0.09663970023393631, 0.05202370882034302, -0.032364193350076675, -4.471148429274763e-08, -0.050604209303855896, 0.017769359052181244, 0.06504898518323898, -0.041412267833948135, 0.07123325765132904, 0.02892916649580002, 0.06851110607385635, 0.1280919313430786, 0.05803246051073074, 0.07020816951990128, 0.07775440812110901, -0.027115480974316597, -0.006702026352286339, 0.015758005902171135, 0.04117706045508385, 0.017911214381456375, 0.03182894363999367, -0.01906452886760235, 0.01871958002448082, 0.009275073185563087, -0.07007589936256409, 0.0005572790978476405, -0.04294005036354065, 0.08150184899568558, 0.042378462851047516, -0.07267001271247864, 0.022793859243392944, 0.009172105230391026, 0.010579106397926807, -0.089006207883358, -0.05598652362823486, -0.03378916531801224, 0.08917606621980667, -0.06939268857240677, 0.01244289055466652, 0.004962085280567408, 0.008639487437903881, 0.057102639228105545, -0.0012860505376011133, 0.09831055253744125, -0.029098333790898323, 0.04357089474797249, -0.013396447524428368, -0.019234126433730125, -0.058497004210948944, 0.023440426215529442, -0.042710889130830765, -0.07789774984121323, 0.06157857924699783, 0.027449937537312508, -0.031085023656487465, -0.07461878657341003, -4.705087121692486e-05, -0.027935011312365532, 0.026805566623806953, 0.028468603268265724, -0.03669518977403641, -0.048907529562711716, 0.08873993903398514, -0.0033901261631399393, 0.019986402243375778, -0.023866230621933937, -0.07053307443857193, 0.0017939890967682004], "keywords": ["database", "aura", "query language", "creative commons"], "redirects": []}, "https://neo4j.com/docs/create-applications": {"links": ["https://neo4j.com/docs/cdc/current", "https://neo4j.com/docs/api/dotnet-driver/current", "https://neo4j.com/docs/api/java-driver/current", "https://neo4j.com/docs/api/python-driver/current", "https://neo4j.com/docs/ogm-manual/current", "https://neo4j.com/docs/http-api/current", "https://docs.spring.io/spring-data/neo4j/reference", "https://neo4j.com/docs/python-manual/current", "https://neo4j.com/docs/api/javascript-driver/current", "https://neo4j.com/docs/javascript-manual/current", "https://neo4j.com/docs/java-manual/current", "https://neo4j.com/docs/dotnet-manual/current", "https://neo4j.com/docs/go-manual/current", "https://neo4j.com/docs/query-api/current", "https://neo4j.com/docs/nvl/current", "https://pkg.go.dev/github.com/neo4j/neo4j-go-driver/v5/neo4j", "https://neo4j.com/docs/graphql-manual/current"], "text": "Create applications with Neo4j\nLanguage libraries\nNeo4j Python Driver\nGuide Reference\nNeo4j Go Driver\nGuide Reference\nNeo4j Java Driver\nGuide Reference\nNeo4j JavaScript Driver\nGuide Reference\nNeo4j .NET Driver\nGuide Reference\nOther libraries\nNeo4j GraphQL Library\nDocumentation\nNeo4j Visualization Library\nDocumentation\nObject Graph Mapping Library\nDocumentation\nSpring Data Neo4j\nDocumentation\nAPIs\nNeo4j HTTP API\nDocumentation\nNeo4j Query API\nDocumentation\nChange Data Capture\nDocumentation", "embeddings": [0.03710247948765755, 0.021012697368860245, -0.01999242603778839, -0.05242109298706055, -0.03548545762896538, 0.003401304828003049, -0.04710964486002922, 0.013099269941449165, -0.09874648600816727, -0.016535792499780655, -0.08030937612056732, -0.012421000748872757, 0.08165238052606583, 0.07157645374536514, 0.057945236563682556, 0.0695284903049469, 0.004561315756291151, 0.05207699537277222, 0.08265455812215805, 0.0024871076457202435, -0.009403316304087639, -0.06812699884176254, 0.04138714820146561, -0.050295669585466385, -0.046354781836271286, -0.008250230923295021, 0.018081894144415855, -0.055888582020998, -0.005542063619941473, -0.0085359588265419, -0.021026743575930595, 0.03234609216451645, -0.06590951234102249, 0.03750408813357353, -0.11743094772100449, 0.04840656369924545, 0.0832916721701622, -0.013452719897031784, -0.021396785974502563, -0.006791997235268354, -0.025416238233447075, 0.019807815551757812, -0.027171149849891663, -0.03191325068473816, 0.03655821457505226, -0.038708630949258804, -0.04929986968636513, -0.053632672876119614, 0.06570640951395035, 0.0011119007831439376, -0.07012113183736801, -0.06756752729415894, -0.033672064542770386, -0.07492929697036743, 0.0004098769277334213, -0.06836313754320145, -0.00105890235863626, -0.0035412374418228865, 0.014004689641296864, 0.046939779072999954, 0.07322467863559723, -0.054213106632232666, -0.04163596034049988, 0.00566150201484561, -0.0509374737739563, 0.06181478872895241, -0.01071521732956171, 0.03181622177362442, 0.02892972156405449, -0.02469545230269432, -0.10625774413347244, 0.03532719984650612, -0.09823489934206009, -0.048990316689014435, -0.09127162396907806, -0.00421153986826539, 0.04531734809279442, -0.025686660781502724, -0.05050224810838699, -0.04284440353512764, 0.017962468788027763, 0.06907174736261368, -0.05819711461663246, 0.09392742067575455, -0.05470091477036476, 0.15889599919319153, -0.05827043578028679, -0.0111918393522501, -0.005290680099278688, 0.06078265607357025, -0.011158183217048645, -0.06610025465488434, -0.04725627973675728, -0.04361744970083237, -0.06121504306793213, 0.004069434013217688, 0.061493244022130966, 0.0018724417313933372, 0.10926216840744019, -0.025657381862401962, 0.01959948241710663, -0.07881182432174683, 0.02855285257101059, 0.006386349443346262, -0.0385463684797287, -0.0024222852662205696, 0.02097475714981556, -0.014494000002741814, -0.04525947570800781, 0.05123589187860489, -0.04818066582083702, -0.00733874412253499, -0.08509514480829239, -0.06512226909399033, -0.017843229696154594, 0.04131210222840309, 0.011989982798695564, -0.05293439328670502, -0.03131430968642235, 0.06190917640924454, -0.04116515442728996, 0.0815342366695404, 0.0032665948383510113, 0.03522929176688194, 0.05355927720665932, 0.023261994123458862, -0.06817515939474106, 2.0450792272809337e-32, 0.019034069031476974, 0.03222428262233734, 0.09488220512866974, 0.05205385386943817, 0.05635584518313408, -0.002678544959053397, 0.008249917067587376, -0.07018188387155533, -0.10735863447189331, -0.08498828113079071, -0.036855198442935944, 0.1046474277973175, -0.01243587490171194, 0.030281102284789085, -0.04870731756091118, 0.026180138811469078, 0.03699222952127457, -0.019392142072319984, -0.011867936700582504, -0.017455659806728363, -0.020434245467185974, 0.026769356802105904, 0.0027056322433054447, 0.15123187005519867, 0.06311938166618347, 0.11088880896568298, -0.034125152975320816, 0.005123033653944731, 0.04126446321606636, -0.010281664319336414, -0.05659424513578415, 0.025376465171575546, 0.0046221427619457245, 0.022635720670223236, 0.024812040850520134, -0.0014782426878809929, -0.024016037583351135, -0.020287230610847473, -0.029114503413438797, -0.07428603619337082, -0.035040006041526794, 0.0336158312857151, -0.03362789377570152, -0.030993297696113586, -0.011753145605325699, -0.06352084875106812, 0.011896904557943344, 0.016452280804514885, 0.0420345775783062, -0.011082098819315434, -0.08093845099210739, 0.04752170294523239, 0.004334867000579834, 0.030744990333914757, -0.07072629779577255, -0.06550043076276779, 0.03893212974071503, 0.02223949506878853, -0.03533507511019707, 0.00776014244183898, -0.03565824404358864, 0.05282476171851158, 0.011790165677666664, 0.03427525982260704, 0.04823681712150574, 0.017520703375339508, -0.03216709941625595, -0.021607834845781326, -0.023163000121712685, 0.08741512149572372, -0.008019035682082176, 0.02253294177353382, 0.029219701886177063, 0.04798107221722603, 0.03256784752011299, -0.04583197087049484, -0.045964423567056656, -0.05077420175075531, -0.019503474235534668, 0.06513796001672745, -0.13293923437595367, -0.10705013573169708, 0.0038153245113790035, 0.00933424849063158, 0.03055630251765251, -0.019336242228746414, 0.10554371774196625, 0.008241727948188782, 0.09311125427484512, 0.06701136380434036, -0.023282645270228386, 0.000980626093223691, -0.053816065192222595, -0.029013238847255707, -0.03956349566578865, -2.0428928077884043e-32, -0.009977668523788452, 0.024684341624379158, 0.041820261627435684, 0.059736575931310654, -0.014988701790571213, 0.030864590778946877, -0.0054155937395989895, -0.06930360198020935, 0.0060049197636544704, 0.02101471647620201, -0.022913247346878052, -0.04352273792028427, 0.08248184621334076, 0.024466507136821747, -0.012018885463476181, 0.0019075648160651326, -0.025962121784687042, -0.06711239367723465, -0.014044787734746933, 0.04766703397035599, -0.08069373667240143, 0.05801437050104141, -0.03343452885746956, -0.003358172718435526, 0.027460448443889618, -0.0848127156496048, 0.02443050965666771, -0.025955257937312126, -0.03747795522212982, -0.032625824213027954, 0.03057766519486904, -0.0439409539103508, -0.010753256268799305, -0.008638780564069748, 0.05401013046503067, -0.029953017830848694, 0.0988817811012268, 0.038900092244148254, 0.030462313443422318, -0.030224254354834557, 0.0467238612473011, -0.020961547270417213, -0.0546194352209568, 0.016952231526374817, 0.026339305564761162, 0.014302746392786503, -0.10524103790521622, 0.07533253729343414, -0.032670628279447556, -0.08758814632892609, -0.011605636216700077, -0.015226609073579311, 0.02232292667031288, -0.0331842340528965, 0.025073688477277756, -0.047187793999910355, 0.11916934698820114, 0.06661246716976166, 0.03782576695084572, 0.05393959954380989, -0.05470538139343262, -0.06975647062063217, -0.05760277062654495, -0.029312239959836006, 0.021639453247189522, -0.08653166145086288, -0.10399976372718811, -0.026625119149684906, -0.11781508475542068, -0.030846010893583298, -0.010592889972031116, 0.04252045229077339, 0.023603638634085655, 0.041455939412117004, 0.013640263117849827, -0.01642468012869358, -0.06599711626768112, 0.015294377692043781, -0.07714372873306274, 0.04173840209841728, 0.028961777687072754, 0.04035364091396332, 0.02115018106997013, 0.07944104820489883, 0.02004234492778778, 0.06568833440542221, -0.0031393240205943584, 0.04673522338271141, -0.06585296988487244, -0.02955274097621441, 0.035768166184425354, 0.07049350440502167, -0.11954890936613083, 0.09138479828834534, -0.04934697225689888, -5.219382614995993e-08, -0.0208198931068182, 0.030051980167627335, -0.022077906876802444, -0.03801883012056351, -0.00972987711429596, 0.0747871845960617, 0.08700663596391678, 0.09538603574037552, -0.006182762794196606, 0.07652191072702408, 0.0538443922996521, 0.008232073858380318, -0.0006608400726690888, -0.003490614704787731, 0.028994465246796608, -0.03966889530420303, 0.010273361578583717, 0.05115539953112602, 0.026847293600440025, 0.04034159705042839, -0.020896034315228462, -0.023155197501182556, -0.06933709979057312, 0.07492011040449142, 0.028966911137104034, -0.04956607148051262, 0.06727047264575958, 0.007195457816123962, 0.02604418806731701, -0.15772618353366852, -0.07423555850982666, -0.02477198652923107, 0.042879097163677216, -0.017174195498228073, 0.036927249282598495, -0.06965034455060959, 0.006221261341124773, 0.07673239707946777, 0.0607936717569828, 0.09951471537351608, 0.0028556121978908777, 0.08775805681943893, -0.05826754495501518, -0.04803602397441864, -0.06431372463703156, 0.0029053720645606518, -0.044217903167009354, -0.10148715227842331, 0.06320425868034363, 0.002189594553783536, -0.05485757812857628, 0.006687202025204897, 0.04437590390443802, 0.016158387064933777, 0.03397928923368454, 0.05955342575907707, -0.03918962553143501, -0.06860122084617615, 0.043068867176771164, -0.0065204668790102005, 0.025943445041775703, -0.00858222134411335, 0.0023138574324548244, 0.006340608466416597], "keywords": ["python", "javascript", "neo", "java", "graphql", ". net"], "redirects": []}, "https://neo4j.com/docs/graphql-manual/current": {"links": [], "text": null, "embeddings": [], "keywords": [], "redirects": ["https://neo4j.com/docs/graphql/current"]}, "https://neo4j.com/docs/graphql/current": {"links": ["https://neo4j.com/docs/graphql/current/queries-aggregations/pagination", "https://neo4j.com/docs/graphql/current/queries-aggregations/sorting", "https://apollo-angular.com/docs", "https://neo4j.com/docs/graphql/current/queries-aggregations/queries", "https://nodejs.org/en", "https://www.npmjs.com/package/@neo4j/graphql", "https://neo4j.com/docs/graphql/current/queries-aggregations/filtering", "https://www.apache.org/licenses/LICENSE-2.0", "https://neo4j.com/docs/graphql/current/ogm", "https://reactjs.org", "https://neo4j.com/docs/graphql/current/types", "https://www.apollographql.com/docs/apollo-server/deployment", "https://neo4j.com/docs/graphql/current/directives/autogeneration", "https://neo4j.com/docs/license", "https://angularjs.org", "https://apollo.vuejs.org", "https://vuejs.org", "https://neo4j.com/docs/graphql/current/directives/database-mapping", "https://graphacademy.neo4j.com/courses/graphql-basics", "https://neo4j.com/docs/graphql/current/deprecations", "https://github.com/neo4j/graphql", "https://neo4j.com/docs/graphql/current/directives/custom-logic", "https://semver.org", "https://neo4j.com/docs/graphql/current/security", "https://www.apollographql.com/docs/react", "https://www.google.com/search", "https://neo4j.com/docs/graphql/current/directives/schema-configuration", "https://github.com/neo4j/graphql/issues", "https://neo4j.com/docs/graphql/current/getting-started/toolbox", "https://neo4j.com/docs/graphql/current/mutations", "https://neo4j.com/docs/apoc/current", "https://neo4j.com/docs/graphql/current/getting-started", "https://neo4j.com"], "text": "Introduction\nThe Neo4j GraphQL Library is a highly flexible, low-code, open source JavaScript library that enables rapid API development for cross-platform and mobile applications by tapping into the power of connected data.\nWith Neo4j as the graph database, the GraphQL Library makes it simple for applications to have data treated as a graph natively from the frontend all the way to storage. This avoids duplicate schema work and ensures flawless integration between frontend and backend developers.\nIf you are new to Neo4j and GraphQL, take the course Introduction to Neo4j & GraphQL in GraphAcademy to learn the fundamentals, how to use the Neo4j GraphQL Toolbox and the Neo4j GraphQL Library to create GraphQL APIs backed by a Neo4j graph database.\nThe GRANDstack starter app has been deprecated. For more information, read the section on Deprecations.\nHow it works\nThe Neo4j GraphQL Library requires a set of type definitions that describes the shape of your graph data. It can generate an entire executable schema with all of the additional types needed to execute queries and mutations to interact with your Neo4j database.\nFor every query and mutation that is executed against this generated schema, the Neo4j GraphQL Library generates a single Cypher query which is executed against the database. This eliminates the N+1 Problem, which can make GraphQL implementations slow and inefficient.\nAutomatic generation of Queries and Mutations for CRUD interactions.\nTypes, including temporal and spatial.\nSupport for both node and relationship properties.\nExtensibility through the @cypher directive and/or Custom Resolvers.\nExtensive Filtering and Sorting options.\nOptions for Database mapping and value Autogeneration.\nPagination options.\nSecurity options and additional Schema Configuration.\nAn OGM (Object Graph Mapper) for programmatic interaction with your GraphQL API.\nA Toolbox (UI) to experiment with your Neo4j GraphQL API on Neo4j Desktop.\nInteraction\nIn the Getting Started guide, Apollo Server is used to host the GraphQL schema, so you can interact directly with your API with no frontend. In case you prefer to use frontend frameworks, these are some clients that interact with GraphQL APIs:\nReact - support through Apollo Client\nVue.js - support through Vue Apollo\nAngularJS - support through Apollo Angular.\nDeployment\nThere are a variety of methods for deploying GraphQL APIs. In the Getting Started guide, Apollo Server is being used for demonstration. You can check their own documentation about Deployment for more details.\nVersioning\nThe Neo4j GraphQL Library uses Semantic Versioning. Given a version number MAJOR.MINOR.PATCH, the increment is based on:\nMAJOR - incompatible API changes compared to the previous MAJOR version, for which you will likely have to migrate\nMINOR - new features have been added in a backwards compatible manner\nPATCH - bug fixes have been added in a backwards compatible manner.\nAdditionally, prerelease version numbers may have additional suffixes, for example MAJOR.MINOR.PATCH-PRERELEASE.NUMBER, where PRERELEASE is one of the following:\nalpha - unstable prerelease artifacts, and the API may change between releases during this phase\nbeta - feature complete prerelease artifacts, which will be more stable than alpha releases but will likely still contain bugs\nrc - release candidate including artifacts to be promoted to a stable release, in a last effort to find trailing bugs.\nNUMBER in the suffix is simply an incrementing release number in each phase.\nRequirements\nNeo4j Database version 4.4 and newer with APOC plugin.\nNode.js 16+.\nResources\nGitHub\nIssue Tracker\nnpm package\nLicense\nDocumentation license: Creative Commons 4.0\nSource: Apache 2.0\nCreating a new project", "embeddings": [-0.017721952870488167, 0.011701704002916813, -0.039983972907066345, 0.04303152486681938, -0.05218692868947983, -0.05822889506816864, -0.06901147216558456, 0.03214634954929352, -0.07561873644590378, 0.003249270375818014, -0.0560770183801651, 0.009200255386531353, 0.09907645732164383, 0.022522617131471634, 0.03788567706942558, 0.09442594647407532, 0.017750559374690056, -0.02327883057296276, 0.034668270498514175, -0.048434317111968994, -0.03468799218535423, -0.05359023064374924, 0.011752495542168617, -0.024343879893422127, 0.04965963587164879, 0.0006555804866366088, 0.007691510953009129, -0.011553499847650528, -0.012238898314535618, 0.007105073891580105, -0.005102733615785837, -0.02800969034433365, -0.06950245052576065, 0.07737042754888535, -0.11938098818063736, 0.04146190732717514, 0.06135078892111778, -0.0005829246365465224, -0.02332356944680214, -0.004223987925797701, -0.03603574261069298, 0.023197365924715996, -0.05867037922143936, 0.014430884271860123, 0.05536447837948799, -0.004450719337910414, -0.11860984563827515, -0.008448581211268902, 0.02739245444536209, 0.02477039396762848, -0.06639599055051804, -0.08470332622528076, -0.05175875872373581, -0.025697357952594757, 0.050141602754592896, 0.041660718619823456, -0.034777767956256866, -0.036140333861112595, 0.024148790165781975, 0.06696616113185883, 0.0728621780872345, -0.03722488880157471, 0.00625850073993206, -0.009098944254219532, -0.007297949865460396, -0.02281976118683815, 0.029421716928482056, 0.047774966806173325, 0.07204973697662354, -0.04041912779211998, -0.045821741223335266, 0.051783204078674316, -0.07271767407655716, 0.0025230152532458305, -0.08730068057775497, 0.04963313788175583, 0.011927544139325619, 0.0151777109131217, -0.04337689280509949, -0.023709923028945923, -0.010535898618400097, 0.06254397332668304, -0.02701486647129059, 0.07809184491634369, -0.032467734068632126, 0.0644628256559372, -0.009146329015493393, 0.00707591138780117, -0.037542857229709625, 0.036568038165569305, 0.009857854805886745, 0.009219381958246231, -0.008948287926614285, -0.02106177620589733, 0.0007869314285926521, 0.0453849695622921, 0.08142541348934174, -0.029766105115413666, 0.06470594555139542, 0.01592603325843811, 0.03822527453303337, -0.06784450262784958, 0.012002464383840561, 0.007352524437010288, -0.020234201103448868, 0.011890770867466927, -0.0023690348025411367, 0.012629977427423, -0.05707765370607376, 0.04019147902727127, -0.052759356796741486, 0.053732775151729584, -0.011801728047430515, -0.03318888321518898, -0.022296985611319542, 0.04646725952625275, -5.7848563301377e-05, -0.05671103671193123, 0.018458332866430283, 0.045272305607795715, 0.02049124985933304, 0.10766541212797165, -0.005749966483563185, -0.0010370194213464856, 0.06909631937742233, 0.0054032448679208755, -0.05796289071440697, 6.059533053850763e-33, 0.03734526038169861, -0.0004145342099945992, 0.1297488659620285, 0.03760750591754913, 0.01327733788639307, 0.028479741886258125, -0.03502530977129936, -0.020117631182074547, -0.10853376239538193, 0.04481244087219238, -0.04273919761180878, 0.08632887899875641, 0.0015269746072590351, 0.020723266527056694, 0.03163091093301773, 0.015910141170024872, -0.006161027122288942, -0.05450412258505821, 0.005680104251950979, -0.033614207059144974, -0.02356845699250698, -0.0011751725105568767, -0.0020653409883379936, 0.17822952568531036, 0.06431049108505249, 0.15371215343475342, -0.02378356270492077, 0.02394023723900318, 0.03580200672149658, 0.014155293814837933, -0.08296115696430206, -0.007350075989961624, -0.05444745346903801, 0.012642508372664452, -0.014849666506052017, -0.035343170166015625, -0.07125529646873474, -0.05431131646037102, -0.03507876768708229, -0.11119917780160904, -0.012177115306258202, -0.0038357072044163942, -0.018692925572395325, -0.05976838245987892, -0.054196201264858246, -0.013820494525134563, -0.031708527356386185, -0.033470269292593, 0.007224929053336382, -0.06251858919858932, -0.0745270773768425, 0.0037297799717634916, -0.018478399142622948, 0.08420627564191818, -0.049505751579999924, -0.010787991806864738, 0.05873662605881691, -0.007391488645225763, -0.04508308693766594, 0.049141351133584976, 0.03359634801745415, 0.007352034095674753, -0.03505025804042816, 0.03216402977705002, 0.015056515112519264, 0.033641617745161057, -0.08028217405080795, -0.017049871385097504, 0.007607742678374052, 0.05428203567862511, 0.05183497443795204, 0.08237274736166, 0.053119268268346786, -0.006817768327891827, 0.02018066495656967, -0.07874326407909393, -0.04351166635751724, -0.053269848227500916, -0.03433183953166008, 0.006506787613034248, -0.06029019132256508, -0.09929090738296509, -0.026733672246336937, 0.018557315692305565, 0.023986583575606346, -0.000999449985101819, 0.103348009288311, 0.006674415897578001, 0.06310221552848816, 0.0939062237739563, -0.0016083389054983854, 0.0007238620310090482, -0.004714782349765301, -0.027131566777825356, -0.025584260001778603, -6.665578268200394e-33, -0.03597026690840721, 0.05840310826897621, 0.031452763825654984, 0.049396563321352005, 0.031543053686618805, -0.006831478327512741, -0.06076689437031746, -0.03539316728711128, -0.05744277313351631, -0.010636606253683567, -0.05480676516890526, -0.046212028712034225, 0.05399211868643761, -0.0074347686022520065, 0.027790069580078125, 0.026466619223356247, -0.07192707061767578, -0.13426747918128967, -0.045033786445856094, 0.04048202186822891, -0.04435383528470993, 0.09886673092842102, -0.05797392129898071, -0.009245808236300945, 0.06548775732517242, -0.0646560937166214, -0.02560322731733322, -0.02713439054787159, -0.05289466679096222, 0.010628659278154373, -0.05266886204481125, -0.046674150973558426, -0.011451128870248795, -0.08225105702877045, 0.044515710324048996, -0.04964940994977951, 0.06125909090042114, 0.019959550350904465, 0.01611892133951187, -0.051689036190509796, -0.025982314720749855, -0.006454647518694401, -0.0771544873714447, -0.0002599880681373179, 0.03439851850271225, 0.09327122569084167, -0.11666557192802429, 0.14929576218128204, -0.03103742003440857, -0.034200914204120636, 0.008613530546426773, 0.010935160331428051, 0.04549000784754753, -0.021934211254119873, 0.039485588669776917, -0.10438299924135208, 0.05142521485686302, 0.0579049177467823, -0.012713645584881306, 0.038437046110630035, -0.10864606499671936, -0.09438250213861465, 0.002584021305665374, 0.013565129600465298, -0.004125151317566633, -0.06827002018690109, -0.043115146458148956, -0.04217330366373062, -0.049132827669382095, -0.013505074195563793, -0.005990981124341488, 0.01626599207520485, 0.01689050905406475, 0.020885828882455826, 0.10515929013490677, -0.008512335829436779, -0.09274210780858994, -0.015593243762850761, -0.07143601775169373, 0.028306812047958374, 0.047093771398067474, 0.05066131427884102, 0.07797806710004807, 0.07390564680099487, 0.046047985553741455, 0.028653820976614952, 0.01811159960925579, 0.07483885437250137, -0.047248635441064835, 0.03689773753285408, -0.038468170911073685, 0.052121445536613464, -0.16240322589874268, 0.07157788425683975, 0.00029997716774232686, -4.763219507708527e-08, -0.052885450422763824, 0.023353906348347664, -0.04281033203005791, -0.060527000576257706, 0.014285922981798649, 0.040361665189266205, 0.06597328931093216, 0.12874360382556915, 0.03013364039361477, 0.12406829744577408, 0.07104964554309845, 0.013442161493003368, 0.006242148578166962, 0.011594674549996853, -0.03055877983570099, 0.011957981623709202, 0.04425946995615959, -0.024750597774982452, 0.043330851942300797, 0.029040802270174026, -0.02706003189086914, 0.007969703525304794, -0.07042121142148972, 0.09860050678253174, 0.06515540182590485, -0.078956238925457, 0.007497941143810749, 0.030809199437499046, 0.0023661963641643524, -0.08450332283973694, -0.05990210175514221, -0.007558045443147421, 0.11551324278116226, 0.007731801830232143, -0.011662565171718597, -0.011759717017412186, 0.03202279657125473, 0.05883260816335678, -0.0015420416602864861, 0.03384970501065254, 0.05388734117150307, 0.06729906052350998, -0.054819051176309586, -0.0328284427523613, -0.09187763929367065, 0.015578986145555973, -0.013015621341764927, -0.04270128905773163, 0.08440344780683517, 0.00621878681704402, -0.06511800736188889, -0.052155110985040665, -0.016035255044698715, -0.005729378666728735, 0.017229560762643814, 0.05265161022543907, -0.041971780359745026, -0.013229278847575188, 0.0887930765748024, 0.004118925426155329, 0.033170655369758606, 0.009120116010308266, -0.03277403861284256, -0.025549612939357758], "keywords": ["javascript", "graph", "open source", "graphql", "apollo", "graphq"], "redirects": []}, "https://neo4j.com": {"links": [], "text": "This website uses cookies\nWe use cookies to offer you a better browsing experience, analyze site traffic, personalize content and serve targeted ads.  Learn about how we use cookies and how you can control them in Cookie Settings. By using our site. you consent to our use of cookies. \nAccept CookiesUse necessary cookies only\nSkip to content\nNODES 2024 Online Developer Conference | November 7, 2024 | Save the Date\nMenu\nGenAI apps,\ngrounded in your data\nPower your applications with knowledge graphs. Backed by the only graph database with vector search.\nGet Started for Free\nExplore GenAI\nINNOVATION LEADERS RELY ON GRAPH\nNeo4j-Databricks Connector Delivers Deeper Insights, Faster GenAI Development\nLearn More\nNeo4j Brings Advanced Graph Data Science to Snowflake\nLearn More\nISO GQL NEWS \u2014 A Defining Moment in the History of Database Innovation\nLearn More\nGRAPH DATABASE & ANALYTICS\nRealize the Possibilities\nWith Our Full Graph Stack\nNative graph storage, data science, ML, analytics, and visualization with enterprise-grade security controls to scale your transactional and analytical workloads \u2013 without constraints.\nExplore our full graph stack\nGRAPH DATA SCIENCE\nImprove Models. Sharpen Predictions.\nBuilt by data scientists for data scientists, Neo4j Graph Data Science unearths and analyzes relationships in connected data to increase ML model accuracy and drive contextual AI \u2013 making better predictions with the data you already have.\nDiscover graph data science\nJOIN OUR GLOBAL COMMUNITY\nBuild Smarter Apps. Faster.\nDevelop intelligent applications quickly and collaborate with a global network of developers, data scientists, and innovators, while sharing resources, insights, and technical expertise.\nStart building today\nNearly 40% of organizations struggle to validate and trust GenAI content.\nLearn how knowledge graph + native vector search takes GenAI from test case to enterprise-ready solution.\nGet Analyst Report\nENTERPRISE-GRADE PERFORMANCE\nScale and Flexibility for the\nMost Demanding Workloads\nGraph-Native Scale\nEfficiently scale horizontally to handle high-throughputs and very large data sets with billions of connections. Autonomous Clustering streamlines server administration, enabling additional database copies or shards while maintaining top performance and availability.\nScale Neo4j with confidence\n\u2192\nFlexibility for Connected Data\nBenefit from the flexibility of the graph database model, supporting real-time updates to graph ontology and multi-database functionality. The whiteboard-friendly schema adapts as business needs change and serves diverse departmental needs.\nUnlock operational flexibility\n\u2192\nEliminate Joins, Simplify Querying\nNeo4j makes querying simple by eliminating tables and joins. Experience Cypher, our powerful query language that simplifies data analysis with 10x less code than SQL.\nExplore Cypher\nCypher\nMATCH (p:Product)-[:CATEGORY]->(l:ProductCategory)-[:PARENT*0..]\n->(:ProductCategory {name:\"Dairy Products\"})\nRETURN p.name\nSQL\nSELECT p.ProductName\nFROM Product AS p\nJOIN ProductCategory pc ON (p.CategoryID = pc.CategoryID \nAND pc.CategoryName = \"Dairy Products\")\n\nJOIN ProductCategory pc1 ON (p.CategoryID = pc1.CategoryID)\nJOIN ProductCategory pc2 ON (pc1.ParentID = pc2.CategoryID \nAND pc2.CategoryName = \"Dairy Products\")\n\nJOIN ProductCategory pc3 ON (p.CategoryID = pc3.CategoryID)\nJOIN ProductCategory pc4 ON (pc3.ParentID = pc4.CategoryID)\nJOIN ProductCategory pc5 ON (pc4.ParentID = pc5.CategoryID \nAND pc5.CategoryName = \"Dairy Products\");\n                            \nGOOGLE\nMICROSOFT\nAMAZON AWS\nAny Cloud. Any Architecture.\nRun Neo4j in the cloud of your choice for a fully managed experience, or on-premise and self-hosted to meet the most strict data security requirements.\nGraph-as-a-Service\nDeploy like a pro. No infrastructure or system access required.\nCloud Managed Services\nGet the perfect fit. Deploy in your own data centers or VPC.\nSelf-Hosted\nTotal control, infinite possibilities. Bring your own license and deploy anywhere.\nFind the right partner\nReady To Get Started?\nNeo4j has been downloaded over 2 million times and has a large global community of developers.\nGet Started for Free\nPRODUCTS\nNeo4j Graph Database\nNeo4j AuraDB\nNeo4j Graph Data Science\nDeployment Center\nProfessional Services\nPricing\nGRAPH TOOLS\nNeo4j Developer Tools\nNeo4j Workspace\nNeo4j Bloom\nNeo4j GraphQL Library\nNeo4j Data Connectors\nCypher Query Language\nUSE CASES\nGenerative AI\nKnowledge Graphs\nIndustries & Use Cases\nCase Studies\nCustomers\nDEVELOPERS\nDeveloper Home\nDocumentation\nDeployment Center\nDeveloper Blog\nCommunity\nVirtual Events\nGraphAcademy\nRelease Notes\nDATA SCIENTISTS\nGraph Data Science Home\nData Science Documentation\nGet Started with Graph Data Science\nData Science Community\nGraphAcademy for Data Science\nLEARN\nResource Library\nNeo4j Blog\nGraphAcademy\nResearch Center\nCase Studies\nExecutive Insights\nEvents Calendar\nGraphSummit\nConnections\nWebinars\nPARTNERS\nFind a Partner\nBecome a Partner\nSolution Partners\nOEM Partners\nTechnology Partners\nPartner Portal Login\nCOMPANY\nAbout Us\nNewsroom\nAwards and Honors\nGraphs4Good\nCareers\nCulture\nDiversity\nLeadership\nSupport\nTrust Center\nCONTACT US \u2192\nUS: 1-855-636-4532\nSweden: +46 171 480 113\nUK: +44 20 3868 3223\nFrance: +33 (0) 1 88 46 13 20\nSOCIAL NETWORKS\n\u00a9 2024 Neo4j, Inc.\nTerms | Privacy Policy | Sitemap\nAnti-Corruption Policy\nNeo4j\u00ae, Neo Technology\u00ae, Cypher\u00ae, Neo4j\u00ae Bloom\u2122, Neo4j\u00ae AuraDS\u2122 and Neo4j\u00ae AuraDB\u2122 are registered trademarks of Neo4j, Inc. All other marks are owned by their respective companies.", "embeddings": [-0.021725157275795937, -0.020193252712488174, -0.028498556464910507, 0.04702981188893318, 0.012343970127403736, -0.0944121703505516, -0.06757673621177673, -0.01346354465931654, -0.0633234903216362, 0.021171394735574722, -0.05334586650133133, 0.013262529857456684, 0.034341953694820404, 0.060461241751909256, 0.044348012655973434, 0.09794744104146957, -0.0013793642865493894, 0.011312803253531456, -0.043849676847457886, -0.09973043203353882, -0.051219988614320755, -0.05187779292464256, 0.004091562703251839, -0.021442146971821785, 0.010585619136691093, 0.011569658294320107, 0.011745071038603783, -0.03579762950539589, 0.0032889079302549362, -0.057265862822532654, 0.005708273500204086, 0.04862504452466965, -0.03128601610660553, 0.07234669476747513, -0.09748667478561401, 0.0009136127773672342, 0.039448074996471405, 0.04197316616773605, 0.042600832879543304, -0.0008864707197062671, -0.023681070655584335, -0.06782582402229309, -0.014940252527594566, 0.05110245570540428, 0.02476177178323269, 0.012902190908789635, -0.1397746354341507, -0.04944087564945221, 0.028924455866217613, 0.05226634815335274, -0.09839044511318207, -0.02683381736278534, -0.028097959235310555, -0.012680301442742348, 0.02148481458425522, 0.03706229478120804, 0.02550727128982544, -0.050480931997299194, 0.0287447702139616, 0.05905424803495407, 0.0888843759894371, -0.05442344769835472, -0.027461735531687737, 0.02580307424068451, 0.014832581393420696, 0.003771006828173995, 0.032554883509874344, 0.05072593316435814, 0.0171070396900177, -0.03544336184859276, 0.03295571729540825, 0.0416589118540287, -0.09644787758588791, 0.01533716730773449, -0.013560793362557888, 0.0851939246058464, 0.05353892222046852, 0.021247107535600662, 0.053690019994974136, -0.05979146808385849, 0.03517121076583862, 0.0793045163154602, -0.04815008118748665, 0.07188577950000763, -0.05718722566962242, 0.02474094182252884, 0.012576688081026077, -0.02393973059952259, 0.006848444696515799, 0.024464821442961693, -0.016535617411136627, 0.04327112063765526, -0.009318811818957329, -0.007383767049759626, -0.02569364570081234, 0.010165475308895111, 0.04540104418992996, -0.04891526699066162, 0.01888478733599186, 0.04092441499233246, 0.016879895702004433, 0.03204458951950073, 0.023607050999999046, -0.011723693460226059, -0.032941464334726334, 0.02913050912320614, 0.02253638580441475, 0.07529731839895248, 0.002192041603848338, 0.03548232838511467, -0.019530151039361954, 0.07735589146614075, -0.06714703887701035, -0.003341375384479761, 0.026231613010168076, -0.018943235278129578, -0.05410747602581978, 0.02433346025645733, 0.02800358459353447, 0.062285058200359344, -0.019498735666275024, 0.09858057647943497, -0.01962553896009922, -0.07645028829574585, 0.005691083613783121, 0.0023502777330577374, -0.11593902111053467, 7.5948690006628e-33, 0.04646838456392288, 0.030186861753463745, 0.05036352202296257, 0.0068648201413452625, 0.031147168949246407, 0.05415806174278259, -0.04935735836625099, -0.012795570306479931, -0.12138969451189041, -0.01139245368540287, -0.10253503918647766, 0.12296760827302933, -0.0291599091142416, 0.09804116934537888, 0.039765600115060806, -0.03102177008986473, 0.028146063908934593, -0.040489017963409424, -0.0038039530627429485, -0.0668400451540947, 0.038786351680755615, -0.04560038074851036, -0.001948507153429091, 0.06607016175985336, 0.0855613648891449, 0.05464969575405121, -0.021980198100209236, 0.011266966350376606, 0.047239817678928375, 0.027034355327486992, -0.08797122538089752, 0.03002363070845604, -0.03898833692073822, 0.03986851125955582, 0.03287706524133682, -0.0252116397023201, -0.015311854891479015, -0.11283358186483383, 0.00012108967348467559, -0.054991427809000015, -0.05054854229092598, 0.05112725496292114, -0.025357218459248543, -0.04482179507613182, -0.113457590341568, 0.007287175860255957, 0.012392202392220497, -0.012994296848773956, 0.017872178927063942, 0.010401509702205658, -0.053792838007211685, 0.006272115278989077, -0.014468043111264706, 0.07390773296356201, -0.04855453968048096, -0.012162357568740845, 0.060372062027454376, -0.014342389069497585, 0.03925798833370209, 0.0481906533241272, -0.018623994663357735, -0.020052969455718994, -0.0655522421002388, 0.011009491980075836, -0.003318092552945018, 0.07948042452335358, -0.03895696997642517, 0.04473040997982025, 0.08840779215097427, 0.05030275881290436, -0.016889754682779312, 0.06416219472885132, 0.03945820778608322, -0.04448769986629486, -0.03064713627099991, -0.08208077400922775, -0.03927472606301308, -0.04893670976161957, 0.009771706536412239, 0.037257786840200424, -0.07395974546670914, -0.053002726286649704, -0.0179906003177166, -0.04957679659128189, -0.020275874063372612, -0.0413489006459713, 0.06559821963310242, 0.04633447155356407, 0.015882104635238647, 0.020913274958729744, -0.04097126051783562, 0.004441354889422655, 0.08231561630964279, 0.008418764919042587, -0.05982312187552452, -6.585930444408522e-33, -0.0836707353591919, 0.026140812784433365, 0.02081354334950447, 0.08363275229930878, 0.07471299171447754, -0.06298285722732544, 0.027675330638885498, -0.08397514373064041, -0.04540635272860527, -0.042757220566272736, -0.0002241981273982674, -0.01477449294179678, 0.06645072996616364, 0.0013499632477760315, 0.03944103792309761, 0.032353781163692474, -0.044588733464479446, -0.08538458496332169, -0.07830937951803207, 0.041763778775930405, -0.03740420937538147, 0.10463565587997437, -0.12770533561706543, -0.005586668383330107, 0.10145331919193268, -0.03667554259300232, -0.022786444053053856, -0.011557268910109997, -0.0049974131397902966, 0.019198503345251083, -0.011903690174221992, -0.03475690260529518, -0.06243551895022392, -0.07093200832605362, 0.038312554359436035, 0.029327912256121635, 0.10210002213716507, -0.03696863353252411, -0.006458211690187454, -0.03727894648909569, -0.024606958031654358, 0.035918690264225006, -0.0785612165927887, 0.034950077533721924, 0.0165017731487751, 0.12397878617048264, -0.08183895796537399, 0.11895439028739929, -0.04314266890287399, 0.01340229157358408, -0.0022572700399905443, 0.051542893052101135, 0.026538947597146034, -0.05875908210873604, 0.013935238122940063, -0.038881853222846985, 0.04234921187162399, 0.06172332912683487, -0.07273717224597931, 0.0257550198584795, -0.03824520483613014, -0.08990596234798431, -0.0044529493898153305, 0.06639357656240463, 0.02226514182984829, -0.05423078313469887, -0.0012248681159690022, 0.004695525858551264, -0.08146228641271591, -0.015199820511043072, 0.032727062702178955, 0.008004087023437023, -0.007149222306907177, -0.06189864128828049, 0.03486861288547516, -0.020995011553168297, -0.024422936141490936, -0.04611480236053467, -0.0378996916115284, 0.016962319612503052, -0.0162199717015028, 0.05616892874240875, 0.036706097424030304, 0.035409893840551376, 0.0313589908182621, 0.04089305177330971, -0.0036137360148131847, 0.06580743193626404, -0.03352966532111168, 0.0046815210953354836, -0.07150975614786148, -0.024925651028752327, -0.158231720328331, 0.08948588371276855, -0.017431583255529404, -4.609950110534555e-08, -0.012436943128705025, -0.03306172043085098, 0.03642052784562111, 0.01525246910750866, 0.09121518582105637, 0.01624283939599991, 0.05107458308339119, 0.1482408046722412, -0.019590022042393684, 0.09249669313430786, 0.09960712492465973, 0.042533501982688904, -0.07445327192544937, 0.01195839699357748, 0.09047232568264008, 0.0015646961983293295, 0.04441855847835541, -0.04292785003781319, -0.01649593561887741, -0.04855707660317421, -0.019905995577573776, -0.012535680085420609, -0.05556465685367584, 0.10618206113576889, 0.05430193245410919, -0.07583224773406982, 0.02998356521129608, 0.09185510873794556, -0.015865549445152283, -0.05003924295306206, -0.05024347081780434, -0.03667018562555313, 0.06090448051691055, -0.03481017425656319, 0.04679702967405319, 0.028258975595235825, 0.023122450336813927, 0.030081434175372124, -0.03206454589962959, 0.08473524451255798, 0.009739122353494167, 0.06799059361219406, 0.017786964774131775, -0.0003605042875278741, -0.06983999907970428, 0.014467405155301094, -0.07984685897827148, -0.01812836341559887, 0.03705231472849846, -0.016562610864639282, -0.08383084088563919, -0.07181907445192337, -0.006074767559766769, 0.04787888005375862, 0.0675138533115387, 0.025402875617146492, -0.049101248383522034, 0.009610671550035477, 0.062196362763643265, 0.033211808651685715, 0.0614730566740036, -0.0644950345158577, -0.02663928084075451, -0.055009759962558746], "keywords": ["whiteboard", "organizationslogy"], "redirects": []}, "https://neo4j.com/docs/graphql/current/getting-started": {"links": [], "text": null, "embeddings": [], "keywords": [], "redirects": ["https://neo4j.com/docs/graphql/5/getting-started"]}, "https://neo4j.com/docs/graphql/5/getting-started": {"links": ["https://neo4j.com/docs/graphql/5/queries-aggregations", "https://neo4j.com/cloud/platform/aura-graph-database", "https://neo4j.com/docs/graphql/5/getting-started/toolbox", "https://neo4j.com/docs/graphql/5/introspector", "http://localhost:4000", "https://www.apollographql.com/docs/apollo-server", "https://graphacademy.neo4j.com/courses/graphql-basics", "https://neo4j.com/docs/graphql/5/driver-configuration", "https://neo4j.com/docs/operations-manual/current/configuration/ports", "https://neo4j.com/docs/graphql/5", "https://neo4j.com"], "text": "Creating a new project\nThis tutorial walks you through creating a new project with the Neo4j GraphQL Library.\nIf you are not familiar with Neo4j and GraphQL, you can alternatively take the course Introduction to Neo4j & GraphQL in GraphAcademy to learn the fundamentals, how to use the Neo4j GraphQL Toolbox and the Neo4j GraphQL Library to create GraphQL APIs backed by a Neo4j graph database.\nThis tutorial shows you how to:\nInstall the Neo4j GraphQL Library and its dependencies.\nSet type definitions that represent the structure of your graph database.\nStart an instance of the library to generate a GraphQL schema.\nRun an instance of a server to execute queries and mutations against your schema.\nThe tutorial assumes familiarity with command line and JavaScript, and also that you have a recent version of Node.js installed. The examples use the default npm package manager, but you can use another one of choice.\nCreate a new project\nCreate a new directory and cd into it:\nmkdir neo4j-graphql-example\ncd neo4j-graphql-example\nCreate a new Node.js project (with ESM modules enabled by using the es6 option):\nnpm init es6 --yes\nCreate an empty index.js file which will contain all of the code for this tutorial:\ntouch index.js\nInstall dependencies\nInstall the Neo4j GraphQL Library and its dependencies:\n@neo4j/graphql: the official Neo4j GraphQL Library package. It takes your GraphQL type definitions and generates a schema backed by a Neo4j database.\ngraphql: the package used to generate a schema and execute queries and mutations.\nneo4j-driver: the official Neo4j Driver package for JavaScript, of which an instance must be passed into the Neo4j GraphQL Library.\nInstall a GraphQL server package to host your schema and allow the execution of queries and mutations against it.\nThe @apollo/server is the default package for Apollo Server:\nnpm install @neo4j/graphql graphql neo4j-driver @apollo/server\nSet up a Neo4j database. Make sure it fulfills the requirements, including the necessary plugins.\nSet GraphQL type definitions\nThe Neo4j GraphQL Library is primarily driven by type definitions which map to the nodes and relationships in your Neo4j database. To get started, use a simple example with two node types, one with label \"Actor\" and the other \"Movie\":\nOpen the previously created index.js in your editor of choice and write your type definitions. Add all of the necessary package imports:\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { Neo4jGraphQL } from \"@neo4j/graphql\";\nimport neo4j from \"neo4j-driver\";\n\nconst typeDefs = `#graphql\n    type Movie {\n        title: String\n        actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN)\n    }\n\n    type Actor {\n        name: String\n        movies: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n    }\n`;\nNote that these type definitions only define the node labels \"Actor\" and \"Movie\", and a relationship \"ACTED_IN\" between the two. When the schema is generated, you can then execute queries for actors and movies to read data from the database.\nAlternatively, you can also automatically generate type definitions from an existing database by introspecting the schema.\nCreate an instance of Neo4jGraphQL\nTo create an instance of the Neo4j GraphQL Library, you need a Neo4j driver to connect to your database.\nUsing AuraDB\nFor an AuraDB database, create an instance.\nMake sure to save the generated password and the connection URI provided after the instance is ready and looking similar to this:\nUsing a Neo4j database\nFor a database located at the default \"neo4j://localhost:7687\" (see more about port configuration), with the username \"username\" and the password \"password\", add the following to the bottom of your index.js file:\nconst driver = neo4j.driver(\n    \"neo4j://localhost:7687\",\n    neo4j.auth.basic(\"username\", \"password\")\n);\n\nconst neoSchema = new Neo4jGraphQL({ typeDefs, driver });\nCreate an instance of ApolloServer\nTo create an Apollo Server instance using the generated schema, in which you can execute queries against it, add the following to the bottom of index.js:\nconst server = new ApolloServer({\n    schema: await neoSchema.getSchema(),\n});\n\nconst { url } = await startStandaloneServer(server, {\n    listen: { port: 4000 },\n});\n\nconsole.log(`\ud83d\ude80 Server ready at ${url}`);\nStart the server\nMake sure that your index.js file looks like this:\nimport { ApolloServer } from '@apollo/server';\nimport { startStandaloneServer } from '@apollo/server/standalone';\nimport { Neo4jGraphQL } from \"@neo4j/graphql\";\nimport neo4j from \"neo4j-driver\";\n\nconst typeDefs = `#graphql\n    type Movie {\n        title: String\n        actors: [Actor!]! @relationship(type: \"ACTED_IN\", direction: IN)\n    }\n\n    type Actor {\n        name: String\n        movies: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n    }\n`;\n\n driver = neo4j.driver(\n    ,\n    neo4j.auth.basic(, )\n);\n\n neoSchema =  Neo4jGraphQL({ typeDefs, driver });\n\n server =  ApolloServer({\n    :  neoSchema.getSchema(),\n});\n\n { url } =  startStandaloneServer(server, {\n    :  ({ req }) => ({ req }),\n    : { :  },\n});\n\n.log();\nView all (19 more lines)\nYou are ready to start up your GraphQL server. Back in the command line, run:\nnode index.js\nIf successful, you should see the following output:\n\ud83d\ude80 Server ready at http://localhost:4000/\nThe address http://localhost:4000/ is the URL where the Apollo Server starts.\nCreate nodes in the database\nVisit http://localhost:4000/ in your web browser. You should get redirected to the Apollo Sandbox:\nAt the moment your database is empty. To start adding data, copy and paste the following mutation to the Operation panel to create a movie and an actor in that movie:\nmutation {\n  createMovies(\n    input: [\n      {\n        title: \"Forrest Gump\"\n        actors: { create: [{ node: { name: \"Tom Hanks\" } }] }\n      }\n    ]\n  ) {\n    movies {\n      title\n      actors {\n        name\n      }\n    }\n  }\n}\nClick the \"Run\" button on the top right. You should get the following confirmation that the data has been created in the database in the Response panel:\n{\n  \"data\": {\n    \"createMovies\": {\n      \"movies\": [\n        {\n          \"title\": \"Forrest Gump\",\n          \"actors\": [\n            {\n              \"name\": \"Tom Hanks\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\nQuery the data which you just added. Copy and paste the following query to the Operations panel:\nquery {\n  movies {\n    title\n    actors {\n      name\n    }\n  }\n}\nSince you only created one \"Movie\" node and one \"Actor\", the Response panel shows the following:\n{\n  \"data\": {\n    \"movies\": [\n      {\n        \"title\": \"Forrest Gump\",\n        \"actors\": [\n          {\n            \"name\": \"Tom Hanks\"\n          }\n        ]\n      }\n    ]\n  }\n}\nConclusion\nThis concludes the tutorial. By now, you should have a GraphQL API connected to a Neo4j database, to which you added two nodes.\nTo learn more, keep reading the documentation about Queries and aggregations or alternatively learn how to use the Neo4j GraphQL Toolbox. For more advanced database settings, refer to the Driver configuration page.\nIntroduction\nNeo4j GraphQL Toolbox", "embeddings": [-0.0028891831170767546, 0.0047803474590182304, -0.03547342121601105, 0.0179903507232666, -0.08708757162094116, -0.04889063537120819, -0.06260878592729568, 0.013421680778265, -0.07978703081607819, 0.05542365461587906, -0.04100259765982628, -0.032924532890319824, 0.12813395261764526, 0.031097659841179848, 0.0013319064164534211, 0.09615951776504517, -0.004469761159271002, 0.007936587557196617, 0.042454224079847336, -0.041332416236400604, -0.025412261486053467, -0.04015684500336647, 0.04876489192247391, -0.026031453162431717, -0.017185017466545105, 0.012894222512841225, 0.05920176953077316, -0.008469577878713608, -0.020948555320501328, -0.002139988588169217, -0.005441413726657629, 0.0076695699244737625, -0.04091029614210129, 0.03929693251848221, -0.0546286478638649, 0.03567897155880928, 0.053315240889787674, 0.020658474415540695, 0.0010152210015803576, 0.003261307254433632, -0.02005419135093689, 0.020414147526025772, -0.03345365449786186, -0.009271088056266308, 0.04963068291544914, -0.04336989298462868, -0.13377182185649872, 0.027356237173080444, 0.06565981358289719, -0.014709786511957645, -0.07825861126184464, -0.12735645473003387, -0.06110255792737007, -0.06859799474477768, 0.026234803721308708, 0.021762780845165253, -0.0060913595370948315, -0.027752714231610298, 0.007520919665694237, 0.04294038563966751, 0.09728682786226273, -0.01510569080710411, 0.022916926071047783, -0.026726525276899338, -0.012310541234910488, 0.022886104881763458, 0.06437043845653534, 0.07634741812944412, 0.10773710906505585, 0.021650079637765884, -0.0062732212245464325, 0.03230578824877739, -0.09523709118366241, 0.0012694117613136768, -0.05801327899098396, 0.056760936975479126, 0.01848488301038742, 0.023938041180372238, -0.050714556127786636, 0.00823142658919096, -0.04274453967809677, 0.02570156194269657, -0.00953451357781887, 0.06147082895040512, -0.05874351039528847, 0.08186577260494232, 0.01739024557173252, -0.020919736474752426, 0.008760732598602772, 0.024171562865376472, -0.03677908703684807, -0.020733416080474854, -0.0547998771071434, -0.0524803102016449, 0.01309516653418541, 0.05055136978626251, 0.08693888038396835, 0.005333915818482637, 0.15733270347118378, -0.0076532261446118355, 0.021503841504454613, -0.0735509991645813, 0.022155577316880226, -0.030734149739146233, -0.03374022990465164, 0.06769423186779022, -0.020737232640385628, -0.009474026039242744, -0.04450768232345581, 0.013653296045958996, -0.0635356456041336, 0.05241662636399269, -0.020194828510284424, -0.0266086608171463, 0.005696030333638191, 0.03816398233175278, 0.039328884333372116, -0.04172429442405701, -0.022310731932520866, 0.05486324429512024, 0.037115924060344696, 0.10146983712911606, -0.009681601077318192, -0.006015400402247906, 0.029679663479328156, 0.028978629037737846, -0.09447851777076721, 3.9667122990055326e-33, 0.037530235946178436, 0.02746574394404888, 0.12011054903268814, 0.06000806763768196, 0.03463049978017807, 0.016405412927269936, 0.002221375936642289, 0.019452594220638275, -0.1416550576686859, 0.014451749622821808, -0.029843606054782867, 0.01461237296462059, 0.00859145913273096, -0.014179375022649765, -0.00792634766548872, -0.06227254122495651, -0.002355110365897417, -0.08500740677118301, 0.028378130868077278, -0.03762625530362129, -0.054674290120601654, 0.02107427269220352, -0.019319867715239525, 0.15403755009174347, 0.059281907975673676, 0.10935289412736893, 0.0002586930349934846, 0.0002568708441685885, 0.044593676924705505, -0.019717875868082047, -0.04162971302866936, 0.017280928790569305, -0.0642474964261055, 0.02059023641049862, -0.04007204994559288, -0.01871187798678875, -0.051801733672618866, 0.015697112306952477, -0.033450648188591, -0.10179644078016281, 0.02053435519337654, 0.010089341551065445, -0.019799206405878067, -0.06312541663646698, -0.0005536690587177873, -0.005939338356256485, -0.028768135234713554, -0.07830203324556351, 0.0386069230735302, -0.09140268713235855, -0.05705414339900017, -0.013451279141008854, 0.016293099150061607, 0.08572482317686081, -0.015881845727562904, -0.02063603140413761, 0.04818800836801529, -0.027174752205610275, -0.04510657116770744, 0.029214119538664818, 0.03924410790205002, -0.007856943644583225, -0.03597644716501236, 0.049842800945043564, 0.04763707146048546, 0.012511806562542915, -0.08220750093460083, -0.03679582104086876, 0.032744571566581726, 0.05693516507744789, 0.026341939345002174, 0.05881435051560402, 0.0282086580991745, -0.01261911354959011, 0.01661066710948944, -0.08282560110092163, -0.04561811313033104, -0.02191205881536007, -0.07758495211601257, 0.02772034890949726, -0.08381162583827972, -0.08705051988363266, -0.021949831396341324, 0.014730704016983509, 0.032682061195373535, -0.04006967321038246, 0.071779265999794, 0.05859587714076042, 0.07252341508865356, 0.01781507581472397, 0.032768890261650085, -0.025371195748448372, -0.006410856731235981, 0.003580027725547552, 0.03002253547310829, -5.9926735065698834e-33, -0.024468308314681053, 0.038244396448135376, 0.028884470462799072, 0.05181517452001572, 0.0027486979961395264, -0.02121032029390335, -0.08509351313114166, -0.040722500532865524, -0.03572535887360573, 0.0186208114027977, -0.05726924538612366, -0.07177308946847916, 0.06243470683693886, -0.02300807274878025, -0.013314224779605865, 0.01447600219398737, -0.03579327091574669, -0.08913470059633255, -0.0516243614256382, 0.08099429309368134, -0.04173216596245766, 0.09764505177736282, -0.07977650314569473, -0.033215202391147614, 0.0955287516117096, -0.04954212158918381, 0.015608967281877995, -0.0011908967280760407, -0.03785095736384392, -0.000383750390028581, -0.06357070803642273, -0.051687728613615036, -0.010124901309609413, -0.05823712423443794, 0.03211253136396408, -0.05000309646129608, 0.051868829876184464, 0.01900884509086609, 0.02382476255297661, -0.0479319803416729, -0.04131777957081795, -0.003793311771005392, -0.07695075869560242, 0.004460066556930542, 0.06221072003245354, 0.06913856416940689, -0.0742650106549263, 0.10151713341474533, -0.07714470475912094, -0.04376008361577988, -0.01963367871940136, 0.0191048476845026, 0.04361414909362793, -0.029452307149767876, 0.026632612571120262, -0.0858728215098381, 0.05978207290172577, 0.07947494834661484, 0.028064804151654243, 0.06506483256816864, -0.07843618094921112, -0.12418157607316971, -0.0028673713095486164, 0.019214391708374023, -0.043024223297834396, -0.06482972204685211, -0.1024305671453476, -0.0292276069521904, -0.054424747824668884, -0.015619471669197083, -0.02254950813949108, 0.06569953262805939, -0.009105199947953224, 0.03694148734211922, 0.13306696712970734, -0.06320855766534805, -0.11441537737846375, 0.01997028850018978, -0.08716009557247162, 0.035743776708841324, 0.03983257710933685, 0.030417857691645622, 0.03330863639712334, 0.0710597112774849, 0.013874800875782967, 0.03648972138762474, 0.03337264806032181, 0.07447735220193863, -0.050509821623563766, 0.019338024780154228, -0.026203257963061333, 0.01670083776116371, -0.11691192537546158, 0.05248929187655449, 0.011397958733141422, -4.7325602992032145e-08, -0.04303373023867607, 0.026784835383296013, -0.012486178427934647, -0.027611305937170982, 0.05658192187547684, 0.07272594422101974, 0.02604568935930729, 0.10822697728872299, 0.035421792417764664, 0.10123356431722641, 0.02974160760641098, 0.04725965857505798, 0.05918293818831444, 0.031508151441812515, -0.042798977345228195, 0.005375780165195465, 0.040594879537820816, -0.012291744351387024, 0.05729743465781212, 0.026110196486115456, -0.01651892066001892, -0.008589196018874645, -0.04320879653096199, 0.12485270947217941, 0.05276899039745331, -0.07976455986499786, 0.03670664504170418, -0.010909571312367916, -0.008313246071338654, -0.09016693383455276, -0.07928589731454849, -0.03541768714785576, 0.08425547927618027, 0.0011879380326718092, -0.006359628401696682, -0.03146992623806, 0.029908962547779083, 0.04378021880984306, 0.012766808271408081, 0.04060070216655731, 0.02002146653831005, 0.058065637946128845, -0.08848202973604202, -0.03996383026242256, -0.07581648975610733, -0.02606058679521084, -0.01330042164772749, -0.030499514192342758, 0.05810768902301788, 0.002942710416391492, -0.0545758381485939, -0.027900265529751778, -0.033455975353717804, -0.010948692448437214, 0.010677458718419075, 0.0615294948220253, -0.01465878076851368, 0.013070204295217991, 0.06027090921998024, -0.009147381410002708, 0.011501145549118519, 0.014029432088136673, -0.05311223119497299, -0.04222646728157997], "keywords": ["javascript", "graphacademy", "graph", "apollo server", "graphql", "command line", "graphq"], "redirects": []}, "https://neo4j.com/docs/graphql/5": {"links": ["https://apollo-angular.com/docs", "https://nodejs.org/en", "https://neo4j.com/docs/graphql/5/queries-aggregations/queries", "https://neo4j.com/docs/graphql/5/types", "https://www.npmjs.com/package/@neo4j/graphql", "https://www.apache.org/licenses/LICENSE-2.0", "https://neo4j.com/docs/graphql/5/security", "https://neo4j.com/docs/license", "https://reactjs.org", "https://www.apollographql.com/docs/apollo-server/deployment", "https://neo4j.com/docs/graphql/5/queries-aggregations/sorting", "https://angularjs.org", "https://neo4j.com/docs/graphql/5/queries-aggregations/pagination", "https://apollo.vuejs.org", "https://vuejs.org", "https://neo4j.com/docs/graphql/5/directives/schema-configuration", "https://graphacademy.neo4j.com/courses/graphql-basics", "https://github.com/neo4j/graphql", "https://neo4j.com/docs/graphql/5/directives/autogeneration", "https://semver.org", "https://neo4j.com/docs/graphql/5/getting-started/toolbox", "https://neo4j.com/docs/graphql/5/directives/database-mapping", "https://www.apollographql.com/docs/react", "https://www.google.com/search", "https://neo4j.com/docs/graphql/5/getting-started", "https://neo4j.com/docs/graphql/5/queries-aggregations/filtering", "https://github.com/neo4j/graphql/issues", "https://neo4j.com/docs/graphql/5/ogm", "https://neo4j.com/docs/graphql/5/mutations", "https://neo4j.com/docs/graphql/5/deprecations", "https://neo4j.com/docs/apoc/current", "https://neo4j.com/docs/graphql/5/directives/custom-logic", "https://neo4j.com"], "text": "Introduction\nThe Neo4j GraphQL Library is a highly flexible, low-code, open source JavaScript library that enables rapid API development for cross-platform and mobile applications by tapping into the power of connected data.\nWith Neo4j as the graph database, the GraphQL Library makes it simple for applications to have data treated as a graph natively from the frontend all the way to storage. This avoids duplicate schema work and ensures flawless integration between frontend and backend developers.\nIf you are new to Neo4j and GraphQL, take the course Introduction to Neo4j & GraphQL in GraphAcademy to learn the fundamentals, how to use the Neo4j GraphQL Toolbox and the Neo4j GraphQL Library to create GraphQL APIs backed by a Neo4j graph database.\nThe GRANDstack starter app has been deprecated. For more information, read the section on Deprecations.\nHow it works\nThe Neo4j GraphQL Library requires a set of type definitions that describes the shape of your graph data. It can generate an entire executable schema with all of the additional types needed to execute queries and mutations to interact with your Neo4j database.\nFor every query and mutation that is executed against this generated schema, the Neo4j GraphQL Library generates a single Cypher query which is executed against the database. This eliminates the N+1 Problem, which can make GraphQL implementations slow and inefficient.\nAutomatic generation of Queries and Mutations for CRUD interactions.\nTypes, including temporal and spatial.\nSupport for both node and relationship properties.\nExtensibility through the @cypher directive and/or Custom Resolvers.\nExtensive Filtering and Sorting options.\nOptions for Database mapping and value Autogeneration.\nPagination options.\nSecurity options and additional Schema Configuration.\nAn OGM (Object Graph Mapper) for programmatic interaction with your GraphQL API.\nA Toolbox (UI) to experiment with your Neo4j GraphQL API on Neo4j Desktop.\nInteraction\nIn the Getting Started guide, Apollo Server is used to host the GraphQL schema, so you can interact directly with your API with no frontend. In case you prefer to use frontend frameworks, these are some clients that interact with GraphQL APIs:\nReact - support through Apollo Client\nVue.js - support through Vue Apollo\nAngularJS - support through Apollo Angular.\nDeployment\nThere are a variety of methods for deploying GraphQL APIs. In the Getting Started guide, Apollo Server is being used for demonstration. You can check their own documentation about Deployment for more details.\nVersioning\nThe Neo4j GraphQL Library uses Semantic Versioning. Given a version number MAJOR.MINOR.PATCH, the increment is based on:\nMAJOR - incompatible API changes compared to the previous MAJOR version, for which you will likely have to migrate\nMINOR - new features have been added in a backwards compatible manner\nPATCH - bug fixes have been added in a backwards compatible manner.\nAdditionally, prerelease version numbers may have additional suffixes, for example MAJOR.MINOR.PATCH-PRERELEASE.NUMBER, where PRERELEASE is one of the following:\nalpha - unstable prerelease artifacts, and the API may change between releases during this phase\nbeta - feature complete prerelease artifacts, which will be more stable than alpha releases but will likely still contain bugs\nrc - release candidate including artifacts to be promoted to a stable release, in a last effort to find trailing bugs.\nNUMBER in the suffix is simply an incrementing release number in each phase.\nRequirements\nNeo4j Database version 4.4 and newer with APOC plugin.\nNode.js 16+.\nResources\nGitHub\nIssue Tracker\nnpm package\nLicense\nDocumentation license: Creative Commons 4.0\nSource: Apache 2.0\nCreating a new project", "embeddings": [-0.017721952870488167, 0.011701704002916813, -0.039983972907066345, 0.04303152486681938, -0.05218692868947983, -0.05822889506816864, -0.06901147216558456, 0.03214634954929352, -0.07561873644590378, 0.003249270375818014, -0.0560770183801651, 0.009200255386531353, 0.09907645732164383, 0.022522617131471634, 0.03788567706942558, 0.09442594647407532, 0.017750559374690056, -0.02327883057296276, 0.034668270498514175, -0.048434317111968994, -0.03468799218535423, -0.05359023064374924, 0.011752495542168617, -0.024343879893422127, 0.04965963587164879, 0.0006555804866366088, 0.007691510953009129, -0.011553499847650528, -0.012238898314535618, 0.007105073891580105, -0.005102733615785837, -0.02800969034433365, -0.06950245052576065, 0.07737042754888535, -0.11938098818063736, 0.04146190732717514, 0.06135078892111778, -0.0005829246365465224, -0.02332356944680214, -0.004223987925797701, -0.03603574261069298, 0.023197365924715996, -0.05867037922143936, 0.014430884271860123, 0.05536447837948799, -0.004450719337910414, -0.11860984563827515, -0.008448581211268902, 0.02739245444536209, 0.02477039396762848, -0.06639599055051804, -0.08470332622528076, -0.05175875872373581, -0.025697357952594757, 0.050141602754592896, 0.041660718619823456, -0.034777767956256866, -0.036140333861112595, 0.024148790165781975, 0.06696616113185883, 0.0728621780872345, -0.03722488880157471, 0.00625850073993206, -0.009098944254219532, -0.007297949865460396, -0.02281976118683815, 0.029421716928482056, 0.047774966806173325, 0.07204973697662354, -0.04041912779211998, -0.045821741223335266, 0.051783204078674316, -0.07271767407655716, 0.0025230152532458305, -0.08730068057775497, 0.04963313788175583, 0.011927544139325619, 0.0151777109131217, -0.04337689280509949, -0.023709923028945923, -0.010535898618400097, 0.06254397332668304, -0.02701486647129059, 0.07809184491634369, -0.032467734068632126, 0.0644628256559372, -0.009146329015493393, 0.00707591138780117, -0.037542857229709625, 0.036568038165569305, 0.009857854805886745, 0.009219381958246231, -0.008948287926614285, -0.02106177620589733, 0.0007869314285926521, 0.0453849695622921, 0.08142541348934174, -0.029766105115413666, 0.06470594555139542, 0.01592603325843811, 0.03822527453303337, -0.06784450262784958, 0.012002464383840561, 0.007352524437010288, -0.020234201103448868, 0.011890770867466927, -0.0023690348025411367, 0.012629977427423, -0.05707765370607376, 0.04019147902727127, -0.052759356796741486, 0.053732775151729584, -0.011801728047430515, -0.03318888321518898, -0.022296985611319542, 0.04646725952625275, -5.7848563301377e-05, -0.05671103671193123, 0.018458332866430283, 0.045272305607795715, 0.02049124985933304, 0.10766541212797165, -0.005749966483563185, -0.0010370194213464856, 0.06909631937742233, 0.0054032448679208755, -0.05796289071440697, 6.059533053850763e-33, 0.03734526038169861, -0.0004145342099945992, 0.1297488659620285, 0.03760750591754913, 0.01327733788639307, 0.028479741886258125, -0.03502530977129936, -0.020117631182074547, -0.10853376239538193, 0.04481244087219238, -0.04273919761180878, 0.08632887899875641, 0.0015269746072590351, 0.020723266527056694, 0.03163091093301773, 0.015910141170024872, -0.006161027122288942, -0.05450412258505821, 0.005680104251950979, -0.033614207059144974, -0.02356845699250698, -0.0011751725105568767, -0.0020653409883379936, 0.17822952568531036, 0.06431049108505249, 0.15371215343475342, -0.02378356270492077, 0.02394023723900318, 0.03580200672149658, 0.014155293814837933, -0.08296115696430206, -0.007350075989961624, -0.05444745346903801, 0.012642508372664452, -0.014849666506052017, -0.035343170166015625, -0.07125529646873474, -0.05431131646037102, -0.03507876768708229, -0.11119917780160904, -0.012177115306258202, -0.0038357072044163942, -0.018692925572395325, -0.05976838245987892, -0.054196201264858246, -0.013820494525134563, -0.031708527356386185, -0.033470269292593, 0.007224929053336382, -0.06251858919858932, -0.0745270773768425, 0.0037297799717634916, -0.018478399142622948, 0.08420627564191818, -0.049505751579999924, -0.010787991806864738, 0.05873662605881691, -0.007391488645225763, -0.04508308693766594, 0.049141351133584976, 0.03359634801745415, 0.007352034095674753, -0.03505025804042816, 0.03216402977705002, 0.015056515112519264, 0.033641617745161057, -0.08028217405080795, -0.017049871385097504, 0.007607742678374052, 0.05428203567862511, 0.05183497443795204, 0.08237274736166, 0.053119268268346786, -0.006817768327891827, 0.02018066495656967, -0.07874326407909393, -0.04351166635751724, -0.053269848227500916, -0.03433183953166008, 0.006506787613034248, -0.06029019132256508, -0.09929090738296509, -0.026733672246336937, 0.018557315692305565, 0.023986583575606346, -0.000999449985101819, 0.103348009288311, 0.006674415897578001, 0.06310221552848816, 0.0939062237739563, -0.0016083389054983854, 0.0007238620310090482, -0.004714782349765301, -0.027131566777825356, -0.025584260001778603, -6.665578268200394e-33, -0.03597026690840721, 0.05840310826897621, 0.031452763825654984, 0.049396563321352005, 0.031543053686618805, -0.006831478327512741, -0.06076689437031746, -0.03539316728711128, -0.05744277313351631, -0.010636606253683567, -0.05480676516890526, -0.046212028712034225, 0.05399211868643761, -0.0074347686022520065, 0.027790069580078125, 0.026466619223356247, -0.07192707061767578, -0.13426747918128967, -0.045033786445856094, 0.04048202186822891, -0.04435383528470993, 0.09886673092842102, -0.05797392129898071, -0.009245808236300945, 0.06548775732517242, -0.0646560937166214, -0.02560322731733322, -0.02713439054787159, -0.05289466679096222, 0.010628659278154373, -0.05266886204481125, -0.046674150973558426, -0.011451128870248795, -0.08225105702877045, 0.044515710324048996, -0.04964940994977951, 0.06125909090042114, 0.019959550350904465, 0.01611892133951187, -0.051689036190509796, -0.025982314720749855, -0.006454647518694401, -0.0771544873714447, -0.0002599880681373179, 0.03439851850271225, 0.09327122569084167, -0.11666557192802429, 0.14929576218128204, -0.03103742003440857, -0.034200914204120636, 0.008613530546426773, 0.010935160331428051, 0.04549000784754753, -0.021934211254119873, 0.039485588669776917, -0.10438299924135208, 0.05142521485686302, 0.0579049177467823, -0.012713645584881306, 0.038437046110630035, -0.10864606499671936, -0.09438250213861465, 0.002584021305665374, 0.013565129600465298, -0.004125151317566633, -0.06827002018690109, -0.043115146458148956, -0.04217330366373062, -0.049132827669382095, -0.013505074195563793, -0.005990981124341488, 0.01626599207520485, 0.01689050905406475, 0.020885828882455826, 0.10515929013490677, -0.008512335829436779, -0.09274210780858994, -0.015593243762850761, -0.07143601775169373, 0.028306812047958374, 0.047093771398067474, 0.05066131427884102, 0.07797806710004807, 0.07390564680099487, 0.046047985553741455, 0.028653820976614952, 0.01811159960925579, 0.07483885437250137, -0.047248635441064835, 0.03689773753285408, -0.038468170911073685, 0.052121445536613464, -0.16240322589874268, 0.07157788425683975, 0.00029997716774232686, -4.763219507708527e-08, -0.052885450422763824, 0.023353906348347664, -0.04281033203005791, -0.060527000576257706, 0.014285922981798649, 0.040361665189266205, 0.06597328931093216, 0.12874360382556915, 0.03013364039361477, 0.12406829744577408, 0.07104964554309845, 0.013442161493003368, 0.006242148578166962, 0.011594674549996853, -0.03055877983570099, 0.011957981623709202, 0.04425946995615959, -0.024750597774982452, 0.043330851942300797, 0.029040802270174026, -0.02706003189086914, 0.007969703525304794, -0.07042121142148972, 0.09860050678253174, 0.06515540182590485, -0.078956238925457, 0.007497941143810749, 0.030809199437499046, 0.0023661963641643524, -0.08450332283973694, -0.05990210175514221, -0.007558045443147421, 0.11551324278116226, 0.007731801830232143, -0.011662565171718597, -0.011759717017412186, 0.03202279657125473, 0.05883260816335678, -0.0015420416602864861, 0.03384970501065254, 0.05388734117150307, 0.06729906052350998, -0.054819051176309586, -0.0328284427523613, -0.09187763929367065, 0.015578986145555973, -0.013015621341764927, -0.04270128905773163, 0.08440344780683517, 0.00621878681704402, -0.06511800736188889, -0.052155110985040665, -0.016035255044698715, -0.005729378666728735, 0.017229560762643814, 0.05265161022543907, -0.041971780359745026, -0.013229278847575188, 0.0887930765748024, 0.004118925426155329, 0.033170655369758606, 0.009120116010308266, -0.03277403861284256, -0.025549612939357758], "keywords": ["javascript", "graph", "open source", "graphql", "apollo", "graphq"], "redirects": []}, "https://neo4j.com/docs/graphql/5/directives/custom-logic": {"links": ["https://neo4j.com/docs/graphql/5/directives/indexes-and-constraints", "https://neo4j.com/developer/kb/understanding-non-existent-properties-and-null-values", "https://neo4j.com/docs/graphql/5/directives/custom-directives"], "text": "Custom logic\n@cypher\nThe @cypher directive binds a GraphQL field to the results of a Cypher query. This directive can be used both for properties in a type or as top level queries.\nGlobal variables\nGlobal variables are available for use within the Cypher statement, and can be applied to the @cypher directive.\nVariable Description Example\nthis\nRefers to the currently resolved node, and can be used to traverse the graph.\n{\n  Movie {\n    title\n    actors: ACTED_IN @this {\n      role\n      actor {\n        name\n      }\n    }\n    directors: DIRECTED @this {\n      director {\n        name\n      }\n    }\n  }\n}\nauth\nThis value is represented by the following TypeScript interface definition:\ninterface Auth {\n    isAuthenticated: boolean;\n    roles?: string[];\n    jwt: any;\n}\nYou can use the JWT in the request to return the value of the currently logged in User:\ntype User {\n    id: String\n}\n\ntype Query {\n    me: User @cypher(\n        statement: \"\"\"\n        MATCH (user:User {id: $jwt.sub})\n        RETURN user\n        \"\"\",\n        columnName: \"user\"\n    )\n}\ncypherParams\nUse it to inject values into the Cypher query from the GraphQL context function.\nInject into context:\nconst server = new ApolloServer({\n    typeDefs,\n});\n\nawait startStandaloneServer(server, {\n    context: async ({ req }) => ({ cypherParams: { userId: \"user-id-01\" } }),\n});\nUse in Cypher query:\ntype Query {\n    userPosts: [Post] @cypher(statement: \"\"\"\n        MATCH (:User {id: $userId})-[:POSTED]->(p:Post)\n        RETURN p\n    \"\"\", columnName: \"p\")\n}\nReturn values\nThe return value of Cypher statements must always be of the same type to which the directive is applied.\nThe variable must also be aliased with a name that is the same as the one passed to columnName. This can be the name of a node, relationship query, or an alias in the RETURN statement of the Cypher statement.\nScalar values\nCypher statements must return a value which matches the scalar type to which the directive was applied. For example:\ntype Query {\n    randomNumber: Int @cypher(statement: \"RETURN rand() as result\", columnName: \"result\")\n}\nObject types\nWhen returning an object type, all fields of the type must be available in the Cypher return value. This can be achieved by either returning the entire object from the Cypher query, or returning a map of the fields which are required for the object type. Both approaches are demonstrated here:\ntype User {\n    id\n}\n\ntype Query {\n    users: [User]\n        @cypher(\n            statement: \"\"\"\n            MATCH (u:User)\n            RETURN u\n            \"\"\",\n            columnName: \"u\"\n        )\n}\ntype User {\n    id\n}\n\ntype Query {\n    users: [User] @cypher(statement: \"\"\"\n        MATCH (u:User)\n        RETURN {\n            id: u.id\n        } as result\n    \"\"\", columnName: \"result\")\n}\nThe downside of the latter approach is that you need to adjust the return object as you change your object type definition.\nInput arguments\nThe @cypher statement can access the query parameters by prepending $ to the parameter name. For example:\ntype Query {\n    name(value: String): String @cypher(statement: \"RETURN $value AS res\", columnName: \"res\")\n}\nThe following GraphQL query returns the parameter value:\nquery {\n  name(value: \"Jane Smith\")\n}\nUsage examples\nThe @cypher directive can be used in different contexts, such as the ones described in this section.\nOn an object type field\nIn the following example, the field similarMovies is bound to the Movie type for finding other movies with an overlap of actors:\ntype Actor {\n    actorId: ID!\n    name: String\n    movies: [Movie!]! @relationship(type: \"ACTED_IN\", direction: OUT)\n}\n\ntype Movie {\n    movieId: ID!\n    title: String\n    description: String\n    year: Int\n    actors(limit: Int = 10): [Actor!]!\n        @relationship(type: \"ACTED_IN\", direction: IN)\n    similarMovies(limit: Int = 10): [Movie]\n        (\n            statement: ,\n            columnName: \n        )\n}\nView all (8 more lines)\nOn a query type field\nThe following example demonstrates a query to return all of the actors in the database:\ntype Actor {\n    actorId: ID!\n    name: String\n}\n\ntype Query {\n    allActors: [Actor]\n        @cypher(\n            statement: \"\"\"\n            MATCH (a:Actor)\n            RETURN a\n            \"\"\",\n            columnName: \"a\"\n        )\n}\nOn a mutation type field\nThe following example demonstrates a mutation using a Cypher query to insert a single actor with the specified name argument:\ntype Actor {\n    actorId: ID!\n    name: String\n}\n\ntype Mutation {\n    createActor(name: String!): Actor\n        @cypher(\n            statement: \"\"\"\n            CREATE (a:Actor {name: $name})\n            RETURN a\n            \"\"\",\n            columnName: \"a\"\n        )\n}\n@coalesce\nWhen translating from GraphQL to Cypher, any instances of fields to which this directive is applied will be wrapped in a coalesce() function in the WHERE clause. For more information, see Understanding non-existent properties and working with nulls.\nThis directive helps querying against non-existent properties in a database. However, it is encouraged to populate these properties with meaningful values if it becomes the norm. The @coalesce directive is a primitive implementation of the function which only takes a static default value as opposed to using another property in a node or a Cypher expression.\nDefinition\n\"\"\"Int | Float | String | Boolean | ID | DateTime | Enum\"\"\"\nscalar ScalarOrEnum\n\n\"\"\"Instructs @neo4j/graphql to wrap the property in a coalesce() function during queries, using the single value specified.\"\"\"\ndirective @coalesce(\n    \"\"\"The value to use in the coalesce() function. Must be a scalar type and must match the type of the field with which this directive decorates.\"\"\"\n    value: Scalar!,\n) on FIELD_DEFINITION\nUsage\n@coalesce may be used with enums. When setting the default value for an enum field, it must be one of the enumerated enum values:\nenum Status {\n    ACTIVE\n    INACTIVE\n}\ntype Movie {\n    status: Status @coalesce(value: ACTIVE)\n}\n@limit\nAvailable on nodes, this directive injects values into a query such as the limit.\nDefinition\n\"\"\"The `@limit` is to be used on nodes, where applied will inject values into a query such as the `limit`.\"\"\"\ndirective @limit(\n    default: Int\n    max: Int\n) on OBJECT\nUsage\nThe directive has two arguments:\ndefault - if no limit argument is passed to the query, the default limit is used. The query may still pass a higher or lower limit.\nmax - defines the maximum limit to be passed to the query. If a higher value is passed, it is used instead.\nIf no default value is set, max is used for queries without limit.\n{\n  Movie @limit(amount: 5) {\n    title\n    year\n  }\n}\n@customResolver\nThe Neo4j GraphQL Library generates query and mutation resolvers, so you don\u2019t need to implement them yourself. However, if you need additional behaviors besides the autogenerated CRUD operations, you can specify custom resolvers for these scenarios.\nTo add a field to an object type which is resolved from existing values in the type, rather than storing new values, you should mark it with the @customResolver directive, and define a custom resolver for it.\nTake, for instance, this schema:\nconst typeDefs = `\n    type User {\n        firstName: String!\n        lastName: String!\n        fullName: String! @customResolver(requires: \"firstName lastName\")\n    }\n`;\n\nconst resolvers = {\n    User: {\n        fullName(source) {\n            return `${source.firstName} ${source.lastName}`;\n        },\n    },\n};\n\n neoSchema =  Neo4jGraphQL({\n    typeDefs,\n    resolvers,\n});\nView all (6 more lines)\nHere fullName is a value that is resolved from the fields firstName and lastName. Specifying the @customResolver directive on the field definition keeps fullName from being included in any query or mutation fields and hence as a property on the :User node in the database.\nThe inclusion of the fields firstName and lastName in the requires argument means that, in the definition of the resolver, the properties firstName and lastName will always be defined on the source object. If these fields are not specified, this cannot be guaranteed.\nDefinition\n\"\"\"Informs @neo4j/graphql that a field will be resolved by a custom resolver, and allows specification of any field dependencies.\"\"\"\ndirective @customResolver(\n    \"\"\"Selection set of the fields that the custom resolver will depend on. These fields are passed as an object to the first argument of the custom resolver.\"\"\"\n    requires: SelectionSet\n) on FIELD_DEFINITION\nThe requires argument\nThe requires argument can be used:\nFor a selection set string.\nIn any field, as long as it is not another @customResolver field.\nIn case the custom resolver depends on any fields. This ensures that, during the Cypher generation process, these properties are selected from the database.\nUsing a selection set string makes it possible to select fields from related types, as shown in the following example:\nconst typeDefs = `\n    type Address {\n        houseNumber: Int!\n        street: String!\n        city: String!\n    }\n\n    type User {\n        id: ID!\n        firstName: String!\n        lastName: String!\n        address: Address! @relationship(type: \"LIVES_AT\", direction: OUT)\n        fullName: String\n            @customResolver(requires: \"firstName lastName address { city street }\")\n    }\n`;\n\n resolvers = {\n    : {\n         {\n             ;\n        },\n    },\n};\n\n neoSchema =  Neo4jGraphQL({\n    typeDefs,\n    resolvers,\n});\nView all (14 more lines)\nHere the firstName, lastName, address.street, and address.city fields are always selected from the database if the fullName field is selected, and is available to the custom resolver.\nIt is also possible to inline fragments to conditionally select fields from interface/union types:\ninterface Publication {\n    publicationYear: Int!\n}\n\ntype Author {\n    name: String!\n    publications: [Publication!]! @relationship(type: \"WROTE\", direction: OUT)\n    publicationsWithAuthor: [String!]!\n        @customResolver(\n            requires: \"name publications { publicationYear ...on Book { title } ... on Journal { subject } }\"\n        )\n}\n\ntype Book implements Publication {\n    title:!\n    publicationYear:!\n    author: !]! (: , direction:)\n}\n\n implements {\n    subject:!\n    publicationYear:!\n    author: !]! (: , direction:)\n}\nView all (9 more lines)\nHowever, it is not possible to require extra fields generated by the library such as aggregations and connections. For example, the following type definitions would throw an error since they attempt to require the publicationsAggregate:\ninterface Publication {\n    publicationYear: Int!\n}\n\ntype Author {\n    name: String!\n    publications: [Publication!]! @relationship(type: \"WROTE\", direction: OUT)\n    publicationsWithAuthor: [String!]!\n        @customResolver(\n            requires: \"name publicationsAggregate { count }\"\n        )\n}\n\ntype Book implements Publication {\n    title:!\n    publicationYear:!\n    author: !]! (: , direction:)\n}\n\n implements {\n    subject:!\n    publicationYear:!\n    author: !]! (: , direction:)\n}\nView all (9 more lines)\n@populatedBy\nThis directive is used to specify a callback function, which is executed during GraphQL query parsing, to populate fields which have not been provided within the input.\nFor non-required values, callbacks may return undefined (meaning that nothing is changed or added to the property) or null (meaning that the property will be removed).\nThe @populatedBy directive can only be used on scalar fields.\nDefinition\nenum PopulatedByOperation {\n    CREATE\n    UPDATE\n}\n\n\"\"\"Instructs @neo4j/graphql to invoke the specified callback function to populate the field when updating or creating the properties on a node or relationship.\"\"\"\ndirective @populatedBy(\n    \"\"\"The name of the callback function.\"\"\"\n    callback: String!\n    \"\"\"Which events to invoke the callback on.\"\"\"\n    operations: [PopulatedByOperation!]! = [CREATE, UPDATE]\n) on FIELD_DEFINITION\nUsage\nType definitions:\ntype Product {\n    name: String!\n    slug: String! @populatedBy(callback: \"slug\", operations: [CREATE, UPDATE])\n}\nSchema construction (note that the callback is asynchronous):\nconst slugCallback = async (root) => {\n    return `${root.name}_slug`\n}\n\nnew Neo4jGraphQL({\n    typeDefs,\n    driver,\n    features: {\n        populatedBy: {\n            callbacks: {\n                slug: slugCallback\n            }\n        }\n    }\n})\nContext values\nThe GraphQL context for the request is available as the third argument in a callback. This maps to the argument pattern for GraphQL resolvers.\nFor example, if you want a field modifiedBy:\ntype Record {\n    content: String!\n    modifiedBy: @populatedBy(callback: \"modifiedBy\", operations: [CREATE, UPDATE])\n}\nAnd if the username is located in context.username, you could define a callback such as:\nconst modifiedByCallback = async (_parent, _args, context) => {\n    return context.username;\n}\n\nnew Neo4jGraphQL({\n    typeDefs,\n    driver,\n    features: {\n        populatedBy: {\n            callbacks: {\n                modifiedBy: modifiedByCallback\n            }\n        }\n    }\n})\nNote that the second positional argument, in this case _args, has a type of Record<string, never>, and as such it will always be an empty object.\nIndexes and constraints\nCustom directives", "embeddings": [-0.02804560586810112, 0.08233308792114258, 0.01041504368185997, 0.04459593445062637, -0.0625481978058815, 0.05243568494915962, 0.08247455209493637, 0.07347271591424942, -0.019659968093037605, 0.04502369090914726, -0.07241847366094589, -0.06931509077548981, 0.0863516628742218, 0.09990586340427399, 0.09165444225072861, 0.051269251853227615, 0.0610906220972538, 0.024724697694182396, 0.022726604714989662, -0.09862714260816574, 0.05579720437526703, -0.006598551291972399, 0.021951695904135704, -0.01961662247776985, -0.03354508802294731, -0.09693390876054764, -0.009199217893183231, 0.005188826005905867, -0.013366609811782837, 0.05347895994782448, 0.005309254862368107, 0.06815895438194275, -0.07497920840978622, 0.062230177223682404, -0.0963744968175888, 0.05632419139146805, -0.019769789651036263, -0.035453662276268005, 0.0213090218603611, -0.09814902395009995, 0.047165364027023315, 0.02542159892618656, -0.023646075278520584, 0.0014732008567079902, 0.043409563601017, -0.047428932040929794, -0.054824236780405045, 0.034841470420360565, -0.0661030188202858, 0.006952464580535889, -0.08922602236270905, -0.031156126409769058, 0.017414849251508713, -0.033970706164836884, 0.06294648349285126, 0.037894267588853836, -0.12017285078763962, -0.04834241047501564, 0.05433886498212814, -0.05021398141980171, -0.03823268413543701, -0.10678649693727493, 0.013532201759517193, -0.013630560599267483, 0.002355527598410845, -0.06098175793886185, -0.03153242915868759, 0.01840008981525898, 0.03406238555908203, -0.008469131775200367, 0.013998066075146198, -0.06674221903085709, -0.06744314730167389, -0.023337841033935547, -0.02390068769454956, 0.06115055829286575, 0.016002684831619263, -0.009989647194743156, 0.0006545254727825522, -0.051062412559986115, 0.05340991169214249, 0.025617018342018127, -0.0332050547003746, 0.07415459305047989, 0.013420147821307182, 0.03310375660657883, -0.015414003282785416, 0.005409012548625469, -0.03370064124464989, 0.08543716371059418, -0.00862114503979683, 0.029996763914823532, -0.004720978904515505, -0.016338882967829704, 0.061060581356287, 0.03918764740228653, 0.0032714123371988535, 0.001370104611851275, 0.08254846930503845, 0.04827097803354263, 0.03102109208703041, -0.005253869108855724, -0.012850085273385048, -0.02494616061449051, 0.008032877929508686, 0.018359677866101265, 0.010924706235527992, 0.007353752851486206, -0.05446665361523628, 0.0180819071829319, -0.12102048099040985, 0.05628681927919388, -0.09271176904439926, -0.060200877487659454, 0.005150490906089544, 0.024532634764909744, 0.04962167888879776, 0.04347050189971924, 0.013528835028409958, -0.01886049471795559, 0.031343962997198105, 0.02413320727646351, -0.06661707162857056, 0.027901116758584976, 0.06682202965021133, 0.04434052109718323, -0.02824193611741066, 7.243025909046427e-33, 0.013674764893949032, 0.04932952672243118, 0.05571792274713516, 0.024921290576457977, -0.05725213512778282, 0.09989578276872635, -0.00038310050149448216, 0.013504493981599808, -0.060861773788928986, 0.006770281586796045, -0.032431021332740784, 0.0894174799323082, 0.008371143601834774, -0.06351178884506226, -0.07475508004426956, 0.050076331943273544, -0.0054212152026593685, -0.06343287974596024, 0.002002827590331435, -0.004116884898394346, -0.011346163228154182, 0.025346504524350166, -0.07641585916280746, 0.10567829012870789, 0.07698732614517212, -0.036751631647348404, -0.026702798902988434, 0.008970418944954872, -0.0362948514521122, -0.0173226036131382, 0.006921335589140654, -0.003027508035302162, -0.03620981425046921, 0.025909772142767906, 0.00696343882009387, -0.031726326793432236, -0.02820391207933426, -0.034174997359514236, -0.01740792952477932, -0.10109110921621323, -0.03982551395893097, -0.026768818497657776, 0.005322805605828762, -0.0034946680534631014, -0.162457674741745, -0.0776146873831749, -0.07806087285280228, -0.02362162247300148, 0.02987932786345482, 0.03446081280708313, 0.013893329538404942, 0.05074664577841759, 0.02233945019543171, -0.10061787813901901, 0.10096850246191025, 0.005150947254151106, 0.07351929694414139, 0.11905091255903244, -0.05536976456642151, 0.005248840898275375, -0.027232863008975983, -0.017319295555353165, 0.014453699812293053, 0.028655286878347397, -0.00020281462639104575, 0.043378692120313644, -0.05686071142554283, -0.04058130085468292, 0.00968787632882595, -0.011475343257188797, -0.018496127799153328, 0.09765453636646271, 0.0444946326315403, -0.003842336591333151, 0.0039914934895932674, -0.049190085381269455, -0.10025982558727264, -0.04149472713470459, -0.0024908166378736496, 0.03549446910619736, -0.0464366152882576, -0.09156140685081482, -0.04453928396105766, 0.17078910768032074, 0.047201018780469894, 0.015904150903224945, -0.010534556582570076, 0.0023297821171581745, 0.06827841699123383, -0.005655393935739994, 0.0038124113343656063, -0.11741247028112411, 0.007468108553439379, 0.050978925079107285, -0.043647777289152145, -7.571586865676826e-33, 0.032177478075027466, 0.017619090154767036, 0.019790053367614746, -0.057632606476545334, -0.0017520987894386053, -0.07705631852149963, 0.024243513122200966, -0.031139027327299118, -0.03344356641173363, -0.010450189001858234, -0.028346901759505272, -0.03084420971572399, 0.03963974863290787, 0.008885008282959461, -0.0019349349895492196, 0.04568816348910332, -0.09504528343677521, -0.10114801675081253, -0.018412956967949867, 0.07748368382453918, -0.028946271166205406, 0.012850052677094936, 0.030006160959601402, 0.024682654067873955, 0.019725104793906212, -0.002107989974319935, 0.07900345325469971, 0.010902618989348412, -0.01662084087729454, 0.005798035766929388, 3.0480405257549137e-06, -0.10377970337867737, -0.03619354963302612, -0.08522137999534607, 0.03247467800974846, -0.09410261362791061, 0.05047069862484932, -0.00011515210644574836, -0.04236314445734024, 0.003010463435202837, -0.034873202443122864, 0.008488520979881287, -0.04365646466612816, 0.021504346281290054, 0.03708787262439728, 0.06571509689092636, 0.009304849430918694, 0.01605776883661747, -0.04195190221071243, 0.07060052454471588, -0.015055849216878414, 0.022040193900465965, 0.05728265643119812, 0.03494265303015709, -0.020498568192124367, -0.07918024808168411, 0.03129398822784424, -0.043686557561159134, 0.11448471993207932, -0.025307275354862213, -0.0008588330820202827, -0.040382079780101776, -0.013615045696496964, 0.04298663139343262, -0.01888183504343033, -0.07619909197092056, -0.0773242712020874, 0.009991897270083427, -0.06254681199789047, 0.01724831573665142, 0.04342091083526611, -0.1002008393406868, 0.0027030352503061295, -0.012823178432881832, 0.13639511168003082, 0.04651681333780289, -0.007436241954565048, -0.03688192740082741, -0.0032792675774544477, 0.04300525039434433, 0.00834550429135561, -0.00294811581261456, 0.07170875370502472, 0.08348658680915833, 0.018418753519654274, -0.00427271518856287, -0.018211577087640762, 0.10245381295681, -0.0002754114393610507, 0.06560470163822174, 0.010311347432434559, -0.005383322015404701, -0.06332399696111679, 0.0036066474858671427, -0.05682781711220741, -5.526255009158376e-08, -0.13446933031082153, -0.0035991317126899958, -0.06063704937696457, 0.0010047884425148368, 0.014918393455445766, 0.02689676359295845, 0.01296729501336813, -0.00369265372864902, 0.0433780737221241, 0.08688433468341827, 0.02236940525472164, 0.007558837532997131, 0.09008079022169113, -0.09290652722120285, 0.0019995078910142183, -0.029550613835453987, 0.0006872087251394987, -0.011455765925347805, 0.020889196544885635, 0.053841106593608856, -0.036026522517204285, 0.006228428799659014, -0.05747935548424721, 0.0317547470331192, 0.03466866910457611, -0.01616680808365345, -0.005426344927400351, -0.020563490688800812, -0.03067271038889885, 0.057731743901968, -0.0908261314034462, 0.02444188855588436, 0.07995080202817917, 0.07017241418361664, -0.06467591971158981, -0.01889629475772381, 0.03416157141327858, -0.028689248487353325, 0.04280992969870567, 0.016685834154486656, 0.011538478545844555, 0.06154058873653412, -0.075564444065094, 0.042225755751132965, 0.004001247230917215, 0.028583593666553497, 0.09056516736745834, -0.01548780221492052, 0.13465727865695953, 0.014437724836170673, -0.03977964073419571, -0.04430798068642616, -0.09226256608963013, -0.049215205013751984, -0.026710694655776024, 0.03148646652698517, 0.02448326162993908, 0.05427468568086624, 0.048883114010095596, -0.040770430117845535, -0.040764059871435165, -0.057774271816015244, -0.03901030868291855, -0.06614950299263], "keywords": ["graphql"], "redirects": []}, "https://neo4j.com/docs/graphql/5/directives/custom-directives": {"links": ["https://www.graphql-tools.com/docs/schema-directives", "https://neo4j.com/docs/graphql/5/queries-aggregations", "https://neo4j.com/docs/graphql/5/directives/custom-logic"], "text": "Custom directives\nAs of @graphql-tools version 8, the mechanism for defining and applying custom directives has changed significantly, and this is reflected in the Neo4j GraphQL Library.\nTo understand the changes, consider the following example. It works with the implementation of a field directive to uppercase field values, using the following definition:\ndirective @uppercase on FIELD_DEFINITION\nAs per the @graphql-tools documentation, a function will be created which returns both the definition and the transformer which provides the behaviour:\nfunction upperDirective(directiveName: string) {\n    return {\n        upperDirectiveTypeDefs: `directive @${directiveName} on FIELD_DEFINITION`,\n        upperDirectiveTransformer: (schema: GraphQLSchema) =>\n            mapSchema(schema, {\n                [MapperKind.OBJECT_FIELD]: (fieldConfig) => {\n                    const fieldDirective = getDirective(schema, fieldConfig, directiveName)?.[0];\n                    if (fieldDirective) {\n                        const { resolve = defaultFieldResolver } = fieldConfig;\n                        fieldConfig.resolve = async (source, args, context, info) => {\n                            const result = await resolve(source, args, context, info);\n                            if (typeof result === \"string\") {\n                                return result.toUpperCase();\n                            }\n                             result;\n                        };\n                    }\n                     fieldConfig;\n                },\n            }),\n    };\n}\nView all (7 more lines)\nOn calling the function, the type definition and the transformer returns for the directive:\nconst { upperDirectiveTypeDefs, upperDirectiveTransformer } = upperDirective(\"uppercase\");\nOn construction of a Neo4jGraphQL instance, the directive definition can be passed into the typeDefs array alongside the rest of the type definitions:\nconst neoSchema = new Neo4jGraphQL({\n    typeDefs: [\n        upperDirectiveTypeDefs,\n        `#graphql\n            type Movie {\n                name: String @uppercase\n            }\n        `,\n    ],\n    driver,\n});\nFinally, the Neo4j GraphQL schema must be transformed using the transformer returned from the directive function:\nconst schema = upperDirectiveTransformer(await neoSchema.getSchema());\nNote that this schema object is an instance of a GraphQLSchema which can be used in any GraphQL tools, such as in Apollo Server.\nCustom logic\nQueries and aggregations", "embeddings": [-0.03208141401410103, 0.10725731402635574, 0.04829743504524231, 0.03197682276368141, -0.05533386021852493, -0.019846787676215172, -0.07697997987270355, -0.00939252320677042, -0.017699427902698517, 0.06283797323703766, -0.0031061028130352497, 0.009249962866306305, 0.05430237203836441, 0.015470433980226517, 0.06242227926850319, 0.05056994408369064, 0.02245759218931198, -0.029330281540751457, -0.05355273559689522, -0.0034277141094207764, -0.03901395946741104, 0.047505781054496765, -0.03003433533012867, -0.03857693076133728, -0.005399019457399845, -0.03996966406702995, -0.07609415799379349, 0.0026866868138313293, 0.0309017114341259, -0.03615632653236389, 0.009504931047558784, 0.046915389597415924, -0.08206681162118912, 0.053681571036577225, -0.05966164544224739, 0.08849270641803741, 0.01601642742753029, -0.05634644627571106, 0.024553142488002777, 0.02008487656712532, 0.021593021228909492, -0.06681597232818604, -0.01576049067080021, 0.01878160610795021, 0.0024932334199547768, 0.01925722509622574, -0.005681244190782309, 0.0448128841817379, -0.03269503638148308, -0.021873943507671356, -0.02681933343410492, -0.0692487433552742, -0.030817849561572075, 0.027875183150172234, 0.005278854630887508, 0.04624783247709274, -0.011741599068045616, -0.006040618754923344, 0.07285130023956299, 0.04961729422211647, -0.07082852721214294, -0.02631380409002304, -0.03242095932364464, -0.058288879692554474, 0.0018212395953014493, -0.011626439169049263, 0.03692247346043587, -0.061246659606695175, -0.03405695781111717, 0.0806816965341568, 0.0643387958407402, 0.01223519816994667, -0.03259717673063278, 0.019363775849342346, -0.07126032561063766, 0.09330776333808899, -0.008402527309954166, 0.05778585374355316, -0.010812348686158657, -0.054314546287059784, 0.09504122287034988, 0.052638355642557144, -0.02240739017724991, 0.009039588272571564, -0.010810532607138157, 0.01876363717019558, -0.0638454332947731, -0.08710668981075287, -0.0043258764781057835, 0.008691811002790928, 0.008244309574365616, -0.09829346835613251, -0.10613584518432617, -0.015753893181681633, -0.045986831188201904, -0.0029087287839502096, 0.07361277937889099, 0.07593948394060135, 0.04355069249868393, -0.03613600134849548, 0.06450264900922775, -0.10970555245876312, 0.017502475529909134, -0.06299892067909241, -0.02218664065003395, 0.0035316417925059795, -0.029702315106987953, 0.006264917086809874, -0.06231020390987396, -0.008258911781013012, -0.02679264359176159, 0.0015115950955078006, -0.016574418172240257, -0.10650648176670074, -0.010841325856745243, 0.0697241798043251, 0.04781084880232811, 0.01970169134438038, 0.014675436541438103, -0.013310234993696213, -0.0038529925514012575, 0.02967471070587635, 0.025148995220661163, -0.029874496161937714, 0.0028625819832086563, 0.01040627807378769, -0.02570684440433979, 6.425548199234237e-33, 0.010243859142065048, 0.027618657797574997, -0.03550887480378151, 0.04831475019454956, 0.04176962748169899, 0.026285873726010323, -0.03788977861404419, -0.011794595047831535, -0.04987617954611778, 0.016041621565818787, 0.06214839220046997, 0.04823680222034454, -0.007602526340633631, -0.03931563347578049, -0.06771954894065857, 0.024525484070181847, 0.02365529164671898, -0.03760948032140732, -0.01121649332344532, -0.049207888543605804, 0.026379695162177086, 0.0459018312394619, -0.07259975373744965, 0.12286169826984406, -0.021571405231952667, 0.07746201753616333, -0.03841109946370125, -0.0408463254570961, -0.022870618849992752, -0.01954016648232937, -0.0070526497438549995, 0.0604303702712059, 0.01261158101260662, -0.01918247900903225, -0.0027308708522468805, -0.03532867506146431, 0.017280690371990204, -0.004666644614189863, -0.052375197410583496, -0.11778640747070312, 0.0651453360915184, 0.041452694684267044, 0.019883515313267708, -0.041404034942388535, -0.022950829938054085, -0.012299909256398678, -0.036935336887836456, -0.03716809302568436, 0.03747435286641121, -0.11515676230192184, 0.019010664895176888, 0.005517974030226469, 0.043140821158885956, 0.05224565789103508, 0.05314695090055466, 0.008297907188534737, 0.0015671148430556059, 0.0519094318151474, -0.03201152756810188, 0.014663062989711761, -0.007011799607425928, 0.03283020108938217, -0.005337858106940985, 0.022497674450278282, -0.012078268453478813, -0.03944322466850281, -0.010109973140060902, 0.007688114419579506, -0.009693835861980915, 0.02821596898138523, 0.042331088334321976, 0.08142682164907455, -0.03962838277220726, 0.09062781184911728, 0.058406807482242584, -0.12710018455982208, -0.04259130731225014, -0.036893509328365326, 0.0029003703966736794, -0.035938363522291183, -0.18791981041431427, 0.04981554299592972, 0.004023617133498192, 0.1223842203617096, 0.034074876457452774, -0.08222930878400803, 0.053781140595674515, 0.026957834139466286, 0.024751460179686546, -0.09443823248147964, 0.008697275072336197, -0.04311620444059372, -0.023601997643709183, 0.002167408587411046, 0.0347290076315403, -8.204214415402364e-33, 0.020156877115368843, 0.01901927962899208, -0.010255464352667332, 0.09847642481327057, -0.007223887834697962, -0.06423500925302505, 0.037406522780656815, 0.009257743135094643, 0.018562423065304756, 0.03880653902888298, 0.0145416259765625, -0.02528027631342411, -0.02463865838944912, -0.007324142847210169, 0.06586991995573044, -0.0495293028652668, -0.14600969851016998, -0.14209574460983276, -0.031107988208532333, 0.07697369158267975, 0.04421030730009079, -0.00010341173765482381, -0.033081650733947754, 0.08776935189962387, 0.08155981451272964, -0.07153592258691788, -0.05857132002711296, -0.02786475606262684, 0.03365764394402504, 0.03140898048877716, -0.05305342748761177, -0.04517839848995209, -0.03638700395822525, -0.012200667522847652, -0.02823840267956257, -0.12238810956478119, 0.003688163124024868, 0.05254749953746796, 0.03415423631668091, 0.024731766432523727, -0.029459159821271896, 0.0555606484413147, -0.04117819666862488, 0.10324306041002274, -0.0016255821101367474, 0.03949765861034393, 0.027307625859975815, 0.004901600070297718, -0.02097279578447342, -0.007903307676315308, -0.0037940714973956347, 0.002488179365172982, 0.011995071545243263, 0.09160400182008743, -0.03996672108769417, -0.10144145041704178, 0.056610360741615295, 0.008025765419006348, -0.003676218446344137, -0.003057565540075302, 0.018861033022403717, -0.018474824726581573, 0.008127755485475063, -0.06794016063213348, 0.026973966509103775, 0.06454282253980637, -0.09149759262800217, -0.02480272948741913, 0.06680966913700104, -0.04374110698699951, -0.03651919215917587, -0.07927239686250687, -0.05892667919397354, 0.0001251090579899028, 0.06939057260751724, 0.053038451820611954, 0.06493455171585083, 0.02058103308081627, -0.009420860558748245, 0.012653178535401821, -0.001036686240695417, 0.013312872499227524, -0.048745203763246536, 0.024492930620908737, 0.036292869597673416, 0.06361950933933258, -0.009027838706970215, 0.12628735601902008, -0.07161273807287216, 0.05368226394057274, 0.04076487943530083, 0.04016313701868057, -0.09800353646278381, 0.09211521595716476, -0.05567493662238121, -5.180671891480415e-08, -0.16347075998783112, 0.04555494710803032, -0.0729614719748497, -0.059840258210897446, 0.032703857868909836, 0.012298797257244587, 0.10070780664682388, 0.08466484397649765, 0.05838727578520775, 0.06754562258720398, -0.02553662471473217, 0.017173053696751595, 0.019545594230294228, -0.09351128339767456, -0.04392564669251442, -0.008202984929084778, -0.007174413185566664, 0.014804256148636341, -0.02826322242617607, 0.085176482796669, -0.05288795009255409, 0.033814895898103714, -0.10416652262210846, 0.023837480694055557, -0.0016996152698993683, -0.04804345965385437, -0.01180341187864542, -0.02005125768482685, -0.02103409916162491, 0.035235341638326645, -0.02258448116481304, 0.032143570482730865, 0.04341936111450195, 0.04047335311770439, -0.07353401929140091, 0.037070684134960175, 0.07095738500356674, -0.05427655577659607, 0.07154624909162521, 0.09266091138124466, 0.008010350167751312, 0.007920577190816402, -0.0865248441696167, -0.0418938547372818, -0.08198010921478271, -0.032225191593170166, 0.025462307035923004, 0.03478413075208664, 0.12205114960670471, 0.0772719606757164, -0.05164440721273422, -0.03230186551809311, -0.007595447823405266, -0.07504790276288986, 0.035894833505153656, 0.023868976160883904, 0.025238849222660065, 0.04199257865548134, 0.03310483321547508, -0.01168876513838768, 0.04121953248977661, -0.057642724364995956, -0.021797750145196915, -0.01878213882446289], "keywords": ["graphql - tools", "graphql toolserer", "directive", "neo4j graphql"], "redirects": []}, "https://neo4j.com/docs/graphql/5/queries-aggregations": {"links": ["https://neo4j.com/docs/graphql/5/queries-aggregations/pagination", "https://neo4j.com/docs/graphql/5/queries-aggregations/aggregations", "https://neo4j.com/docs/graphql/5/queries-aggregations/queries", "https://neo4j.com/docs/graphql/5/directives/custom-directives", "https://neo4j.com/docs/graphql/5/queries-aggregations/filtering", "https://neo4j.com/docs/graphql/5/queries-aggregations/sorting"], "text": "Queries and aggregations\nEach node defined in type definitions has two query fields generated for it: one for querying data and another one for aggregating it. Each of these fields, by their part, accepts two arguments used for filtering, sorting, and pagination.\nThis section addresses the following topics:\nQueries - Read or fetch values.\nAggregations - Combine lists of types from different sources into a single list.\nFiltering - Filter query results to find objects.\nSorting - Sort query results by individual fields.\nPagination - Navigate result pages.\nCustom directives\nQueries", "embeddings": [-0.016421569511294365, 0.047612570226192474, 0.013890396803617477, 0.07643299549818039, -0.08019232749938965, 0.035539302974939346, 0.0503808930516243, -0.007468763738870621, 0.009555129334330559, -0.015326423570513725, -0.009774135425686836, 0.04423196613788605, 0.019823633134365082, -0.05579407885670662, -0.052123550325632095, 0.0011155250249430537, -0.03213692083954811, 0.028473619371652603, -0.00452593807131052, -0.029689054936170578, 0.005969668738543987, 0.04849156364798546, -0.055045876652002335, -0.038856737315654755, -0.020361503586173058, 0.0024801420513540506, -0.07420682162046432, -0.03381909802556038, 0.04822855070233345, -0.036450423300266266, -0.030857522040605545, 0.0846475288271904, -0.030787698924541473, 0.11719319969415665, -0.07595319300889969, -0.030888712033629417, 0.032552361488342285, -0.03160187602043152, -0.04548819363117218, -0.06603150814771652, 0.051183201372623444, -0.00571675319224596, 0.014273114502429962, -0.02631297893822193, 0.0018273703753948212, -0.009843995794653893, -0.06844093650579453, -0.012344504706561565, -0.052276525646448135, -0.06594593822956085, -0.09229028224945068, 0.00018297453061677516, -0.08986672013998032, 0.03394049033522606, 0.05161745101213455, 0.026822559535503387, -0.12249018996953964, -0.0027700739447027445, -0.022801537066698074, 0.017650378867983818, -0.06887121498584747, -0.03773432970046997, -0.008765281178057194, 0.036556944251060486, 0.0550319068133831, -0.061547186225652695, 0.04432301223278046, 0.06134641915559769, 0.06974677741527557, -0.04533984512090683, -0.03299776837229729, -0.011390808038413525, -0.004393494222313166, 0.021238476037979126, -0.004633647855371237, 0.009396817535161972, -0.09579309076070786, -0.023678768426179886, -0.03339248150587082, 0.008854138664901257, -0.06611034274101257, 0.028204714879393578, -0.03479457646608353, 0.04253245145082474, 0.017999732866883278, -0.03488622233271599, -0.019025225192308426, -0.0805932804942131, 0.03294573351740837, -0.00241398555226624, -0.058059416711330414, -0.011793971993029118, -0.04649676755070686, 0.04359704256057739, -0.021264806389808655, 0.022410834208130836, 0.0787985771894455, -0.02751619555056095, 0.09428513050079346, -0.008165267296135426, 0.019258227199316025, 0.008477994240820408, 0.06143448129296303, -0.05589865893125534, -0.06599552184343338, -0.09071782976388931, -0.012581217102706432, -0.018310386687517166, -0.02107125148177147, -0.011931507848203182, -0.04066681116819382, 0.006222906522452831, -0.07796455919742584, -0.14869225025177002, -0.0554952435195446, 0.024267705157399178, 0.022922728210687637, -0.022042879834771156, 0.03891567513346672, -0.0662129819393158, -0.011137578636407852, 0.03727932274341583, 0.02217777818441391, -0.038382768630981445, 0.09361165761947632, 0.03269417956471443, -0.02657550759613514, 4.272944005758093e-33, 0.015653250738978386, -0.045498695224523544, -0.008606664836406708, -0.02886481024324894, -0.00037131435237824917, 0.10204571485519409, -0.0028815504629164934, 0.020216668024659157, -0.007160805631428957, 0.013087608851492405, 0.06091712787747383, 0.08342673629522324, -0.04655297473073006, 0.04994438216090202, 0.11375782638788223, -0.016774902120232582, 0.008250369690358639, 0.06419718265533447, -0.009732662700116634, -0.027692880481481552, 0.05183950811624527, 0.03624500334262848, -0.007030786015093327, 0.12861189246177673, 0.0750458836555481, 0.02728336863219738, -0.04872562363743782, 0.009253647178411484, -0.06279806047677994, -0.011236481368541718, 0.011465447023510933, 0.009463071823120117, -0.08215932548046112, -0.020426936447620392, 0.033715832978487015, 0.05467045307159424, 0.006245720665901899, -0.02817520685493946, -0.004154535010457039, -0.08681837469339371, -0.028193172067403793, -0.009585604071617126, 0.038695890456438065, -0.10079445689916611, -0.03951183706521988, -0.0078342380002141, -0.08114279806613922, 0.01704319566488266, 0.04610353708267212, -0.030024699866771698, -0.031187841668725014, -0.0282598789781332, 0.08767665177583694, 0.01715213619172573, 0.13286441564559937, 0.02849861979484558, -0.012451019138097763, 0.11251622438430786, -0.015825781971216202, 0.08356299251317978, -0.035084884613752365, -0.056718699634075165, 0.013183409348130226, -0.12429696321487427, -0.01823892444372177, 0.01232520304620266, -0.0374402292072773, 0.04584559425711632, 0.14760544896125793, 0.017690524458885193, 0.04914627969264984, 0.04101471230387688, 0.006217798683792353, 0.06429693102836609, 0.042616259306669235, 0.03455213084816933, -0.002406476065516472, -0.01968407817184925, 0.03710160776972771, 0.0270107239484787, -0.06491959095001221, -0.0392761304974556, -0.0067743100225925446, 0.05870496481657028, -0.037513285875320435, 0.03299887850880623, 0.04444500431418419, 0.08034482598304749, 0.049003466963768005, -0.09529401361942291, -0.035178739577531815, 0.0960773304104805, 0.0019468009704723954, -0.0406813845038414, -0.014357724227011204, -6.964451380316807e-33, -0.011106632649898529, 0.03412551432847977, -0.06856508553028107, 0.05075228214263916, 0.009555041790008545, -0.04866500571370125, -0.04884570837020874, -0.08946958184242249, 0.053804874420166016, -0.011509706266224384, -0.034302785992622375, -0.0012094654375687242, 0.08347810059785843, -0.0750291720032692, -0.016373613849282265, 0.00220623891800642, -0.06933154165744781, -0.19797174632549286, -0.013963008299469948, 0.08600949496030807, -0.0817500427365303, 0.04042751342058182, 0.029913024976849556, -0.012708907946944237, 0.006183306686580181, -0.02784251794219017, 0.012895296327769756, -0.018490198999643326, -0.006482626777142286, 0.0352267362177372, 0.03551791235804558, -0.06661351025104523, -0.006889745127409697, -0.05853941664099693, -0.055149924010038376, -0.08457314968109131, 0.06427958607673645, 0.008157787844538689, -0.014814956113696098, 0.03762556612491608, 0.0015803369460627437, -0.0037314186338335276, 0.08610081672668457, 0.007654923480004072, -0.03121274895966053, -0.04147198051214218, 0.01646103896200657, 0.058128394186496735, -0.02669757604598999, -0.06852129846811295, -0.011143787764012814, 0.030034445226192474, -0.013891460373997688, 0.03231366351246834, -0.059079959988594055, -0.0248675886541605, 0.03799805790185928, 0.025125786662101746, -0.005765705369412899, -0.024510398507118225, -0.015014766715466976, -0.029108792543411255, -0.03267761319875717, 0.03441096097230911, -0.0549914613366127, -0.018140524625778198, -0.07853738218545914, -0.13190902769565582, -0.08871781080961227, -0.021213019266724586, -0.062420427799224854, -0.04628235846757889, 0.06798416376113892, 0.00681531336158514, -0.031943365931510925, -0.024570239707827568, 0.07508442550897598, 0.008581316098570824, 0.05997969210147858, 0.03570184484124184, -0.035148099064826965, 0.05955708399415016, 0.05229493975639343, 0.05286264419555664, -0.019719228148460388, -0.01798907108604908, -0.05310483276844025, 0.03866959363222122, 0.0056679281406104565, 0.00541475648060441, -0.011215736158192158, -0.07861477136611938, -0.0662853792309761, 0.06472016870975494, -0.026369517669081688, -4.804421749327048e-08, -0.14967350661754608, -0.012855995446443558, -0.030659977346658707, 0.01175683829933405, 0.07176149636507034, -0.005679633002728224, 0.009106041863560677, 0.169182687997818, -0.006040859501808882, 0.03163449466228485, 0.052484944462776184, 0.049050282686948776, -0.013721763156354427, -0.027279110625386238, 0.16758912801742554, -0.04404384642839432, 0.040124330669641495, 0.0033032053615897894, -0.06416187435388565, -0.05133933946490288, -0.013022336177527905, -0.04802887141704559, -0.028401806950569153, 0.039069849997758865, 0.028424818068742752, 0.08893834799528122, 0.0247361958026886, 0.03233368694782257, 0.03696318715810776, 0.047966137528419495, 0.009209099225699902, 0.06499674171209335, 0.06078405678272247, 0.020466849207878113, 0.06176493316888809, 0.019296107813715935, -0.009615625254809856, -0.01157222781330347, -0.04536544904112816, -0.012235554866492748, 0.03708401322364807, 0.01772937923669815, 0.01152703259140253, 0.05570609122514725, -0.007100886199623346, 0.0006619761697947979, 0.041589558124542236, 0.012114893645048141, 0.09504594653844833, 0.07021700590848923, -0.018388250842690468, -0.05620821937918663, 0.024511855095624924, -0.029044752940535545, -0.041564155369997025, 0.0711669847369194, 0.02169519104063511, -0.054444849491119385, 0.02930830977857113, -0.03018723987042904, 0.04388575628399849, -0.03221210092306137, 0.013233215548098087, 0.027530696243047714], "keywords": ["node", "sorting", "pagination"], "redirects": []}, "https://neo4j.com/docs/graphql/5/queries-aggregations/sorting": {"links": ["https://neo4j.com/docs/graphql/5/queries-aggregations/pagination", "https://neo4j.com/docs/graphql/5/queries-aggregations/filtering"], "text": "Sorting\nA sorting input type is generated for every object type defined in your type definitions. It allows for query results to be sorted by each individual field.\nUsing this example type definition:\ntype Movie {\n    title: String!\n    runtime: Int!\n}\nThe following sorting input type and query should be generated:\ntype Movie {\n    title: String!\n    runtime: Int!\n}\n\nenum SortDirection {\n    ASC\n    DESC\n}\n\ninput MovieSort {\n    title: SortDirection\n    runtime: SortDirection\n}\n\ninput {\n    \"\"\n    sort: !]\n    limit:\n    offset:\n}\n\n {\n    movies(where:, options:): !]!\n}\nView all (11 more lines)\nThe resulting query should then allow fetching all movies sorted by runtime in ascending order:\nquery {\n    movies(options: {\n        sort: [\n            {\n                runtime: ASC\n            }\n        ]\n    }) {\n        title\n        runtime\n    }\n}\nAdditionally, in case there was a relationship between the Movie and an Actor type, sorting can also be applied when fetching the actors field:\nquery {\n    movies {\n        title\n        runtime\n        actors(options: {\n            sort: [\n                {\n                    surname: ASC\n                }\n            ]\n        }) {\n            surname\n        }\n    }\n}\nFiltering\nPagination", "embeddings": [0.010797563008964062, 0.014757509343326092, 0.0302292350679636, -0.029747329652309418, -0.050734743475914, 0.0901392325758934, -0.03410289064049721, 0.030873456969857216, 0.02903773821890354, -0.010798503644764423, -0.014430836774408817, 0.05255619436502457, -0.021027371287345886, 0.09660066664218903, -0.07327421754598618, -0.0028712665662169456, 0.010509908199310303, 0.010827746242284775, -0.018119271844625473, -0.04243794083595276, 0.04576744884252548, 0.04606819897890091, 0.03223947435617447, -0.04282871633768082, -0.10442935675382614, -0.019856225699186325, -0.040911052376031876, -0.025783365592360497, -0.03240218386054039, -0.04786686971783638, -0.05069779232144356, 0.05978650227189064, -0.01911681517958641, 0.09759640693664551, -0.05751751363277435, -0.11329858005046844, -0.09375720471143723, -0.08290483057498932, 0.0002711751440074295, -0.06736714392900467, 0.0443020835518837, 0.08305211365222931, 0.0043059042654931545, -0.07406194508075714, -0.010281229391694069, -0.061729442328214645, -0.04794181510806084, -0.05831681936979294, -0.027478782460093498, -0.000801272108219564, -0.0878300815820694, 0.07081345468759537, 0.0029499074444174767, 0.031220773234963417, -0.007904758676886559, -0.005319375544786453, -0.04891619831323624, -0.03400833532214165, -0.000741065654437989, -0.00469416007399559, -0.05165264755487442, -0.12384626269340515, 0.021687572821974754, -0.08579046279191971, 0.013994437642395496, -0.05556066334247589, 0.1107635423541069, 0.0357668399810791, 0.0368591770529747, -0.014807946048676968, 0.05674467980861664, -0.00408638920634985, 0.03218887373805046, -0.02231013961136341, -0.05949273705482483, -0.0128322783857584, -0.036939289420843124, -0.03884098678827286, -0.06556504219770432, -0.005560711026191711, -0.006278196815401316, -0.08694663643836975, -0.04461483284831047, 0.03548596054315567, 0.06306827068328857, -0.005160588771104813, -0.017404934391379356, -0.0792108103632927, 0.021038133651018143, 0.06390745937824249, -0.10754939913749695, -0.06899397820234299, -0.00902597326785326, 0.04743829369544983, 0.1227678433060646, 0.02259831875562668, 0.003767212852835655, 0.04651971161365509, 0.029936565086245537, -0.019498469308018684, -0.010861998423933983, -0.059314750134944916, 0.06695561856031418, 0.0008340617059729993, 0.06753847002983093, -0.0534173846244812, 0.056280504912137985, -0.014464477077126503, -0.057549282908439636, -0.03639257699251175, -0.020542457699775696, 0.08991721272468567, 0.007754158228635788, 0.00873041246086359, -0.07983709126710892, 0.051045797765254974, 0.020093219354748726, -0.05428097024559975, -0.021281009539961815, 0.0004110872687306255, 0.05846443772315979, 0.10274293273687363, -0.037546444684267044, 0.003754169214516878, 0.04474223777651787, 0.0741671621799469, 0.103487528860569, 1.1034004741339904e-32, 0.07376881688833237, 0.035989172756671906, 0.0815700888633728, -0.06767227500677109, -0.02935570292174816, 0.1090053915977478, 0.011259915307164192, 0.07149132341146469, -0.029455367475748062, -0.028109775856137276, -0.025814596563577652, 0.05865294486284256, -0.0460609570145607, -0.019701387733221054, 0.00039049325278028846, -0.03269829973578453, 0.028918396681547165, -0.028853096067905426, -0.06644339114427567, 0.032508205622434616, 0.06166915223002434, 0.05056048929691315, -0.11658556759357452, 0.004084673710167408, -0.02499471977353096, -0.030518664047122, -0.06129923462867737, 0.003285810584202409, -0.00814763829112053, -0.024381833150982857, -0.01832553744316101, -0.03780631721019745, -0.05693500116467476, -0.02361825667321682, 0.10617350041866302, -0.0070494008250534534, -0.06028860807418823, 0.02899343892931938, -0.006463367026299238, -0.0444050170481205, 0.03216202184557915, 0.0031526070088148117, -0.07057136297225952, -0.07953239232301712, -0.06683368980884552, 0.011407402344048023, -0.012259235605597496, 0.037482935935258865, 0.010394186712801456, 0.06464852392673492, -0.03121546097099781, -0.0002168390346923843, 0.050165511667728424, -0.039710864424705505, 0.07528945058584213, -0.0496625192463398, 0.08907553553581238, 0.05270057171583176, 0.030405791476368904, 0.045951392501592636, -0.023961547762155533, -0.014551903121173382, 0.061239998787641525, -0.05744461342692375, -0.02010669745504856, -0.006319764070212841, 0.06571946293115616, 0.02785838395357132, 0.11259204894304276, -0.05425644665956497, -0.0004399228491820395, 0.05571259930729866, 0.019773384556174278, 0.04133684188127518, 0.02771930955350399, 0.0582793653011322, -0.023703502491116524, -0.03575729578733444, -0.02807966247200966, -0.03435060381889343, 0.0001891932770377025, -0.03847726434469223, 0.024178067222237587, 0.05769328027963638, -0.027794258669018745, 0.02858329378068447, -0.01672738417983055, 0.06367846578359604, 0.06719034165143967, -0.027738310396671295, 0.0245828740298748, 0.005419214256107807, 0.055193714797496796, 0.013319619931280613, 0.027336733415722847, -8.346505067833525e-33, 0.09593158960342407, -0.04898708686232567, 0.026297226548194885, -0.0292294230312109, 0.03582180291414261, -0.10067299753427505, -0.028199084103107452, 0.042354766279459, 0.03055289201438427, -0.01363391987979412, -0.01915576681494713, -0.00856492854654789, 0.13668513298034668, -0.051877498626708984, 0.06690643727779388, 0.013282353058457375, -0.03229778632521629, -0.1317393183708191, 0.019876282662153244, -0.006874515675008297, -0.015270592644810677, -0.023905592039227486, 0.002202838659286499, -0.014879128895699978, -0.016824806109070778, 0.06676851958036423, 0.09101063013076782, 0.027851348742842674, -0.012878530658781528, 0.017370088025927544, -0.0047904993407428265, -0.06314997375011444, -0.08735588192939758, 0.027778299525380135, -0.09455784410238266, -0.07217904180288315, 0.07684974372386932, 0.05983575060963631, -0.021225644275546074, 0.06767488270998001, -0.07961340993642807, 0.022470487281680107, -0.020150573924183846, 0.0006987254018895328, -0.015533248893916607, -0.056038983166217804, 0.023483671247959137, 0.01975489780306816, -0.02254912257194519, -0.06277978420257568, 0.006219426169991493, 0.09108249098062515, -0.06889276951551437, -0.0190985556691885, -0.018008438870310783, -0.06795764714479446, 0.03204695135354996, 0.000878682010807097, -0.017069440335035324, 0.05215625837445259, 0.014479562640190125, 0.020133262500166893, 0.006142389494925737, -0.07760311663150787, -0.0325215645134449, -0.0359591580927372, -0.10967326164245605, -0.06839896738529205, -0.06902357190847397, -0.003487533191218972, -0.029861900955438614, -0.03019407019019127, 0.029318248853087425, 0.03223487734794617, -0.005248013883829117, 0.0019153907196596265, 0.01362517662346363, 0.06802760809659958, 0.17182891070842743, -0.018780583515763283, -0.027527308091521263, 0.007379735819995403, 0.039560191333293915, 0.07623868435621262, -0.001354240346699953, 0.052356261759996414, 0.009027911350131035, 0.008107846602797508, -0.029316095635294914, 0.02667725458741188, 0.03035550005733967, -0.10339345782995224, 0.03224171698093414, 0.08094848692417145, 0.011047039180994034, -4.831128208593327e-08, -0.09425976127386093, -0.03303387016057968, -0.08079840987920761, 0.08617081493139267, 0.026430698111653328, -0.007606244646012783, 0.0794430747628212, 0.1086406484246254, 0.08480414748191833, 0.012148060835897923, 0.03255891427397728, 0.05645867437124252, 0.028100203722715378, 0.024967724457383156, 0.08071773499250412, -0.018197504803538322, -0.011998873203992844, -0.0502762496471405, -0.04603638872504234, -0.01522442139685154, 0.03222662955522537, -0.04097187519073486, 0.029815346002578735, 0.026876596733927727, 0.04174071177840233, 0.05954820662736893, 0.033796269446611404, 0.0017655860865488648, 0.03881286084651947, 0.05448886379599571, -0.06225518882274628, 0.05723389983177185, 0.007497440092265606, -0.07532941550016403, 0.01363998744636774, -0.041808582842350006, -0.0010863511124625802, 0.003519786288961768, -0.008445627056062222, 0.008594904094934464, -0.012025847099721432, -0.03546428680419922, 0.007519708946347237, -0.005430951248854399, 0.059534721076488495, 0.028267912566661835, 0.09167367964982986, -0.005864070262759924, 0.090931735932827, 0.07099360972642899, -0.019314227625727654, -0.06133110076189041, 0.033861193805933, 0.026854034513235092, -0.03650105372071266, 0.05972300097346306, 0.00425811018794775, 0.007162380497902632, 0.008760279044508934, -0.04475879669189453, 0.026486879214644432, -0.09536033123731613, -0.018816374242305756, 0.10010232776403427], "keywords": ["moviesgination"], "redirects": []}, "https://neo4j.com/docs/graphql/5/queries-aggregations/filtering": {"links": ["https://neo4j.com/docs/graphql/5/types/interfaces", "https://neo4j.com/docs/graphql/5/queries-aggregations/aggregations", "https://neo4j.com/docs/graphql/5/types/spatial", "https://neo4j.com/docs/graphql/5/types/temporal", "https://neo4j.com/docs/cypher-manual/current/functions/predicate", "https://neo4j.com/docs/graphql/5/types/scalar", "https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS", "https://neo4j.com/docs/graphql/5/queries-aggregations/sorting"], "text": "Filtering\nWhen querying for data, a number of operators are available for different types in the where argument of a query or mutation.\nEquality operators\nAll types can be tested for either equality. For non-equality, you must use the NOT logical operator. For example:\nFiltering all Users named John\nquery {\n  users(where: {name: \"John\" })\n    id\n    name\n  }\nFor the Boolean type, equality operators are the only ones available.\nNumerical operators\nThese are the operators available for numeric (Int, Float, BigInt), temporal and spatial types:\n_LT\n_LTE\n_GT\n_GTE\nHere is an example of how to use them:\nFiltering Users younger than 50 years old\nquery {\n  users(where: {age_LT: 50 }) {\n    id\n    name\n    age\n  }\n}\nSpatial types use numerical filtering differently and they also have additional options. See Spatial types filtering for more information.\nThese same operators are disabled by default in the case of String comparisons. To enable, explicitly add them in the features options:\nconst { Neo4jGraphQL } = require(\"@neo4j/graphql\");\nconst neo4j = require(\"neo4j-driver\");\n\nconst typeDefs = `\n    type User {\n        name: String\n    }\n`;\n\nconst driver = neo4j.driver(\n    \"bolt://localhost:7687\",\n    neo4j.auth.basic(\"username\", \"password\")\n);\n\n features = {\n    : {\n        : {\n            : ,\n            : ,\n            : ,\n            : \n        }\n    }\n};\n\n neoSchema =  Neo4jGraphQL({ features, typeDefs, driver });\nView all (12 more lines)\nString comparison\nThe following case-sensitive comparison operators are only available for use on String and ID types:\n_STARTS_WITH\n_ENDS_WITH\n_CONTAINS\nHere is an example of how to use them:\nFiltering Users with name starting with \"J\"\nquery {\n  users(where: { name_STARTS_WITH: \"J\" }) {\n    id\n    name\n  }\n}\nRegEx matching\nThe filter _MATCHES is also available for comparison of String and ID types. It accepts RegEx strings as an argument and returns any matches.\nNote that RegEx matching filters are disabled by default. This is because, on an unprotected API, they could potentially be used to execute a ReDoS attack against the backing Neo4j database.\nIf you want to enable them, set the features configuration object for each:\nconst features = {\n    filters: {\n        String: {\n            MATCHES: true,\n        }\n    }\n};\n\nconst neoSchema = new Neo4jGraphQL({ features, typeDefs, driver });\nFor ID:\nconst features = {\n    filters: {\n        String: {\n            ID: true,\n        }\n    }\n};\n\nconst neoSchema = new Neo4jGraphQL({ features, typeDefs, driver });\nFor both String and ID:\nconst features = {\n    filters: {\n        String: {\n            MATCHES: true,\n        },\n        ID: {\n            MATCHES: true,\n        }\n    }\n};\n\nconst neoSchema = new Neo4jGraphQL({ features, typeDefs, driver });\nArray comparison\nThe following operator is available on non-array fields, and accepts an array argument:\n_IN\nConversely, the following operator is available on array fields, and accepts a single argument:\n_INCLUDES\nThese operators are available for all types apart from Boolean.\nLogical operators\nAll operators can be combined using the logical operators AND, OR, and NOT. They can also be standalone operators, which means that they can be used as such and not be appended to field names.\nThese operators accept an array argument with items of the same format as the where argument, which means they can also be nested to form complex combinations.\nFor example, if you want to match all actors by the name of either \"Keanu\" or not belonging to the \"Pantoliano\" family, that played in \"The Matrix\" movie, here is how you can query that:\nquery {\n    actors(where: {\n        AND: [\n            {\n                OR: [\n                    { name_CONTAINS: \"Keanu\" },\n                    { NOT: { name_ENDS_WITH: \"Pantoliano\" } }\n                ]\n            },\n            {\n                movies_SOME: { title: \"The Matrix\" }\n            }\n        ]}\n    ) {\n        name\n        movies {\n            title\n        }\n    }\n}\nView all (6 more lines)\nQuerying an interface\nYou can use the typename_IN filter to filter interfaces. Refer to Type definitions \u2192 Type \u2192 Interface for more details and an example.\nRelationship filtering\nRelationship filtering depends on the type of relationship that you have:\nn..1: filtering done on equality or inequality of the related nodes by specifying a filter on field.\nn..m: filtering is done on the list of related nodes and is based on the list predicates available in Cypher:\nfield_ALL - all\nfield_NONE - none\nfield_SOME - any\nfield_SINGLE - single\nAs an example, take these type definitions:\ntype User {\n    id: ID!\n    name: String\n    posts: [Post!]! @relationship(type: \"HAS_POST\", direction: OUT)\n}\n\ntype Post {\n    id: ID!\n    content: String\n    author: User! @relationship(type: \"HAS_POST\", direction: IN)\n    likes: [User!]! @relationship(type: \"LIKES\", direction: IN)\n}\nIn the case of n..1 relationships\nAn author represents an n..1 relationship on Post, where a given Post is authored by one, and only one, author. The available filters here will be author. For example:\nFind all posts by a desired author\nquery {\n    posts(where: { author: { id: \"7CF1D9D6-E527-4ACD-9C2A-207AE0F5CB8C\" } }) {\n        content\n    }\n}\nFind all posts NOT by an undesired author\nquery {\n    posts(where: { NOT: { author: { id: \"7CF1D9D6-E527-4ACD-9C2A-207AE0F5CB8C\" } } }) {\n        content\n    }\n}\nIn the case of n..m relationships\nIn the previous example, posts represents a n..m relationship on User, where a given User can have any number of posts. Here are some query examples:\nFind all Users where all of their posts contain search term: \"neo4j\"\nquery {\n    users(where: { posts_ALL: { content_CONTAINS: \"neo4j\" } }) {\n        name\n    }\n}\nFind all Users where none of their posts contains search term: \"cypher\"\nquery {\n    users(where: { posts_NONE: { content_CONTAINS: \"cypher\" } }) {\n        name\n    }\n}\nFind all users where some of their posts contain search term: \"graphql\"\nquery {\n    users(where: { posts_SOME: { content_CONTAINS: \"graphql\" } }) {\n        name\n    }\n}\nFind all users where only one of their posts contain search term: \"graph\"\nquery {\n    users(where: { posts_SINGLE: { content_CONTAINS: \"graph\" } }) {\n        name\n    }\n}\nAggregation filtering\nThis library offers, for each relationship, an aggregation key inside the where argument. It can be used both on the node and edge of a relationship.\nHere are some examples on how to apply this kind of filtering:\nFind posts where the number of likes are greater than 5\nSchema example\ntype User {\n    name: String\n}\n\ntype Post {\n    content: String\n    likes: [User!]! @relationship(type: \"LIKES\", direction: IN)\n}\nQuery\nquery {\n    posts(where: { likesAggregate: { count_GT: 5 } }) {\n        content\n    }\n}\nFind flights where the average age of passengers is greater than or equal to 18\nSchema example\ntype Passenger {\n    name: String\n    age: Int\n}\n\ntype Flight {\n    code: String\n    passengers: [Passenger!]! @relationship(type: \"FLYING_ON\", direction: IN)\n}\nQuery\nquery {\n    flights(where: { passengersAggregate: { node: { age_AVERAGE_GTE: 18 } } }) {\n        code\n    }\n}\nFind movies where the shortest actor screen time is less than 10 minutes\nSchema example\ntype Movie {\n    title: String\n    actors: [Person!]! @relationship(type: \"ACTED_IN\", direction: IN, properties: \"ActedIn\")\n}\n\ntype Person {\n    name: String\n}\n\ntype ActedIn @relationshipProperties {\n    screenTime: Int\n}\nQuery\nquery {\n    movies(where: { actorsAggregate: { edge: { screenTime_MIN_LT: 10 } } }) {\n        title\n    }\n}\nOperators\nAggregation filtering can also be done with operators. They provide autogenerated filters available for each type on the node and edge of the specified relationship.\nField type Description Operators Example\ncount\nA special 'top level' key inside the where aggregation and will be available for all relationships. This is used to count the amount of relationships the parent node is connected to.\ncount_EQUAL, count_GT, count_GTE, count_LT, count_LTE\nquery {\n    posts(where: { likesAggregate: { count_GT: 5 } }) {\n        content\n    }\n}\nString\nThese operators are calculated against the length of each string.\n_AVERAGE_LENGTH_EQUAL _AVERAGE_LENGTH_GT _AVERAGE_LENGTH_GTE _AVERAGE_LENGTH_LT _AVERAGE_LENGTH_LTE _SHORTEST_LENGTH_EQUAL _SHORTEST_LENGTH_GT _SHORTEST_LENGTH_GTE _SHORTEST_LENGTH_LT _SHORTEST_LENGTH_LTE _LONGEST_LENGTH_EQUAL _LONGEST_LENGTH_GT _LONGEST_LENGTH_GTE _LONGEST_LENGTH_LT _LONGEST_LENGTH_LTE\nquery {\n    posts(where: { likesAggregate: { node: { name_LONGEST_LENGTH_GT: 5 } } }) {\n        content\n    }\n}\nNumerical\nUsed in the case of Int, Float, and BigInt.\n_AVERAGE_EQUAL, _AVERAGE_GT, _AVERAGE_GTE, _AVERAGE_LT, _AVERAGE_LTE, _SUM_EQUAL, _SUM_GT, _SUM_GTE, _SUM_LT, _SUM_LTE, _MIN_EQUAL, _MIN_GT, _MIN_GTE, _MIN_LT, _MIN_LTE, _MAX_EQUAL, _MAX_GT, _MAX_GTE, _MAX_LT, _MAX_LTE\nquery {\n    movies(where: { actorsAggregate: { edge: { screenTime_MIN_LT: 10 } } }) {\n        title\n    }\n}\nTemporal\nUsed in the case of DateTime, LocalDateTime, LocalTime, Time, and Duration.\n_MIN_EQUAL, _MIN_GT, _MIN_GTE, _MIN_LT, _MIN_LTE, _MAX_EQUAL, _MAX_GT, _MAX_GTE, _MAX_LT, _MAX_LTE\nType definitions\ntype Event {\n    title: String!\n    startTime: DateTime!\n}\nQuery\nquery EventsAggregate {\n    users(where: { eventsAggregate: { node: { startTime_GT: \"2022-08-14T15:00:00Z\" } } }) {\n        name\n    }\n}\nDuration\nDescription.\n_AVERAGE_EQUAL, _AVERAGE_GT, _AVERAGE_GTE, _AVERAGE_LT, _AVERAGE_LTE\nType definitions\ntype Event {\n    title: String!\n    duration: Duration!\n}\nQuery\nquery EventsAggregate {\n    users(where: { eventsAggregate: { node: { duration_AVERAGE_LT: \"PT2H\" } } }) {\n        name\n    }\n}\nID\nNo aggregation filters are available for ID.\n-\n-\nAggregations\nSorting", "embeddings": [0.025073982775211334, 0.10284297168254852, 0.057994544506073, 0.023088552057743073, -0.05685143917798996, 0.000978373340331018, 0.03679852560162544, 0.005841522011905909, -0.09181401878595352, -0.046584948897361755, -0.055988237261772156, -0.03679259493947029, 0.021102584898471832, 0.07222197949886322, -5.096954555483535e-05, 0.03791452944278717, -0.03328493982553482, -0.0025119022466242313, 0.024262912571430206, -0.06831615418195724, 0.01773015409708023, -0.03716238588094711, -0.0267329178750515, 0.0014853976899757981, 0.03605760261416435, -0.04832235723733902, -0.045280102640390396, -0.05522787198424339, 0.06049051135778427, 0.053778648376464844, 0.0245388001203537, 0.06445842981338501, -0.06840053200721741, 0.05808538943529129, -0.11573641002178192, -0.03770168125629425, -0.05869564041495323, -0.03149480000138283, -0.04884147644042969, -0.0439688079059124, -0.021392693743109703, 0.013559915125370026, -0.044950053095817566, -0.016309741884469986, -0.0076752034947276115, 0.0183380339294672, -0.07888814061880112, -0.009105462580919266, 0.049751121550798416, -0.013654681853950024, -0.07189328223466873, -0.03546205908060074, -0.037157092243433, -0.044867441058158875, 0.002804312389343977, -0.014233464375138283, -0.10863125324249268, -0.03637367859482765, 0.05020160228013992, -0.0593019500374794, -0.011637073010206223, -0.1137261614203453, 0.02104766294360161, -0.001523032900877297, -0.011095153167843819, -0.029900332912802696, 0.029804730787873268, 0.008714110590517521, 0.09108339995145798, 0.05632571503520012, 0.005330293904989958, 0.06203462928533554, -0.10032673180103302, 0.04734354093670845, -0.030993955209851265, 0.07964405417442322, 0.05761948227882385, -0.004154006019234657, 0.020619791001081467, 0.033059556037187576, -0.014595006592571735, -0.052179332822561264, -0.0411730632185936, -0.04407556727528572, 0.033041343092918396, 0.07190883159637451, -0.02117401733994484, -0.0727621540427208, -0.01891642063856125, 0.0019116118783131242, 0.03758484870195389, 0.03275264799594879, -0.03770158067345619, -0.021115578711032867, 0.023266267031431198, -0.015015186741948128, 0.03979738429188728, 0.07722336798906326, 0.06901001930236816, 0.03245018050074577, -0.042018823325634, -0.05630762502551079, 0.057704824954271317, 0.04863511398434639, -0.011754564940929413, -0.010641222819685936, 0.08427733182907104, -0.045735761523246765, -0.06764379888772964, -0.029750002548098564, -0.08644219487905502, 0.047358572483062744, 0.006633128970861435, -0.012761656194925308, -0.05909573659300804, 0.018123101443052292, 0.11738989502191544, -0.03437212109565735, 0.021694473922252655, -0.010860951617360115, -0.010133407078683376, 0.04212835431098938, -0.05511654540896416, 0.035562869161367416, 0.032390229403972626, 0.08086005598306656, -0.029239071533083916, 7.665502986835772e-33, 0.06786725670099258, -0.027809100225567818, -0.015293754637241364, 0.0012126463698223233, -0.05470668524503708, 0.08666802197694778, -0.06109997257590294, -0.014058774337172508, -0.0140864048153162, 0.05740511417388916, -0.07201883941888809, 0.06374713033437729, 0.003887020982801914, -0.06088482216000557, 0.0591534860432148, 0.024074062705039978, 0.001986569259315729, -0.06201987713575363, -0.06413697451353073, -0.023265784606337547, 0.007622529752552509, -0.05439944565296173, -0.09107139706611633, 0.12630121409893036, 0.036616191267967224, -0.03759557381272316, -0.005183458793908358, -0.012724366039037704, 0.04503878206014633, -0.02807808108627796, -0.09019077569246292, -0.02243613637983799, -0.024343039840459824, 0.09953736513853073, 0.06625143438577652, 0.01311466097831726, 0.019125578925013542, 0.018000109121203423, -0.04466627165675163, -0.0819881483912468, -0.06910865008831024, 0.028477096930146217, 0.003450816497206688, -0.049725309014320374, -0.04461750388145447, -0.08193934708833694, 0.02524125576019287, 0.0015108472434803843, 0.02203901670873165, -0.005655890796333551, -0.034560807049274445, 0.10181504487991333, -0.10979808866977692, 0.004981448408216238, 0.05970311164855957, -0.03581737354397774, 0.10043416172266006, 0.13578319549560547, -0.05461586266756058, 0.03876302018761635, 0.041092805564403534, -0.010297462344169617, 0.0818985104560852, -0.025743110105395317, 0.03714941069483757, 0.03806844353675842, -0.014584876596927643, 0.026359470561146736, 0.07226799428462982, 0.05429316684603691, 0.07009779661893845, 0.025059932842850685, 0.01640279032289982, 0.021519921720027924, 0.06927992403507233, -0.08818603307008743, -0.028491532430052757, -0.005220521707087755, -0.010249541141092777, -0.002524459268897772, -0.033469460904598236, -0.09031590819358826, -0.04872904717922211, 0.11647895723581314, -0.010525953955948353, -0.003086038399487734, 0.04238925129175186, -0.0315794013440609, 0.058965619653463364, 0.031599827110767365, 0.009060724638402462, -0.027963608503341675, 0.006721401121467352, 0.001936020446009934, -0.020626382902264595, -7.743380222261718e-33, -0.05221041664481163, 0.008340681903064251, 0.0573466494679451, -0.04195595160126686, -0.009697165340185165, -0.06047116219997406, 0.04530768841505051, -0.07122642546892166, 0.05360817536711693, -0.085957832634449, -0.000735293491743505, -0.02600797824561596, 0.08838826417922974, -0.03177618607878685, 0.018661396577954292, 0.01789284311234951, -0.06658056378364563, -0.11145013570785522, -0.07162230461835861, 0.06244637444615364, -0.09190193563699722, 0.08037438988685608, -0.04518350958824158, 0.07551831007003784, 0.021367786452174187, -0.0008575439569540322, 0.03303117677569389, -0.021651193499565125, 0.0039148894138634205, -0.02854570560157299, -0.07741211354732513, -0.06617256999015808, -0.050764378160238266, -0.02267315238714218, -0.00356689584441483, -0.1200871616601944, 0.04578470066189766, 0.05612935125827789, 0.018571406602859497, -0.012297452427446842, -0.021629419177770615, 0.014689357951283455, -0.01737496629357338, 0.08361928910017014, -0.0026107195299118757, 0.051213398575782776, -0.023908985778689384, 0.022561630234122276, 0.01161949336528778, -0.023570770397782326, 0.00953197106719017, 0.00858102273195982, 0.004893115255981684, 0.039008792489767075, -0.029387200251221657, -0.10374155640602112, 0.0020903293043375015, -0.03474701941013336, 0.047304991632699966, 0.06837804615497589, -0.03224652633070946, -0.028589487075805664, -0.0006021397421136498, 0.03849156200885773, -0.07173114269971848, -0.06322045624256134, -0.06697302311658859, 0.015531647019088268, -0.0005449976888485253, 0.002029678551480174, 0.03823879361152649, -0.07722558081150055, -0.02756546065211296, -0.017955593764781952, 0.022354524582624435, -0.058561213314533234, 0.005676832981407642, 0.05262967571616173, 0.03831003978848457, 0.04050859808921814, -0.008010468445718288, 0.10907598584890366, 0.02213442698121071, 0.11034063249826431, -0.02227398194372654, 0.0381966307759285, -0.05632702261209488, 0.04075731337070465, -0.07489620894193649, 0.03758496418595314, 0.03659561276435852, -0.04439790919423103, -0.14682020246982574, 0.005724949296563864, -0.021941570565104485, -5.28117496401137e-08, -0.015828635543584824, -0.0006745486753061414, -0.07917673885822296, -0.001987180206924677, 0.026990797370672226, 0.027850333601236343, 0.03317772597074509, 0.05558957904577255, -0.022059636190533638, 0.09548792988061905, 0.07490533590316772, 0.09682716429233551, 0.04832610860466957, -0.07242157310247421, 0.07460352778434753, -0.053524311631917953, -0.04467279836535454, -0.0018180536571890116, -0.015998966991901398, 0.08210046589374542, 0.016488777473568916, -0.030560234561562538, -0.07974091917276382, 0.07636255025863647, 0.0437961146235466, 0.02249046415090561, 0.05207527428865433, 0.043114133179187775, 0.06285546720027924, 0.0032639726996421814, -0.04487190023064613, 0.055430859327316284, 0.05363955721259117, 0.027536680921912193, 0.01675158552825451, -0.019242115318775177, 0.03645612671971321, 0.07670387625694275, -0.05119666829705238, 0.040554229170084, 0.040861114859580994, 0.04723117873072624, -0.054287780076265335, 0.004845977295190096, -0.056049197912216187, 0.017100077122449875, 0.06566382944583893, -0.04453052580356598, 0.11843471229076385, 0.07287381589412689, -0.028401846066117287, -0.02769896574318409, 0.010509953834116459, 0.018543601036071777, -0.017883023247122765, -0.07226468622684479, 0.00047889520647004247, 0.04361157491803169, 0.01562414225190878, -0.0565793514251709, 0.04414195567369461, -0.09362605959177017, -0.004412352107465267, -0.022244196385145187], "keywords": ["filtering"], "redirects": []}, "https://neo4j.com/docs/graphql/5/types/scalar": {"links": ["https://graphql.org/learn/schema", "https://neo4j.com/docs/graphql/5/types/temporal", "https://neo4j.com/docs/graphql/5/types", "https://neo4j.com/docs/graphql/5/queries-aggregations/filtering"], "text": "Scalar types\nNeo4j GraphQL supports all of the built-in GraphQL scalar types. The BigInt scalar type is an addition specific to the Neo4j database.\nScalar types\nType Description Example\nInt\nSupports up to 32-bit values.\ntype Person {\n  age: Int!\n}\nBigInt\nSupports up to 64 bit integers, serialized as strings in variables and in data responses. Shares the same Numerical operators as the other numeric types.\ntype File {\n  size: BigInt\n}\nCan be passed as a number (does not need quotes) when used directly in a query or mutation.\nquery {\n    files(where: { size: 9223372036854775807 }) {\n        size\n    }\n}\nFloat\nRepresents signed double\u2010precision fractional values.\ntype Product {\n  price: Float!\n}\nString\nStored as a string in the database and always returned as a string.\ntype Product {\n  name: String!\n}\nBoolean\nRepresents true or false.\ntype Product {\n  inStock: Boolean!\n}\nID\nRepresents a unique identifier.\ntype Product {\n  id: ID!\n}\nTypes\nTemporal", "embeddings": [-0.02665070630609989, 0.0772232934832573, -0.05261920019984245, 0.04651132598519325, -0.06875786930322647, -0.020274046808481216, -0.0073572080582380295, 0.05323418974876404, -0.061139293015003204, -0.003636691952124238, -0.05446106195449829, 0.036376651376485825, 0.045883774757385254, 0.027308747172355652, 0.02408715710043907, 0.02519693784415722, -0.02838224545121193, -0.004741228651255369, -0.04648548364639282, -0.014490152709186077, 0.009336517192423344, -0.040754128247499466, 0.0037708997260779142, 0.004521515220403671, -0.002441036282107234, -0.03719385713338852, 0.0005659711314365268, 0.005015320144593716, 0.025535952299833298, -0.06038276478648186, -0.04308726638555527, 0.08125264197587967, -0.005534504074603319, 0.045781463384628296, -0.06325531005859375, -0.014843929558992386, 0.030146319419145584, -0.031814608722925186, -0.025241080671548843, -0.03953837230801582, 0.06256899982690811, -0.024251695722341537, -0.0558321475982666, -0.0030402629636228085, 0.06300099939107895, -0.05825437605381012, -0.04955141618847847, 0.0006882620509713888, 0.06023624911904335, 0.018601803109049797, -0.12207180261611938, 0.01901395246386528, -0.07133866101503372, 0.029565488919615746, 0.003198468592017889, -0.052388399839401245, -0.06706881523132324, -0.0048114531673491, -0.018917422741651535, 0.02266588620841503, 0.024046925827860832, -0.06693559885025024, 0.03763171285390854, -0.06404194980859756, -0.008229264058172703, 0.03155450150370598, -0.007374559994786978, 0.010355593636631966, 0.005976682063192129, -0.04428855702280998, 0.04973135516047478, 0.03207104653120041, -0.1640184223651886, 0.026154866442084312, -0.03680263087153435, 0.04301229119300842, 0.09418892115354538, -0.03903356194496155, 0.0028597514610737562, 0.03163798525929451, -0.05666957050561905, -0.038511596620082855, -0.056202858686447144, -0.03934263810515404, -0.002684252103790641, -0.017198046669363976, 0.03748836740851402, -0.008890663273632526, 0.045485589653253555, 0.05247151851654053, -0.048798155039548874, 0.032661665230989456, -0.04416190832853317, -0.0349109023809433, 0.018203048035502434, 0.03415581211447716, 0.06726748496294022, 0.045132312923669815, 0.1214590072631836, -0.011295250616967678, 0.05133875086903572, -0.055215924978256226, 0.05382613092660904, 0.0038968073204159737, -0.04521581158041954, -0.01379416324198246, 0.0825037881731987, 0.04308529570698738, 0.0106022534891963, -0.04877485707402229, -0.07253734022378922, 0.00518737593665719, -0.048264030367136, -0.05127100646495819, -0.07564237713813782, 0.023645194247364998, -0.016713686287403107, -0.027298882603645325, -0.005995472893118858, -0.017223291099071503, 0.03939732164144516, 0.10678786039352417, 0.003236073534935713, 0.004876756574958563, -0.010457634925842285, 0.0469820462167263, -0.04942310228943825, 1.007511873454364e-32, -0.07549771666526794, 0.024960510432720184, 0.060643330216407776, 0.04670696705579758, -0.014797966927289963, 0.08056926727294922, -0.03762512281537056, -0.01790289580821991, -0.09701605886220932, 0.0419151708483696, -0.0991043820977211, 0.051978252828121185, -0.02717294543981552, 0.05435897409915924, 0.08139745891094208, 0.04242931306362152, 0.018780313432216644, -0.04539576172828674, -0.0005901166587136686, -0.10829078406095505, 0.04774443432688713, 0.03353814780712128, -0.08156123757362366, 0.16208629310131073, 0.09382931143045425, 0.05256246030330658, 0.04669717699289322, 0.0007079159840941429, 0.020746277645230293, -0.02089191973209381, -0.056288041174411774, -0.04735011234879494, 0.028671512380242348, 0.004687019158154726, 0.03064202331006527, 0.0015620025806128979, -0.03856561332941055, -0.028413992375135422, 0.011403830721974373, -0.10164330154657364, 0.002834617393091321, 0.025121653452515602, 0.011886772699654102, 0.04099380970001221, -0.08362381160259247, -0.01791786402463913, -0.007389449514448643, 0.030656570568680763, -0.025797009468078613, -0.04224178194999695, -0.07333801686763763, 0.03957480937242508, 0.024059776216745377, 0.07803783565759659, 0.06238056346774101, -0.04837728291749954, 0.09419085085391998, 0.03251178562641144, -0.08300966024398804, 0.04464694485068321, 0.006011910270899534, 0.002702654106542468, 0.044680703431367874, -0.02207295037806034, -0.04300493374466896, 0.05796731635928154, 0.024573657661676407, -0.008471843786537647, 0.017976686358451843, 0.06369694322347641, 0.0567760095000267, 0.10249407589435577, 0.03206687048077583, -0.02212490327656269, 0.024594275280833244, -0.07535117119550705, -0.04921109601855278, -0.02074398472905159, -0.0018770950846374035, 0.024210626259446144, -0.08357082307338715, -0.06090683490037918, 0.03236929327249527, 0.10757159441709518, -0.07727499306201935, -0.03274933248758316, 0.02448296546936035, 0.003939996473491192, 0.11307460069656372, -0.03243231028318405, -0.01894724927842617, 0.04324644058942795, -0.0075291539542376995, -0.04550699517130852, -0.021563977003097534, -8.819015593297683e-33, -0.05485934391617775, 0.0015119347954168916, 0.034115009009838104, 0.05079414322972298, -0.006291721947491169, -0.020267339423298836, -0.0037259815726429224, -0.053899407386779785, 0.027917880564928055, -0.015886807814240456, -0.0044351257383823395, -0.05701548233628273, 0.045812737196683884, -0.07815946638584137, -0.0069002616219222546, -0.019551796838641167, -0.08267132192850113, -0.06881404668092728, -0.02034522220492363, 0.01212396752089262, -0.06185081601142883, 0.022010231390595436, 0.011071577668190002, 0.12567777931690216, 0.08616168051958084, -0.01691494509577751, 0.02295045368373394, -0.0069725667126476765, -0.0514787994325161, 0.009835997596383095, -0.05382192134857178, -0.12138352543115616, -0.015265666879713535, -0.05648491159081459, 0.012172714807093143, -0.09308362007141113, 0.0877772644162178, 0.01640913262963295, 0.01259532105177641, 0.0014904678100720048, -0.03626035898923874, 0.024869296699762344, -0.05048159882426262, 0.07080907374620438, 0.0011058077216148376, 0.008364818058907986, 0.007317203562706709, 0.04285426437854767, 0.059162892401218414, -0.029675131663680077, 0.022627390921115875, 0.045715875923633575, 0.046139247715473175, 0.035618316382169724, -0.016963833943009377, -0.08955692499876022, 0.0019812826067209244, 0.0332755446434021, -0.01901382952928543, 0.015580765902996063, -0.02658955752849579, -0.057215843349695206, 0.01823911815881729, -0.0029769756365567446, -0.017758330330252647, -0.069364033639431, -0.0016362275928258896, -0.11553555727005005, -0.06545010954141617, -0.03378010168671608, 0.06984731554985046, -0.03972477465867996, 0.012031091377139091, 0.04346621781587601, 0.0011062512639909983, -0.04234008118510246, -0.025491435080766678, 0.07661577314138412, 0.010881930589675903, 0.030653104186058044, 0.051547471433877945, 0.07806030660867691, 0.09157039225101471, 0.10131141543388367, 0.027297114953398705, 0.03233066201210022, -0.026731690391898155, 0.09309086203575134, -0.08124195039272308, 0.03851419314742088, -0.038403622806072235, 0.06608600169420242, -0.12194105237722397, 0.0795583426952362, -0.029943685978651047, -5.095777311225902e-08, -0.07082255184650421, 0.021109143272042274, -0.06369086354970932, -0.015554745681583881, 0.047258343547582626, 0.05121927335858345, -0.0010741784935817122, 0.07851029932498932, 0.04884880408644676, 0.1116807609796524, 0.02739688754081726, 0.011361584067344666, -0.008991842158138752, -0.05091356113553047, 0.029200948774814606, -0.06346537917852402, 0.0691702663898468, -0.06451643258333206, 0.0037242998369038105, 0.017559561878442764, 0.04616563767194748, 0.05338331684470177, -0.052366577088832855, 0.009669682942330837, 0.02675049565732479, -0.06316389888525009, 0.042680174112319946, 0.10719024389982224, 5.118560147820972e-05, -0.006854388862848282, -0.034679852426052094, -0.0013721199939027429, 0.07154780626296997, 0.05299544706940651, -0.006135282572358847, -0.009900735691189766, 0.10970401763916016, 0.12453329563140869, -0.05107206478714943, 0.029490280896425247, 0.00010641189146554098, 0.01040746085345745, -0.10071498900651932, -0.02696307562291622, -0.023108862340450287, -0.019278760999441147, -0.04887579008936882, -0.05443790555000305, 0.05713222548365593, 0.08238270878791809, -0.020253079012036324, -0.041783250868320465, 0.023380087688565254, 0.03541657701134682, -0.048172980546951294, 0.00527338869869709, -0.0162031352519989, -0.0055948360823094845, 0.045847341418266296, -0.033732667565345764, 0.09028758853673935, -0.1475939303636551, -0.026679284870624542, 0.011202231980860233], "keywords": ["neo4j", "neo4", "graphql", "database"], "redirects": []}, "https://neo4j.com/docs/graphql/5/types": {"links": ["https://neo4j.com/docs/graphql/5/security/operations", "https://neo4j.com/docs/graphql/5/types/scalar", "https://neo4j.com/docs/graphql/5/types/spatial", "https://neo4j.com/docs/graphql/5/types/temporal"], "text": "Types\nThe Neo4j GraphQL Library provides the following types:\nType Description\nInt\nThe Int scalar type represents a signed 32-bit numeric non-fractional value.\nFloat\nThe Float scalar type represents a signed double-precision fractional value.\nString\nThe String scalar type represents textual data and consists of UTF-8 characters.\nBoolean\nThe Boolean scalar type represents true or false.\nID\nThe ID scalar type represents a unique identifier, often used to refetch an object.\nBigInt\nThe BigInt scalar type represents a signed 64-bit numeric non-fractional value.\nDate\nThe Date temporal scalar type is a ISO 8601 date mapping to the Neo4j DATE type.\nTime\nThe Time temporal scalar type is a ISO 8601 time of day and timezone mapping to the Neo4j ZONED TIME type.\nLocalTime\nThe LocalTime temporal scalar type is a ISO 8601 time of day mapping to the Neo4j LOCAL TIME type.\nDateTime\nThe DateTime temporal scalar type is a ISO 8601 date, time of day and timezone mapping to the Neo4j ZONED DATETIME type.\nLocalDateTime\nThe LocalDateTime temporal scalar type is an ISO 8601 date and time of day mapping to the Neo4j LOCAL DATETIME type.\nDuration\nThe Duration temporal scalar type is an ISO 8601 duration mapping to the Neo4j DURATION type.\nPoint\nThe Point spatial object type is a WGS 84 3D geographic point.\nCartesianPoint\nThe CartesianPoint spatial object type is a Cartesian 3D point.\nOperations\nScalar", "embeddings": [0.03611452877521515, 0.038576483726501465, -0.01703977771103382, 0.0013073653681203723, -0.06187467649579048, -0.04053392633795738, -0.07075590640306473, 0.002821441972628236, -0.021797947585582733, -0.02169506810605526, -0.05458027496933937, -0.032107386738061905, 0.006010580807924271, 0.09107093513011932, 0.00887366198003292, 0.017474951222538948, -0.022909218445420265, -0.05922945588827133, 0.016968604177236557, -0.015219814144074917, 0.014355787076056004, -0.03239969536662102, -0.006282230839133263, -0.02779119648039341, 0.03190659359097481, -0.0310619305819273, 0.045787978917360306, 0.015674274414777756, 0.0629742220044136, -0.002460462972521782, -0.04587315022945404, 0.10662072151899338, -0.024661215022206306, 0.016488345339894295, -0.08224309980869293, 0.009660634212195873, 0.05208837613463402, 0.01501159556210041, -0.011161912232637405, 0.016784995794296265, 0.047959111630916595, -0.013153178617358208, 0.06520187854766846, 0.03562821075320244, 0.01183574739843607, 0.01333827804774046, -0.06323105096817017, 0.022232040762901306, -0.017660537734627724, 0.018588906154036522, -0.05273038521409035, 0.016707399860024452, -0.08579081296920776, 0.00636671157553792, 0.042512036859989166, 0.048168767243623734, -0.0590958297252655, 0.01433417946100235, 0.02189820446074009, 0.039474181830883026, 0.008424192667007446, -0.005467430222779512, -0.019271409139037132, -0.027229227125644684, -0.00871922168880701, 0.03179396688938141, 0.014296277426183224, -0.015973862260580063, 0.04134727641940117, -0.03227153420448303, -0.022515632212162018, 0.022233275696635246, -0.14323106408119202, -0.013318738900125027, -0.042494453489780426, 0.05627306550741196, 0.08011535555124283, -0.003051185281947255, -0.015228752978146076, -0.030437568202614784, 0.00603784155100584, 0.04172128438949585, -0.03974665701389313, 0.012072372250258923, 0.009008808061480522, 0.01954176090657711, 0.003408377291634679, 0.026484493166208267, 0.04219257831573486, 0.08392435312271118, 0.012577706947922707, 0.0038308927323669195, -0.005293999798595905, -0.046211499720811844, 0.037863317877054214, -0.003948409575968981, 0.09878624230623245, 0.10295248031616211, 0.1611347645521164, 0.006087242625653744, 0.06886357069015503, -0.08004766702651978, -0.05287812277674675, 0.042652424424886703, 0.01761847548186779, -0.02642025239765644, 0.01666298136115074, 0.02472594939172268, -0.03147517517209053, 0.035641860216856, -0.07626079767942429, 0.0006701268721371889, -0.029220929369330406, -0.08068414777517319, -0.04016134515404701, 0.04712739959359169, 0.00017459613445680588, 0.00862670037895441, 0.02272123284637928, -0.024072887375950813, -0.050663966685533524, 0.06083371490240097, -0.005719833541661501, -0.008155927062034607, -0.0026265515480190516, 0.032150380313396454, -0.04568715766072273, 8.3745677914075e-33, -0.004779818467795849, 0.0012513530673459172, 0.06521841138601303, -0.005026086699217558, -0.01800370030105114, 0.08863957226276398, -0.0753423273563385, -0.0758136436343193, -0.03857272490859032, -0.019154801964759827, -0.08616232126951218, 0.03582386299967766, -0.0278612170368433, -0.0006481719901785254, 0.0511392317712307, 0.04299432039260864, 0.07147413492202759, -0.00897017028182745, -0.044315405189991, -0.03516663983464241, 0.06173257529735565, 0.0038731778040528297, -0.06303257495164871, 0.07906217873096466, 0.10046050697565079, 0.035788148641586304, 0.025336090475320816, 0.0009755559731274843, -0.02079005353152752, -0.028469284996390343, -0.0942448303103447, -0.05875390022993088, -0.05329612269997597, 0.027109388262033463, 0.1196136549115181, -0.00544585008174181, -0.0028291381895542145, 0.0022028747480362654, 0.012796767987310886, -0.14584167301654816, -0.0070609841495752335, 0.007189046125859022, -0.031246621161699295, -0.0552692636847496, -0.008659177459776402, -0.06626655161380768, -0.023848919197916985, -0.02364414930343628, -0.002592574106529355, 0.015295329503715038, -0.04754141345620155, 0.021237166598439217, 0.030451389029622078, 0.021107420325279236, -0.031279273331165314, -0.021404681727290154, 0.14420194923877716, 0.04438219964504242, -0.07661957293748856, 0.1050809696316719, 0.013566229492425919, -0.0020005155820399523, 0.06432119011878967, -0.023803262040019035, -0.0016965720569714904, 0.03618374839425087, -0.030461736023426056, -0.02322949282824993, 0.03358082100749016, 0.05059010908007622, 0.06040477380156517, 0.09471331536769867, 0.04122362285852432, 0.021433303132653236, -0.022954005748033524, -0.08819843083620071, -0.00020442639652173966, -0.018328115344047546, -0.0002399382065050304, 0.04191688075661659, -0.11794121563434601, -0.0748811587691307, 0.003331048646941781, 0.03725101053714752, -0.042199935764074326, -0.048892803490161896, 0.06784743070602417, 0.034309037029743195, 0.09562067687511444, -0.004548043478280306, -0.0644465759396553, -0.015644904226064682, -0.007537524681538343, -0.009451971389353275, -0.04019644483923912, -8.305998267188158e-33, -0.03168488293886185, 0.018401004374027252, -0.012652594596147537, 0.052315663546323776, -0.02639777958393097, -0.0535418801009655, -0.01970616541802883, 0.016033412888646126, 0.009669198654592037, -0.003935862332582474, 0.024563878774642944, -0.05123550072312355, 0.05836089700460434, -0.028767775744199753, 0.04282849282026291, -0.025612395256757736, -0.019236650317907333, -0.0852673351764679, -0.07117348909378052, 0.06213665381073952, -0.03076324798166752, 0.012746219523251057, -0.068077452480793, 0.07836347818374634, 0.10757316648960114, -0.020025793462991714, 0.055127859115600586, -0.004904195200651884, -0.08296772837638855, 0.008030922152101994, -0.04755234345793724, -0.09524760395288467, -0.009537270292639732, -0.03403334319591522, -0.01023400854319334, -0.06505441665649414, 0.10397110879421234, -0.018167778849601746, -0.0011275968281552196, -0.02343693934381008, -0.014417210593819618, 0.03148762136697769, -0.0944545567035675, 0.03527432680130005, -0.03220205754041672, 0.13345295190811157, -0.011300723068416119, 0.07916581630706787, 0.019491393119096756, -0.004619185347110033, 0.022877294570207596, 0.014369905926287174, 0.05966722592711449, 0.07397733628749847, 0.003356955014169216, -0.05550793558359146, -0.01748746633529663, 0.01798667386174202, 0.008314724080264568, -0.009941988624632359, -0.055734097957611084, -0.11630413681268692, 0.002997826086357236, -0.033859118819236755, 0.032048311084508896, -0.10085535794496536, 0.0017890313174575567, -0.09262873977422714, -0.10478675365447998, -0.05767616629600525, 0.11869145929813385, 0.02462342567741871, -0.06673590838909149, 0.03507590293884277, 0.01999448984861374, -0.06924530863761902, 0.010762427933514118, 0.08150191605091095, -0.023444363847374916, -0.018637312576174736, -0.010839248076081276, 0.04298995062708855, 0.060469482094049454, 0.09159165620803833, -0.029898585751652718, 0.06658115983009338, -0.0010796647984534502, 0.06727176159620285, -0.09112909436225891, 0.02116522565484047, -0.009579131379723549, 0.07467664033174515, -0.17603054642677307, 0.11689291149377823, -0.06870914995670319, -4.6465988390309576e-08, -0.020306507125496864, -0.00788099691271782, -0.11634582281112671, -0.04470086842775345, -0.015984201803803444, 0.04403262585401535, 0.003021831624209881, 0.03699873760342598, 0.053957562893629074, 0.06970672309398651, 0.06740293651819229, -0.028371041640639305, -0.00654936395585537, -0.10545851290225983, 0.050763919949531555, -0.024370213970541954, 0.01823730207979679, -0.06897938251495361, 0.004835186060518026, 0.011769086122512817, 0.008959958329796791, -0.03945084661245346, -0.0732356607913971, 0.025256186723709106, -0.021622534841299057, -0.007608627900481224, 0.011072245426476002, 0.15587009489536285, 0.05224780738353729, -0.013821132481098175, -0.03180757164955139, 0.02540789358317852, 0.03913994878530502, 0.0030098583083599806, -0.07199370861053467, -0.020090252161026, 0.037927187979221344, 0.07449552416801453, 0.0037148664705455303, 0.12345258891582489, 0.036330703645944595, -0.0037599261850118637, -0.12453223764896393, -0.002579545835033059, -0.03406854718923569, 0.002003894653171301, -0.04321267455816269, -0.06587797403335571, 0.050307709723711014, 0.06283602863550186, -0.04799216240644455, 0.004393622279167175, 0.03246880695223808, 0.011942969635128975, -0.007074915803968906, 0.03483860567212105, -0.0021201788913458586, -0.027117084711790085, 0.06167083978652954, 0.005011881701648235, 0.01293301023542881, -0.02581678330898285, -0.04216916859149933, -0.03219505399465561], "keywords": ["time", "graphf01"], "redirects": []}, "https://neo4j.com/docs/graphql/5/types/temporal": {"links": ["https://neo4j.com/docs/cypher-manual/current/values-and-types/temporal", "https://neo4j.com/docs/graphql/5/types/spatial", "https://neo4j.com/docs/graphql/5/types/scalar", "https://neo4j.com/developer/cypher/dates-datetimes-durations"], "text": "Temporal types\nType Description Example\nDateTime\nISO datetime string stored as a datetime temporal type.\ntype User {\n    createdAt: DateTime\n}\nDate\n\"YYYY-MM-DD\" date string stored as a date temporal type.\ntype Movie {\n    releaseDate: Date\n}\nDuration\nISO 8601 duration string stored as a duration type.\nDecimal values are not currently accepted on [YMWD]. Comparisons are made according to the Cypher Developer Guide.\ntype Movie {\n    runningTime: Duration!\n}\nLocalDateTime\n\"YYYY-MM-DDTHH:MM:SS\" datetime string stored as a LocalDateTime temporal type.\ntype Movie {\n    nextShowing: LocalDateTime\n}\nTime\nRFC3339 time string stored as a Time temporal type.\ntype Movie {\n    nextShowing: Time\n}\nLocalTime\n\"HH:MM:SS[.sss+]\" time string stored as a LocalTime temporal type.\ntype Movie {\n    nextShowing: LocalTime\n}\nScalar\nSpatial", "embeddings": [0.02265908755362034, 0.014964988455176353, 0.017373906448483467, -0.04880872368812561, -0.04842410236597061, 0.03480648994445801, -0.03998015075922012, 0.02520209737122059, 0.062326580286026, -0.023730244487524033, -0.019006216898560524, -0.07067499309778214, -0.02134871296584606, 0.12860462069511414, 0.025938987731933594, -0.0652942806482315, -0.008639584295451641, -0.022949643433094025, 0.08217241615056992, -0.04236944392323494, 0.06276030093431473, -0.0045984345488250256, 0.022050347179174423, 0.04990360885858536, -0.004250452853739262, -0.052479974925518036, -0.021476855501532555, 0.054242804646492004, 0.0188935287296772, 0.06874636560678482, -0.04495531693100929, 0.12439596652984619, -0.02877320908010006, 0.042971204966306686, -0.04070999100804329, 0.024457259103655815, 0.04478292539715767, 0.035278040915727615, -0.051978036761283875, -0.03949884697794914, 0.05560969561338425, -0.051332682371139526, 0.05810036137700081, 0.03966907039284706, -0.06429103761911392, -0.04834093898534775, 0.00021143456979189068, -0.030426902696490288, -0.10264534503221512, -0.005778173450380564, -0.03758906573057175, 0.07177113741636276, -0.03411008417606354, 0.07296070456504822, 0.06719643622636795, 0.08155932277441025, -0.07850462943315506, 0.08207562565803528, 7.348816143348813e-05, -0.037181101739406586, -0.054738014936447144, -0.00044261556467972696, -0.0887954980134964, -0.05823332071304321, 0.006601844448596239, 0.008355485275387764, 0.0033415977377444506, 0.012874276377260685, 0.035551704466342926, -0.033822331577539444, -0.026929233223199844, -0.004060069564729929, -0.09748175740242004, 0.04161686450242996, -0.04420823976397514, 0.06676054745912552, 0.11313211917877197, -0.017803333699703217, 0.0055017247796058655, -0.07163240760564804, -0.0022869394160807133, -0.027701446786522865, -0.04487422853708267, 0.025361817330121994, 0.022356243804097176, -0.021167220547795296, 0.010178796947002411, 0.04339740797877312, -0.04430290311574936, 0.0547332838177681, 0.030560767278075218, -0.03534639999270439, 0.04482018202543259, -0.014716500416398048, 0.06348391622304916, -0.04591617360711098, 0.0027208994142711163, 0.09999087452888489, 0.13974051177501678, 0.009474904276430607, 0.008039532229304314, -0.02730264887213707, -0.043693847954273224, 0.05690797045826912, 0.052784450352191925, -0.04602387174963951, 0.013841550797224045, 0.0047277482226490974, -0.01597404107451439, 0.08225398510694504, -0.04956882819533348, 0.004049049224704504, -0.07612006366252899, -0.07831649482250214, -0.033749863505363464, 0.06143606826663017, -0.06340841948986053, 0.03214004635810852, -0.006417561322450638, -0.03915303200483322, -0.003616682020947337, -0.010261539369821548, -0.029983455315232277, 0.004259372130036354, -0.013840649276971817, -0.026106078177690506, 0.07499600201845169, 9.685687741691786e-33, -0.03472288325428963, -0.028642281889915466, -0.02209482155740261, -0.028641218319535255, -0.059960588812828064, 0.10412301868200302, -0.004047454334795475, 0.028195010498166084, -0.009516667574644089, -0.053671155124902725, -0.08064296841621399, -0.01863790862262249, -0.044287748634815216, -0.0669991672039032, 0.03221382945775986, 0.0060508945025503635, 0.0414755642414093, 0.04672104865312576, 0.012946773320436478, 0.014997870661318302, 0.05510978773236275, 0.06911343336105347, -0.04869804531335831, -0.05016964301466942, 0.0629332885146141, -0.08664810657501221, -0.025387395173311234, -0.04950723797082901, -0.00445731682702899, -0.0008799550123512745, -0.017996830865740776, -0.06268258392810822, -0.007197317201644182, 0.03273778781294823, 0.131309375166893, -0.015644287690520287, 0.011436558328568935, -0.021049300208687782, -0.019937757402658463, -0.13148342072963715, -0.007158556021749973, 0.025478264316916466, -0.03178488835692406, 0.007677777204662561, -0.04059426859021187, -0.05710042640566826, 0.008999236859381199, -0.007418688852339983, -0.06450231373310089, 0.08235801011323929, 0.07750707119703293, 0.05328800901770592, 0.005507558584213257, -0.09605617821216583, 0.0228025633841753, 0.03140042722225189, 0.14048537611961365, 0.018609007820487022, -0.036441121250391006, 0.06700243800878525, -0.0044014062732458115, 0.049362584948539734, 0.09243912249803543, -0.10023047029972076, 0.002365968655794859, 0.04193178564310074, 0.0005240109749138355, 3.489067967166193e-05, 0.03416009992361069, 0.03299715369939804, 0.029468320310115814, 0.061686865985393524, 0.0011290444526821375, 0.019017254933714867, -0.01738382689654827, -0.06671038269996643, 0.06538789719343185, -0.048317864537239075, 0.019155582413077354, 0.011943358927965164, -0.06803230196237564, -0.07108956575393677, 0.00541688920930028, 0.06675121933221817, -0.02345855161547661, -0.010235078632831573, 0.032893795520067215, 0.0011367168044671416, 0.08482541888952255, -0.03375152125954628, -0.008049475029110909, -0.068246990442276, 0.014156834222376347, -0.009111782535910606, -0.045204658061265945, -8.817771773337719e-33, -0.007170329801738262, -0.025224201381206512, -0.11812125146389008, -0.00935162603855133, -0.023253582417964935, -0.06551960855722427, -0.043133582919836044, 0.067951999604702, 0.014808258041739464, 0.001070090802386403, 0.0026110815815627575, -0.04918279871344566, -0.015639612451195717, -0.07287084311246872, 0.004018682055175304, -0.07910334318876266, 0.011206373572349548, -0.07246637344360352, 0.00930603314191103, 0.05384484678506851, 0.02799401618540287, -0.018178850412368774, -0.04361378028988838, 0.03385837376117706, 0.06005578488111496, 0.011314439587295055, 0.060410525649785995, 0.06752796471118927, -0.03580395504832268, -0.02217681333422661, -0.007785404566675425, -0.10012269020080566, -0.017018701881170273, -0.05043742433190346, -0.07524597644805908, -0.040229860693216324, 0.06657344102859497, 0.007462370675057173, 0.002849424257874489, -0.028012020513415337, 0.0012060153530910611, 0.02912135049700737, -0.06611302495002747, -0.016214894130825996, 0.01641898974776268, 0.1120767667889595, 0.022465743124485016, 0.05461328849196434, 0.029011383652687073, 0.011397277936339378, 0.04808880761265755, -0.005399700719863176, -0.035992857068777084, 0.01847786270081997, -0.00555216521024704, -0.005129294004291296, -0.03405456617474556, -0.031965795904397964, 0.07291876524686813, -0.07722371816635132, 0.01857141964137554, -0.10453436523675919, -0.01916675642132759, 0.0221733208745718, 0.03621311113238335, -0.08075167238712311, -0.013297971338033676, -0.1041959598660469, -0.09855984151363373, -0.02716037631034851, 0.03178882971405983, 0.05532717704772949, -0.0827648714184761, -0.020533693954348564, -0.015774959698319435, -0.0645947977900505, 0.04197472706437111, 0.0725160539150238, 0.07253940403461456, -0.01204738486558199, -0.03483358398079872, 0.11592070013284683, 0.05900311470031738, 0.0626959577202797, -0.02792571298778057, 0.06984663754701614, 0.0127640999853611, 0.10620269179344177, -0.04455827921628952, 0.03705447539687157, -0.019213784486055374, 0.061203714460134506, -0.06093686446547508, 0.09902933984994888, -0.020786361768841743, -4.679251119910077e-08, -0.00880313292145729, 0.014551970176398754, -0.06931403279304504, 0.03831604868173599, -0.05674875155091286, -0.023943420499563217, -0.03805715590715408, -0.003416153835132718, 0.16801892220973969, 0.019680876284837723, 0.05468741059303284, -0.03455141559243202, 0.0030789889860898256, -0.07379607856273651, 0.014736133627593517, -0.02738613449037075, 0.025290539488196373, -0.07533431798219681, -0.046131689101457596, 0.05264824256300926, 0.0005666406359523535, -0.00810526218265295, -0.03507775440812111, 0.028827263042330742, -0.052579138427972794, 0.04009899124503136, 0.002204054268077016, 0.11581208556890488, 0.06782535463571548, 0.00497584231197834, 0.005503190215677023, 0.0718938484787941, -0.022347796708345413, 0.02021993137896061, -0.07617665082216263, -0.05464116483926773, -0.04031536355614662, 0.06731870770454407, 0.016002345830202103, 0.09204378724098206, 0.010211329907178879, -0.05732930824160576, -0.14494001865386963, 0.05461268126964569, 0.07662235200405121, -0.017594382166862488, 0.01643873192369938, -0.015305619686841965, -0.0057028308510780334, 0.08363623917102814, -0.003304986981675029, 0.009860984981060028, -0.005957662593573332, -0.020683307200670242, 0.05845221132040024, -0.0018805405125021935, 0.03770780190825462, -0.023443475365638733, 0.041931040585041046, -0.03842182084918022, -0.007537437602877617, -0.05440046265721321, -0.010639149695634842, 0.0050405110232532024], "keywords": ["time"], "redirects": []}, "https://neo4j.com/developer/cypher/dates-datetimes-durations": {"links": [], "text": null, "embeddings": [], "keywords": [], "redirects": ["https://neo4j.com/docs/cypher-manual/current/values-and-types/temporal"]}, "https://neo4j.com/docs/cypher-manual/current/values-and-types/temporal": {"links": ["https://www.cl.cam.ac.uk/~mgk25/time/utc-sls", "https://neo4j.com/docs/cypher-manual/current/syntax/operators", "https://neo4j.com/docs/cypher-manual/current/values-and-types/property-structural-constructed", "https://neo4j.com/docs/cypher-manual/current/functions/temporal/duration", "https://en.wikipedia.org/wiki/ISO_week_date", "https://www.iana.org/time-zones", "https://neo4j.registration.goldcast.io/events/03805ea9-fe3a-4cac-8c15-aa622666531a", "https://neo4j.com/docs/cypher-manual/current/values-and-types/spatial", "https://en.wikipedia.org/wiki/ISO_8601", "https://en.wikipedia.org/wiki/Astronomical_year_numbering", "https://neo4j.com/docs/operations-manual/5/configuration/configuration-settings", "https://neo4j.com/docs/cypher-manual/current/functions/temporal", "https://en.wikipedia.org/wiki/Gregorian_calendar"], "text": "Temporal values\nCypher\u00ae has built-in support for handling temporal values, which can be stored as properties on nodes and relationships in Neo4j databases. This section will discuss how Cypher handles time zones, before exploring temporal values in more detail.\nRefer to Temporal functions - instant types for information regarding temporal functions allowing for the creation and manipulation of temporal values.\nRefer to Temporal operators for information regarding temporal operators.\nRefer to Ordering and comparison of values for information regarding the comparison and ordering of temporal values.\nTemporal value types\nThe following table lists the temporal value types and their supported components:\nType Date support Time support Time zone support\nDATE\nLOCAL TIME\nZONED TIME\nLOCAL DATETIME\nZONED DATETIME\nDURATION\n-\n-\n-\nDATE, LOCAL TIME, ZONED TIME, LOCAL DATETIME, and ZONED DATETIME are temporal instant types. A temporal instant value expresses a point in time with varying degrees of precision.\nBy contrast, DURATION is not a temporal instant type. A DURATION represents a temporal amount, capturing the difference in time between two instants, and can be negative. DURATION captures the amount of time between two instants, it does not capture a start time and end time.\nStarting from Neo4j 5.9, some temporal types have been renamed. The table below shows the current as well as the old names of the temporal types.\nType Old type name\nDATE\nDate\nLOCAL TIME\nLocalTime\nZONED TIME\nTime\nLOCAL DATETIME\nLocalDateTime\nZONED DATETIME\nDateTime\nDURATION\nDuration\nTime zones\nTime zones are represented either as an offset from UTC, or as a logical identifier of a named time zone (these are based on the IANA time zone database). In either case, the time is stored as UTC internally, and the time zone offset is only applied when the time is presented. This means that temporal instants can be ordered without taking time zone into account. If, however, two times are identical in UTC, then they are ordered by timezone.\nWhen creating a time using a named time zone, the offset from UTC is computed from the rules in the time zone database to create a time instant in UTC, and to ensure the named time zone is a valid one.\nIt is possible for time zone rules to change in the IANA time zone database. For example, there could be alterations to the rules for daylight savings time in a certain area. If this occurs after the creation of a temporal instant, the presented time could differ from the originally-entered time, insofar as the local timezone is concerned. However, the absolute time in UTC would remain the same.\nThere are three ways of specifying a time zone in Cypher:\nSpecifying the offset from UTC in hours and minutes (ISO 8601).\nSpecifying a named time zone.\nSpecifying both the offset and the time zone name (with the requirement that these match).\nSee specifying time zones for examples.\nThe named time zone form uses the rules of the IANA time zone database to manage daylight savings time (DST).\nThe default time zone of the database can be configured using the configuration option db.temporal.timezone. This configuration option influences the creation of temporal types for the following functions:\nGetting the current date and time without specifying a time zone.\nCreating a temporal type from its components without specifying a time zone.\nCreating a temporal type by parsing a STRING without specifying a time zone.\nCreating a temporal type by combining or selecting values that do not have a time zone component, and without specifying a time zone.\nTruncating a temporal value that does not have a time zone component, and without specifying a time zone.\nTemporal instants\nSpecifying temporal instants\nA temporal instant consists of three parts; the date, the time, and the timezone. These parts can be combined to produce the various temporal value types. The character T is a literal character.\nTemporal instant type Composition of parts\nDATE\n<date>\nLOCAL TIME\n<time> or T<time>\nZONED TIME\n<time><timezone> or T<time><timezone>\nLOCAL DATETIME*\n<date>T<time>\nZONED DATETIME*\n<date>T<time><timezone>\n*When date and time are combined, date must be complete; i.e. fully identify a particular day.\nSpecifying dates\nComponent Format Description\nYear\nYYYY\nSpecified with at least four digits (special rules apply in certain cases).\nMonth\nMM\nSpecified with a double digit number from 01 to 12.\nWeek\nww\nAlways prefixed with W and specified with a double digit number from 01 to 53.\nQuarter\nq\nAlways prefixed with Q and specified with a single digit number from 1 to 4.\nDay of the month\nDD\nSpecified with a double digit number from 01 to 31.\nDay of the week\nD\nSpecified with a single digit number from 1 to 7.\nDay of the quarter\nDD\nSpecified with a double digit number from 01 to 92.\nOrdinal day of the year\nDDD\nSpecified with a triple digit number from 001 to 366.\nIf the year is before 0000 or after 9999, the following additional rules apply:\nMinus sign, - must prefix any year before 0000, (e.g. -3000-01-01).\nPlus sign, + must prefix any year after 9999, (e.g. +11000-01-01).\nThe year must be separated with - from the next component:\nif the next component is month, (e.g. +11000-01).\nif the next component is day of the year, (e.g. +11000-123).\nIf the year component is prefixed with either - or +, and is separated from the next component, Year is allowed to contain up to nine digits. Thus, the allowed range of years is between -999,999,999 and +999,999,999. For all other cases, i.e. the year is between 0000 and 9999 (inclusive), Year must have exactly four digits (the year component is interpreted as a year of the Common Era (CE)).\nThe following formats are supported for specifying dates:\nFormat Description Example Interpretation of example\nYYYY-MM-DD\nCalendar date: Year-Month-Day\n2015-07-21\n2015-07-21\nYYYYMMDD\nCalendar date: Year-Month-Day\n20150721\n2015-07-21\nYYYY-MM\nCalendar date: Year-Month\n2015-07\n2015-07-01\nYYYYMM\nCalendar date: Year-Month\n201507\n2015-07-01\nYYYY-Www-D\nWeek date: Year-Week-Day\n2015-W30-2\n2015-07-21\nYYYYWwwD\nWeek date: Year-Week-Day\n2015W302\n2015-07-21\nYYYY-Www\nWeek date: Year-Week\n2015-W30\n2015-07-20\nYYYYWww\nWeek date: Year-Week\n2015W30\n2015-07-20\nYYYY-Qq-DD\nQuarter date: Year-Quarter-Day\n2015-Q2-60\n2015-05-30\nYYYYQqDD\nQuarter date: Year-Quarter-Day\n2015Q260\n2015-05-30\nYYYY-Qq\nQuarter date: Year-Quarter\n2015-Q2\n2015-04-01\nYYYYQq\nQuarter date: Year-Quarter\n2015Q2\n2015-04-01\nYYYY-DDD\nOrdinal date: Year-Day\n2015-202\n2015-07-21\nYYYYDDD\nOrdinal date: Year-Day\n2015202\n2015-07-21\nYYYY\nYear\n2015\n2015-01-01\nThe smallest components can be omitted. Cypher will assume omitted components to have their lowest possible value. For example, 2013-06 will be interpreted as being the same date as 2013-06-01.\nSpecifying times\nComponent Format Description\nHour\nHH\nSpecified with a double digit number from 00 to 23.\nMinute\nMM\nSpecified with a double digit number from 00 to 59.\nSecond\nSS\nSpecified with a double digit number from 00 to 59.\nfraction\nsssssssss\nSpecified with a number from 0 to 999999999. It is not required to specify leading zeros. fraction is an optional, sub-second component of Second. This can be separated from Second using either a full stop (.) or a comma (,). The fraction is in addition to the two digits of Second.\nCypher does not support leap seconds; UTC-SLS (UTC with Smoothed Leap Seconds) is used to manage the difference in time between UTC and TAI (International Atomic Time).\nThe following formats are supported for specifying times:\nFormat Description Example Interpretation of example\nHH:MM:SS.sssssssss\nHour:Minute:Second.fraction\n21:40:32.142\n21:40:32.142\nHHMMSS.sssssssss\nHour:Minute:Second.fraction\n214032.142\n21:40:32.142\nHH:MM:SS\nHour:Minute:Second\n21:40:32\n21:40:32.000\nHHMMSS\nHour:Minute:Second\n214032\n21:40:32.000\nHH:MM\nHour:Minute\n21:40\n21:40:00.000\nHHMM\nHour:Minute\n2140\n21:40:00.000\nHH\nHour\n21\n21:00:00.000\nThe smallest components can be omitted. For example, a time may be specified with Hour and Minute, leaving out Second and fraction. On the other hand, specifying a time with Hour and Second, while leaving out Minute, is not possible.\nSpecifying time zones\nThe time zone is specified in one of the following ways:\nAs an offset from UTC.\nUsing the Z shorthand for the UTC (\u00b100:00) time zone.\nWhen specifying a time zone as an offset from UTC, the rules below apply:\nThe time zone always starts with either a plus (+) or minus (-) sign.\nPositive offsets, i.e. time zones beginning with +, denote time zones east of UTC.\nNegative offsets, i.e. time zones beginning with -, denote time zones west of UTC.\nA double-digit hour offset follows the +/- sign.\nAn optional double-digit minute offset follows the hour offset, optionally separated by a colon (:).\nThe time zone of the International Date Line is denoted either by +12:00 or -12:00, depending on country.\nWhen creating values of the ZONED DATETIME temporal instant type, the time zone may also be specified using a named time zone, using the names from the IANA time zone database. This may be provided either in addition to, or in place of the offset. The named time zone is given last and is enclosed in square brackets ([]). Should both the offset and the named time zone be provided, the offset must match the named time zone.\nThe following formats are supported for specifying time zones:\nFormat Description Example Supported for ZONED DATETIME Supported for ZONED TIME\nZ\nUTC\nZ\n\u00b1HH:MM\nHour:Minute\n+09:30\n\u00b1HH:MM[ZoneName]\nHour:Minute[ZoneName]\n+08:45[Australia/Eucla]\n\u00b1HHMM\nHour:Minute\n+0100\n\u00b1HHMM[ZoneName]\nHour:Minute[ZoneName]\n+0200[Africa/Johannesburg]\n\u00b1HH\nHour\n-08\n\u00b1HH[ZoneName]\nHour[ZoneName]\n+08[Asia/Singapore]\n[ZoneName]\n[ZoneName]\n[America/Regina]\nComponents of temporal instants\nComponents of temporal instant values can be accessed as properties.\nComponents of temporal instant values and where they are supported\nComponent Description Type Range/Format DATE ZONED DATETIME LOCAL DATETIME ZONED TIME LOCAL TIME\ninstant.year\nThe year component represents the astronomical year number of the instant.[1]\nINTEGER\nAt least 4 digits. For more information, see the rules for using the Year component.\ninstant.quarter\nThe quarter-of-the-year component.\nINTEGER\n1 to 4.\ninstant.month\nThe month-of-the-year component.\nINTEGER\n1 to 12.\ninstant.week\nThe week-of-the-year component.[2]\nINTEGER\n1 to 53.\ninstant.weekYear\nThe year that the week-of-year component belongs to.[3]\nINTEGER\nAt least 4 digits. For more information, see the rules for using the Year component.\ninstant.dayOfQuarter\nThe day-of-the-quarter component.\nINTEGER\n1 to 92.\ninstant.quarterDay\nThe day-of-the-quarter component (alias for instant.dayOfQuarter).\nINTEGER\n1 to 92.\ninstant.day\nThe day-of-the-month component.\nINTEGER\n1 to 31.\ninstant.ordinalDay\nThe day-of-the-year component.\nINTEGER\n1 to 366.\ninstant.dayOfWeek\nThe day-of-the-week component (the first day of the week is Monday).\nINTEGER\n1 to 7.\ninstant.weekDay\nThe day-of-the-week component (alias for instant.dayOfWeek).\nINTEGER\n1 to 7.\ninstant.hour\nThe hour component.\nINTEGER\n0 to 23.\ninstant.minute\nThe minute component.\nINTEGER\n0 to 59.\ninstant.second\nThe second component.[4]\nINTEGER\n0 to 59.\ninstant.millisecond\nThe millisecond component.\nINTEGER\n0 to 999.\ninstant.microsecond\nThe microsecond component.\nINTEGER\n0 to 999999.\ninstant.nanosecond\nThe nanosecond component.\nINTEGER\n0 to 999999999.\ninstant.timezone\nThe timezone component.\nSTRING\nDepending on how the time zone was specified, this is either a time zone name or an offset from UTC in the format \u00b1HHMM.\ninstant.offset\nThe timezone offset.\nSTRING\nIn the format \u00b1HHMM.\ninstant.offsetMinutes\nThe timezone offset in minutes.\nINTEGER\n-1080 to +1080.\ninstant.offsetSeconds\nThe timezone offset in seconds.\nINTEGER\n-64800 to +64800.\ninstant.epochMillis\nThe number of milliseconds between 1970-01-01T00:00:00+0000 and the instant.[5]\nINTEGER\nPositive for instants after and negative for instants before 1970-01-01T00:00:00+0000.\ninstant.epochSeconds\nThe number of seconds between 1970-01-01T00:00:00+0000 and the instant.[6]\nINTEGER\nPositive for instants after and negative for instants before 1970-01-01T00:00:00+0000.\nExamples\nBelow are examples of parsing instant values using various temporal functions. More information about these temporal functions can be found here.\nExample 1. datetime\nParsing a ZONED DATETIME using the calendar date format:\nQuery\nRETURN datetime('2015-06-24T12:50:35.556+0100') AS theDateTime\nResult\ntheDateTime\n2015-06-24T12:50:35.556+01:00\nRows: 1\nExample 2. localdatetime\nParsing a LOCAL DATETIME using the ordinal date format:\nQuery\nRETURN localdatetime('2015185T19:32:24') AS theLocalDateTime\nResult\ntheLocalDateTime\n2015-07-04T19:32:24\nRows: 1\nExample 3. date\nParsing a DATE using the week date format:\nQuery\nRETURN date('+2015-W13-4') AS theDate\nResult\ntheDate\n2015-03-26\nRows: 1\nExample 4. time\nParsing a ZONED TIME:\nQuery\nRETURN time('125035.556+0100') AS theTime\nResult\ntheTime\n12:50:35.556000000+01:00\nRows: 1\nExample 5. localtime\nParsing a LOCAL TIME:\nQuery\nRETURN localtime('12:50:35.556') AS theLocalTime\nResult\ntheLocalTime\n12:50:35.556000000\nRows: 1\nExample 6. date\nThe following query shows how to get the components of a DATE value:\nQuery\nWITH date({year: 1984, month: 10, day: 11}) AS d\nRETURN d.year, d.quarter, d.month, d.week, d.weekYear, d.day, d.ordinalDay, d.dayOfWeek, d.dayOfQuarter\nResult\nd.year d.quarter d.month d.week d.weekYear d.day d.ordinalDay d.dayOfWeek d.dayOfQuarter\n1984\n4\n10\n41\n1984\n11\n285\n4\n11\nRows: 1\nExample 7. datetime\nThe following query shows how to get the date-related components of a ZONED DATETIME value:\nQuery\nWITH datetime({\n  year: 1984, month: 11, day: 11,\n  hour: 12, minute: 31, second: 14, nanosecond: 645876123,\n  timezone: 'Europe/Stockholm'\n}) AS d\nRETURN d.year, d.quarter, d.month, d.week, d.weekYear, d.day, d.ordinalDay, d.dayOfWeek, d.dayOfQuarter\nResult\nd.year d.quarter d.month d.week d.weekYear d.day d.ordinalDay d.dayOfWeek d.dayOfQuarter\n1984\n4\n11\n45\n1984\n11\n316\n7\n42\nRows: 1\nExample 8. datetime\nThe following query shows how to get the time-related components of a ZONED DATETIME value:\nQuery\nWITH datetime({\n  year: 1984, month: 11, day: 11,\n  hour: 12, minute: 31, second: 14, nanosecond: 645876123,\n  timezone: 'Europe/Stockholm'\n}) AS d\nRETURN d.hour, d.minute, d.second, d.millisecond, d.microsecond, d.nanosecond\nResult\nd.hour d.minute d.second d.millisecond d.microsecond d.nanosecond\n12\n31\n14\n645\n645876\n645876123\nRows: 1\nExample 9. datetime\nThe following query shows how to get the epoch time and timezone-related components of a ZONED DATETIME value:\nQuery\nWITH datetime({\n  year: 1984, month: 11, day: 11,\n  hour: 12, minute: 31, second: 14, nanosecond: 645876123,\n  timezone: 'Europe/Stockholm'\n}) AS d\nRETURN d.timezone, d.offset, d.offsetMinutes, d.epochSeconds, d.epochMillis\nResult\nd.timezone d.offset d.offsetMinutes d.epochSeconds d.epochMillis\n\"Europe/Stockholm\"\n\"+01:00\"\n60\n469020674\n469020674645\nRows: 1\nExample 10. date.truncate\nGet the first day of the current year:\nQuery\nRETURN date.truncate('year') AS day\nResult\nday\n2022-01-01\nRows: 1\nExample 11. date.truncate\nGet the date of the Thursday in the week of a specific date:\nQuery\nRETURN date.truncate('week', date('2019-10-01'), {dayOfWeek: 4}) AS thursday\nResult\nthursday\n2019-10-03\nRows: 1\nDurations\nSpecifying durations\nA DURATION represents a temporal amount, capturing the difference in time between two instants, and can be negative.\nThe specification of a DURATION is prefixed with a P, and can use either a unit-based form or a date-and-time-based form:\nUnit-based form: P[nY][nM][nW][nD][T[nH][nM][nS]]\nThe square brackets ([]) denote an optional component (components with a zero value may be omitted).\nThe n denotes a numeric value within the bounds of a 64-bit integer.\nThe value of the last\u2009\u2014\u2009and smallest\u2009\u2014\u2009component may contain a decimal fraction.\nEach component must be suffixed by a component identifier denoting the unit.\nThe unit-based form uses M as a suffix for both months and minutes. Therefore, time parts must always be preceded with T, even when no components of the date part are given.\nThe maximum total length of a duration is bounded by the number of seconds that can be held in a 64-bit integer.\nDate-and-time-based form: P<date>T<time>.\nUnlike the unit-based form, this form requires each component to be within the bounds of a valid LOCAL DATETIME.\nThe following table lists the component identifiers for the unit-based form:\nComponent identifier Description Comments\nY\nYears\nM\nMonths\nMust be specified before T.\nW\nWeeks\nD\nDays\nH\nHours\nM\nMinutes\nMust be specified after T.\nS\nSeconds\nComponents of durations\nA DURATION can have several components, each categorized into Months, Days, and Seconds groups.\nComponents of DURATION values are truncated within their component groups as follows:\nFirst order DURATION components\nComponent Group Component Description Type Details\nMonths\nduration.years\nThe total number of years.\nINTEGER\nEach set of 4 quarters is counted as 1 year; each set of 12 months is counted as 1 year.\nduration.quarters\nThe total number of quarters.\nINTEGER\nEach year is counted as 4 quarters; each set of 3 months is counted as 1 quarter.\nduration.months\nThe total number of months.\nINTEGER\nEach year is counted as 12 months; each_quarter_ is counted as 3 months.\nDays\nduration.weeks\nThe total number of weeks.\nINTEGER\nEach set of 7 days is counted as 1 week.\nduration.days\nThe total number of days.\nINTEGER\nEach week is counted as 7 days.\nSeconds\nduration.hours\nThe total number of hours.\nINTEGER\nEach set of 60 minutes is counted as 1 hour; each set of 3600 seconds is counted as 1 hour.\nduration.minutes\nThe total number of minutes.\nINTEGER\nEach hour is counted as 60 minutes; each set of 60 seconds is counted as 1 minute.\nduration.seconds\nThe total number of seconds.\nINTEGER\nEach hour is counted as 3600 seconds; each minute is counted as 60 seconds.\nduration.milliseconds\nThe total number of milliseconds\nINTEGER\nEach set of 1000 milliseconds is counted as 1 second.\nduration.microseconds\nThe total number of microseconds.\nINTEGER\nEach millisecond is counted as 1000 microseconds.\nduration.nanoseconds\nThe total number of nanoseconds.\nINTEGER\nEach microsecond is counted as 1000 nanoseconds.\nPlease note that:\nCypher uses UTC-SLS when handling leap seconds.\nThere are not always 24 hours in 1 day; when switching to/from daylight savings time, a day can have 23 or 25 hours.\nThere are not always the same number of days in a month.\nDue to leap years, there are not always the same number of days in a year.\nIt is also possible to access the second order components of a component group bounded by the first order component of the group:\nSecond order DURATION components\nComponent Component Group Description Type\nduration.quartersOfYear\nMonths\nThe number of quarters in the group that do not make a whole year.\nINTEGER\nduration.monthsOfYear\nMonths\nThe number of months in the group that do not make a whole year.\nINTEGER\nduration.monthsOfQuarter\nMonths\nThe number of months in the group that do not make a whole quarter.\nINTEGER\nduration.daysOfWeek\nDays\nThe number of days in the group that do not make a whole week.\nINTEGER\nduration.minutesOfHour\nSeconds\nThe number of minutes in the group that do not make a whole hour.\nINTEGER\nduration.secondsOfMinute\nSeconds\nThe number of seconds in the group that do not make a whole minute.\nINTEGER\nduration.millisecondsOfSecond\nSeconds\nThe number of milliseconds in the group that do not make a whole second.\nINTEGER\nduration.microsecondsOfSecond\nSeconds\nThe number of microseconds in the group that do not make a whole second.\nINTEGER\nduration.nanosecondsOfSecond\nSeconds\nThe number of nanoseconds in the group that do not make a whole second\nINTEGER\nExamples\nBelow are examples of parsing durations using the duration() function. More information can be found here.\nExample 12. Return a duration of 14 days, 16 hours, and 12 minutes\nQuery\nRETURN duration('P14DT16H12M') AS theDuration\nResult\ntheDuration\nP14DT16H12M\nRows: 1\nExample 13. Return a duration of 5 months, 1 day, and 12 hours\nQuery\nRETURN duration('P5M1.5D') AS theDuration\nResult\ntheDuration\nP5M1DT12H\nRows: 1\nExample 14. Return a duration of 45 seconds\nQuery\nRETURN duration('PT0.75M') AS theDuration\nResult\ntheDuration\nPT45S\nRows: 1\nExample 15. Return a duration of 2 weeks, 3 days, and 12 hours\nQuery\nRETURN duration('P2.5W') AS theDuration\nResult\ntheDuration\nP17DT12H\nRows: 1\nExample 16. Get the month-based components of a DURATION value\nQuery\nWITH duration({years: 1, months: 5, days: 111, minutes: 42}) AS d\nRETURN d.years, d.quarters, d.quartersOfYear, d.months, d.monthsOfYear, d.monthsOfQuarter\nResult\nd.years d.quarters d.quartersOfYear d.months d.monthsOfYear d.monthsOfQuarter\n1\n5\n1\n17\n5\n2\nRows: 1\nd.quarters has a value of 5 because the year of the duration has four quarters and there is another quarter in the five months. d.months has a value of 17 because it adds the 12 months in the year of the duration to the five months. d.quartersOfYear is the remaining quarter, counting towards the next full year. Similarly, d.monthsOfYear and d.monthsOfQuarter count towards the next full year and quarter respectively. See tables First order DURATION components and Second order DURATION components in Components of durations.\nExample 17. Get the days-based components of a DURATION value\nQuery\nWITH duration({months: 5, days: 25, hours: 1}) AS d\nRETURN d.weeks, d.days, d.daysOfWeek\nResult\nd.weeks d.days d.daysOfWeek\n3\n25\n4\nRows: 1\nd.weeks has a value of 3 because the 25 days from the query are three full weeks (or 21 days). d.daysOfWeek are the remaining days, counting towards the next full week. See tables First order DURATION components and Second order DURATION components in Components of durations.\nExample 18. Get the first order seconds-based components of a DURATION value\nQuery\nWITH duration({\n  years: 1, months:1, days:1, hours: 1,\n  minutes: 1, seconds: 1, nanoseconds: 111111111\n}) AS d\nRETURN d.hours, d.minutes, d.seconds, d.milliseconds, d.microseconds, d.nanoseconds\nResult\nd.hours d.minutes d.seconds d.milliseconds d.microseconds d.nanoseconds\n1\n61\n3661\n3661111\n3661111111\n3661111111111\nRows: 1\nd.minutes is the sum of 60 minutes of the hour and the one minute from the query as both duration.hours and duration.minutes are both seconds-based components. Similarly, d.seconds, d.milliseconds, d.microseconds and d.nanoseconds are sum values of the relevant seconds-based components from the query.\nd.hours does not take the day from the query into account because duration.days is a days-based component.\nSee table First order DURATION components in Components of durations.\nExample 19. Get the second order seconds-based components of a DURATION value\nQuery\nWITH duration({\n  years: 1, months:1, days:1,\n  hours: 1, minutes: 1, seconds: 1, nanoseconds: 111111111\n}) AS d\nRETURN d.minutesOfHour, d.secondsOfMinute, d.millisecondsOfSecond, d.microsecondsOfSecond, d.nanosecondsOfSecond\nResult\nd.minutesOfHour d.secondsOfMinute d.millisecondsOfSecond d.microsecondsOfSecond d.nanosecondsOfSecond\n1\n1\n111\n111111\n111111111\nRows: 1\nThe returned values all count towards the next full hour, minute or second respectively. For example, d.microsecondsOfSecond has a value of 111111 because it is the 111111111 nanoseconds from the query in microseconds (rounded down) but it is not another full second.\nSee table Second order DURATION components in Components of durations.\nExample 20. Create a duration representing 1.5 days\nQuery\nRETURN duration({days: 1, hours: 12}) AS theDuration\nResult\ntheDuration\nP1DT12H\nRows: 1\nExample 21. Compute the DURATION between two temporal instants\nQuery\nRETURN duration.between(date('1984-10-11'), date('2015-06-24')) AS theDuration\nResult\ntheDuration\nP30Y8M13D\nRows: 1\nExample 22. Compute the number of days between two DATE values\nQuery\nRETURN duration.inDays(date('2014-10-11'), date('2015-08-06')) AS theDuration\nResult\ntheDuration\nP299D\nRows: 1\nExample 23. Get the DATE of the last day of the next month\nQuery\nRETURN date.truncate('month', date() + duration('P2M')) - duration('P1D') AS lastDay\nResult\nlastDay\n2022-07-31\nRows: 1\nExample 24. Add a DURATION to a DATE\nQuery\nRETURN time('13:42:19') + duration({days: 1, hours: 12}) AS theTime\nResult\ntheTime\n01:42:19.000000000+00:00\nRows: 1\nExample 25. Add two DURATION values\nQuery\nRETURN duration({days: 2, hours: 7}) + duration({months: 1, hours: 18}) AS theDuration\nResult\ntheDuration\nP1M2DT25H\nRows: 1\nExample 26. Multiply a DURATION by a number\nQuery\nRETURN duration({hours: 5, minutes: 21}) * 14 AS theDuration\nResult\ntheDuration\nPT74H54M\nRows: 1\nExample 27. Divide a DURATION by a number\nQuery\nRETURN duration({hours: 3, minutes: 16}) / 2 AS theDuration\nResult\ntheDuration\nPT1H38M\nRows: 1\nExample 28. Examine whether two instants are less than one day apart\nQuery\nWITH\n  datetime('2015-07-21T21:40:32.142+0100') AS date1,\n  datetime('2015-07-21T17:12:56.333+0100') AS date2\nRETURN\nCASE\n  WHEN date1 < date2 THEN date1 + duration(\"P1D\") > date2\n  ELSE date2 + duration(\"P1D\") > date1\nEND AS lessThanOneDayApart\nResult\nlessThanOneDayApart\ntrue\nRows: 1\nExample 29. Return the abbreviated name of the current month\nQuery\nRETURN [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"][date().month-1] AS month\nResult\nmonth\n\"Jun\"\nRows: 1\nTemporal indexing\nAll temporal types can be indexed, and thereby support exact lookups for equality predicates. Indexes for temporal instant types additionally support range lookups.\n1. This is in accordance with the Gregorian calendar; i.e. years AD/CE start at year 1, and the year before that (year 1 BC/BCE) is 0, while year 2 BCE is -1 etc.\n2. The first week of any year is the week that contains the first Thursday of the year, and thus always contains January 4.\n3. For dates from December 29, this could be the next year, and for dates until January 3 this could be the previous year, depending on how week 1 begins.\n4. Cypher does not support leap seconds; UTC-SLS (UTC with Smoothed Leap Seconds) is used to manage the difference in time between UTC and TAI (International Atomic Time).\n5. The expression datetime().epochMillis returns the equivalent value of the timestamp() function.\n6. For the nanosecond part of the epoch offset, the regular nanosecond component (instant.nanosecond) can be used.\nProperty, structural, and constructed values\nSpatial values", "embeddings": [-0.010136034339666367, 0.054246433079242706, 0.005301472265273333, -0.023583289235830307, 0.010657748207449913, -0.0017530659679323435, -0.07010260969400406, -0.018014688044786453, 0.06431150436401367, -0.017704280093312263, -0.047112759202718735, -0.03705693408846855, -0.010619965381920338, 0.11225217580795288, 0.029932504519820213, -0.04343612492084503, -0.03485307842493057, -0.020388269796967506, 0.00890337023884058, -0.02224871702492237, 0.03589797019958496, -0.0009932833490893245, -0.007676591631025076, -0.01647047884762287, -0.016324231401085854, -0.02568565309047699, 0.0025118484627455473, 0.013118628412485123, 0.07642817497253418, 0.027677783742547035, -0.04347255080938339, 0.11010481417179108, 0.008529996499419212, 0.015889786183834076, -0.12110745906829834, 0.00901011936366558, 0.026086287572979927, 0.04487123712897301, -0.03968766704201698, -0.030480515211820602, 0.0667123943567276, -0.048441480845212936, 0.017856180667877197, 0.053812459111213684, -0.011349888518452644, -0.007310793735086918, -0.008781746961176395, -0.048757754266262054, -0.079686239361763, 0.02018692158162594, -0.030523277819156647, 0.02487756311893463, 0.0029738438315689564, 0.03503314033150673, 0.060085147619247437, 0.08808453381061554, -0.06662226468324661, 0.0235053151845932, -0.019347770139575005, -0.005160516127943993, -0.0029307352378964424, -0.01272721216082573, -0.05113532766699791, -0.05537547543644905, 0.020388606935739517, 0.03632712364196777, -0.0011889849556609988, 0.01997413858771324, 0.04879830405116081, -0.01511260773986578, -0.015175987035036087, 0.015561926178634167, -0.10181976109743118, -0.00010889943951042369, -0.06290096044540405, 0.09269591420888901, 0.1119077280163765, -0.025202419608831406, -0.036139313131570816, -0.07544585317373276, 0.04094129428267479, 0.05408955365419388, -0.0296919047832489, -0.01090502180159092, -0.014926438219845295, 0.01574651338160038, 0.025707632303237915, 0.09154979884624481, -0.021760592237114906, 0.08722928166389465, 0.04111207649111748, -0.003589307889342308, 0.005130833480507135, -0.0430581159889698, 0.0038472770247608423, -0.0527927465736866, 0.0920417532324791, 0.08856099098920822, 0.1297169327735901, -0.041222698986530304, 0.04399367421865463, -0.06784572452306747, -0.0820765346288681, 0.03333264961838722, 0.0885978639125824, -0.04978236183524132, -0.04200325161218643, 0.029913412407040596, -0.04172735661268234, 0.09069627523422241, -0.07560508698225021, -0.012225671671330929, -0.03689185157418251, -0.11312641203403473, -0.0030362175311893225, 0.058723874390125275, -0.0231613852083683, -0.0010508820414543152, 0.0518154576420784, -0.017147550359368324, -0.002604172332212329, 0.009120127186179161, -0.041863106191158295, 0.014560573734343052, 0.012945963069796562, 0.020099680870771408, -0.0007553949253633618, 5.715421041642954e-33, -0.05208350345492363, -0.09448406845331192, 0.03369416669011116, 0.001062427763827145, -0.0658000111579895, 0.090840183198452, -0.046727780252695084, -0.06910794973373413, 0.00021474853565450758, -0.041417378932237625, -0.07978453487157822, 0.06681603938341141, -0.037281833589076996, -0.032396189868450165, 0.031642116606235504, 0.009471687488257885, 0.07069584727287292, -0.009365423582494259, 0.01249408908188343, 0.0026224630419164896, 0.04956236854195595, -0.016879746690392494, -0.074995256960392, 0.011900355108082294, 0.10027609765529633, -0.021135874092578888, -0.015547222457826138, 0.01085644494742155, -0.04663923382759094, -0.024068977683782578, -0.08332517743110657, -0.036630988121032715, -0.05886733531951904, 0.056162428110837936, 0.09790566563606262, -0.0050596497021615505, 0.034880854189395905, 0.015819337218999863, -0.00036146945785731077, -0.1470773071050644, -0.05470169708132744, 0.008629211224615574, -0.0519014373421669, 0.016585025936365128, -0.010157993994653225, -0.09791874140501022, -0.03289545699954033, 0.027064699679613113, -0.021697983145713806, 0.03846695274114609, 0.027782995253801346, 0.08380580693483353, 0.030430328100919724, -0.09998093545436859, -0.07685144990682602, 0.036382149904966354, 0.09519104659557343, 0.02693215012550354, -0.10574750602245331, 0.08491377532482147, 0.031621143221855164, -0.003328679595142603, 0.037833813577890396, -0.05910209193825722, 0.01917073503136635, 0.06626465171575546, -0.04006272926926613, 0.004468987230211496, 0.024214670062065125, 0.03811372444033623, 0.02708040177822113, 0.07057517021894455, 0.0910506621003151, -0.015763957053422928, 0.001873012981377542, -0.06614839285612106, 0.05880143865942955, -0.0353817418217659, -0.016561228781938553, 0.06453058123588562, -0.06696922332048416, -0.05847574770450592, 0.0009430061327293515, 0.03932257369160652, 0.04861990734934807, -0.02541445381939411, 0.06613165140151978, 0.03177539259195328, 0.04203907772898674, -0.05747305601835251, -0.006130356341600418, -0.01692737080156803, 0.027594545856118202, 0.02006034553050995, -0.03516080230474472, -6.40054249565637e-33, 0.039930764585733414, 0.0008202717290259898, -0.06192002072930336, 0.016920294612646103, 0.0418892577290535, -0.00516655296087265, -0.06114185228943825, 0.06304057687520981, -0.01425087545067072, -0.022305980324745178, 0.02381196990609169, -0.0514519140124321, 0.016389472410082817, -0.029403967782855034, -0.015923701226711273, -0.007420626003295183, -0.02247547172009945, -0.15547898411750793, -0.0018053835956379771, 0.075679711997509, 0.006122017279267311, -0.031091855838894844, -0.07292988151311874, 0.039885204285383224, -0.0088289650157094, -0.03430945798754692, 0.08630292862653732, 0.013197180815041065, -0.09151443094015121, 0.0019681416451931, -0.019521139562129974, -0.07988563179969788, -0.008648203685879707, -0.004512563347816467, -0.011145934462547302, -0.07667738944292068, 0.04048788547515869, -0.09403295069932938, 0.016787495464086533, -0.021564029157161713, 0.00034460259485058486, 0.03327270224690437, -0.03590753301978111, 0.01951049268245697, -0.019014200195670128, 0.10476845502853394, 0.023230241611599922, 0.06427089124917984, 0.029035022482275963, 0.016230598092079163, 0.06507428735494614, 0.025236396118998528, -0.005844566505402327, 0.06465189903974533, 0.037853263318538666, -0.04147769510746002, -0.01290220394730568, -0.0038368995301425457, 0.07232547551393509, 0.01083168014883995, -0.04138891026377678, -0.0868375226855278, -0.017918605357408524, 0.004946197383105755, 0.03536120429635048, -0.029338734224438667, 0.009149410761892796, -0.07206801325082779, -0.060717809945344925, -0.06059136986732483, 0.11343898624181747, 0.08341021835803986, -0.0886913388967514, -0.0291737113147974, 0.00783650204539299, -0.029155390337109566, -0.015759175643324852, 0.021819429472088814, -0.02119992859661579, -0.035868678241968155, -0.04745188727974892, 0.047997139394283295, 0.046086784452199936, 0.05037099868059158, -0.08165799081325531, 0.07568646967411041, -0.0030342121608555317, 0.0987560898065567, -0.02244793064892292, -0.007590088061988354, 0.005928015802055597, 0.06325239688158035, -0.14138442277908325, 0.11293239891529083, -0.0719466283917427, -4.663334962629051e-08, 0.011277486570179462, -0.006928911432623863, -0.05581795424222946, -0.0015695940237492323, -0.011748219840228558, -0.005553776398301125, 0.05113754794001579, -0.018675588071346283, 0.07828706502914429, 0.0685301423072815, 0.09321119636297226, -0.01265935879200697, 0.014745781198143959, -0.09788524359464645, 0.023291826248168945, -0.004488302394747734, 0.05303868651390076, -0.068316750228405, 3.272347748861648e-05, 0.040654607117176056, -0.006373362150043249, 0.014282526448369026, -0.09944809228181839, 0.005711323581635952, -0.03687791898846626, 4.154556881985627e-05, -0.033477988094091415, 0.15448947250843048, 0.09750772267580032, -0.036124736070632935, 0.031259745359420776, 0.05684436112642288, -0.0010164444101974368, 0.0399886779487133, -0.04826907068490982, -0.05458170175552368, -0.01760093867778778, 0.06907592713832855, -0.012238813564181328, 0.11589964479207993, -0.0016232674242928624, -0.0331534668803215, -0.1325177103281021, 0.0031901970505714417, -0.039328210055828094, -0.017395833507180214, -0.037451278418302536, -0.0649619922041893, 0.03763030096888542, 0.044088251888751984, -0.015020908787846565, 0.02259116806089878, 0.01938542351126671, 0.00447307201102376, 0.03849949687719345, 0.0012761518592014909, 0.014277813024818897, -0.028685662895441055, 0.06669086217880249, -0.03053007274866104, -0.001169918687082827, -0.04900948330760002, -0.026036718860268593, 0.0058769118040800095], "keywords": ["utc", "time", "daylight"], "redirects": []}, "https://neo4j.com/docs/cypher-manual/current/functions/temporal": {"links": [], "text": null, "embeddings": [], "keywords": [], "redirects": ["https://neo4j.com/docs/cypher-manual/5/functions/temporal"]}, "https://neo4j.com/docs/cypher-manual/5/functions/temporal": {"links": ["https://neo4j.com/docs/cypher-manual/5/values-and-types/temporal", "https://neo4j.registration.goldcast.io/events/03805ea9-fe3a-4cac-8c15-aa622666531a", "https://neo4j.com/docs/cypher-manual/5/syntax/operators", "https://neo4j.com/docs/cypher-manual/5/functions/temporal/duration", "https://neo4j.com/docs/cypher-manual/5/functions/string"], "text": "Temporal functions - instant types\nTemporal functions allow for the creation and manipulation of values for each temporal type\u2009\u2014\u2009DATE, ZONED TIME, LOCAL TIME, ZONED DATETIME, and LOCAL DATETIME.\nSee also Temporal (Date/Time) values and Temporal operators.\nTemporal instant types\nAn overview of temporal instant type creation\nEach function bears the same name as the type, and construct the type they correspond to in one of four ways:\nCapturing the current time.\nComposing the components of the type.\nParsing a STRING representation of the temporal value.\nSelecting and composing components from another temporal value by\neither combining temporal values (such as combining a DATE with a ZONED TIME to create a ZONED DATETIME), or\nselecting parts from a temporal value (such as selecting the DATE from a ZONED DATETIME); the extractors\u2009\u2014\u2009groups of components which can be selected\u2009\u2014\u2009are:\ndate\u2009\u2014\u2009contains all components for a DATE (conceptually year, month and day).\ntime\u2009\u2014\u2009contains all components for a ZONED TIME (hour, minute, second, and sub-seconds; namely millisecond, microsecond and nanosecond). If the type being created and the type from which the time component is being selected both contain timezone (and a timezone is not explicitly specified) the timezone is also selected.\ndatetime\u2009\u2014\u2009selects all components, and is useful for overriding specific components. Analogously to time, if the type being created and the type from which the time component is being selected both contain timezone (and a timezone is not explicitly specified) the timezone is also selected.\nIn effect, this allows for the conversion between different temporal types, and allowing for 'missing' components to be specified.\nTable 1. Temporal instant type creation functions\nFunction Date Time LocalTime DateTime LocalDateTime\nGetting the current value.\nX\nX\nX\nX\nX\nCreating a calendar-based (Year-Month-Day) value.\nX\nX\nX\nCreating a week-based (Year-Week-Day) value.\nX\nX\nX\nCreating a quarter-based (Year-Quarter-Day) value.\nX\nX\nX\nCreating an ordinal (Year-Day) value.\nX\nX\nX\nCreating a value from time components.\nX\nX\nCreating a value from other temporal values using extractors (i.e. converting between different types).\nX\nX\nX\nX\nX\nCreating a value from a STRING.\nX\nX\nX\nX\nX\nCreating a value from a timestamp.\nX\nAll the temporal instant types\u2009\u2014\u2009including those that do not contain time zone information support such as DATE, LOCAL TIME and ZONED DATETIME\u2009\u2014\u2009allow for a time zone to specified for the functions that retrieve the current instant. This allows for the retrieval of the current instant in the specified time zone.\nControlling which clock to use\nThe functions which create temporal instant values based on the current instant use the statement clock as default. However, there are three different clocks available for more fine-grained control:\ntransaction: The same instant is produced for each invocation within the same transaction. A different time may be produced for different transactions.\nstatement: The same instant is produced for each invocation within the same statement. A different time may be produced for different statements within the same transaction.\nrealtime: The instant produced will be the live clock of the system.\nThe following table lists the different sub-functions for specifying the clock to be used when creating the current temporal instant value:\nType default transaction statement realtime\nDate\ndate()\ndate.transaction()\ndate.statement()\ndate.realtime()\nTime\ntime()\ntime.transaction()\ntime.statement()\ntime.realtime()\nLocalTime\nlocaltime()\nlocaltime.transaction()\nlocaltime.statement()\nlocaltime.realtime()\nDateTime\ndatetime()\ndatetime.transaction()\ndatetime.statement()\ndatetime.realtime()\nLocalDateTime\nlocaldatetime()\nlocaldatetime.transaction()\nlocaldatetime.statement()\nlocaldatetime.realtime()\nTruncating temporal values\nA temporal instant value can be created by truncating another temporal instant value at the nearest preceding point in time at a specified component boundary (namely, a truncation unit). A temporal instant value created in this way will have all components which are smaller than the specified truncation unit set to their default values.\nIt is possible to supplement the truncated value by providing a map containing components which are smaller than the truncation unit. This will have the effect of overriding the default values which would otherwise have been set for these smaller components.\nThe following truncation units are supported:\nmillennium: Select the temporal instant corresponding to the millenium of the given instant.\ncentury: Select the temporal instant corresponding to the century of the given instant.\ndecade: Select the temporal instant corresponding to the decade of the given instant.\nyear: Select the temporal instant corresponding to the year of the given instant.\nweekYear: Select the temporal instant corresponding to the first day of the first week of the week-year of the given instant.\nquarter: Select the temporal instant corresponding to the quarter of the year of the given instant.\nmonth: Select the temporal instant corresponding to the month of the given instant.\nweek: Select the temporal instant corresponding to the week of the given instant.\nday: Select the temporal instant corresponding to the day of the given instant.\nhour: Select the temporal instant corresponding to the hour of the given instant.\nminute: Select the temporal instant corresponding to the minute of the given instant.\nsecond: Select the temporal instant corresponding to the second of the given instant.\nmillisecond: Select the temporal instant corresponding to the millisecond of the given instant.\nmicrosecond: Select the temporal instant corresponding to the microsecond of the given instant.\nThe following table lists the supported truncation units and the corresponding sub-functions:\nTruncation unit Date Time LocalTime DateTime LocalDateTime\nmillennium\ndate.truncate('millennium', input)\ndatetime.truncate('millennium', input)\nlocaldatetime.truncate('millennium', input)\ncentury\ndate.truncate('century', input)\ndatetime.truncate('century', input)\nlocaldatetime.truncate('century', input)\ndecade\ndate.truncate('decade', input)\ndatetime.truncate('decade', input)\nlocaldatetime.truncate('decade', input)\nyear\ndate.truncate('year', input)\ndatetime.truncate('year', input)\nlocaldatetime.truncate('year', input)\nweekYear\ndate.truncate('weekYear', input)\ndatetime.truncate('weekYear', input)\nlocaldatetime.truncate('weekYear', input)\nquarter\ndate.truncate('quarter', input)\ndatetime.truncate('quarter', input)\nlocaldatetime.truncate('quarter', input)\nmonth\ndate.truncate('month', input)\ndatetime.truncate('month', input)\nlocaldatetime.truncate('month', input)\nweek\ndate.truncate('week', input)\ndatetime.truncate('week', input)\nlocaldatetime.truncate('week', input)\nday\ndate.truncate('day', input)\ntime.truncate('day', input)\nlocaltime.truncate('day', input)\ndatetime.truncate('day', input)\nlocaldatetime.truncate('day', input)\nhour\ntime.truncate('hour', input)\nlocaltime.truncate('hour', input)\ndatetime.truncate('hour', input)\nlocaldatetime.truncate('hour',input)\nminute\ntime.truncate('minute', input)\nlocaltime.truncate('minute', input)\ndatetime.truncate('minute', input)\nlocaldatetime.truncate('minute', input)\nsecond\ntime.truncate('second', input)\nlocaltime.truncate('second', input)\ndatetime.truncate('second', input)\nlocaldatetime.truncate('second', input)\nmillisecond\ntime.truncate('millisecond', input)\nlocaltime.truncate('millisecond', input)\ndatetime.truncate('millisecond', input)\nlocaldatetime.truncate('millisecond', input)\nmicrosecond\ntime.truncate('microsecond', input)\nlocaltime.truncate('microsecond', input)\ndatetime.truncate('microsecond', input)\nlocaldatetime.truncate('microsecond', input)\ndate()\nDetails for using the date() function.\nGetting the current DATE\ndate.transaction()\ndate.statement()\ndate.realtime()\nCreating a calendar (Year-Month-Day) DATE\nCreating a week (Year-Week-Day) DATE\nCreating a quarter (Year-Quarter-Day) DATE\nCreating an ordinal (Year-Day) DATE\nCreating a DATE from a STRING\nCreating a DATE using other temporal values as components\nTruncating a DATE\nGetting the current DATE\ndate() returns the current DATE value. If no time zone parameter is specified, the local time zone will be used.\nSyntax:\ndate([{timezone}])\nReturns:\nDATE\nArguments:\nName Description\nA single map consisting of the following:\ntimezone\nA string expression that represents the time zone.\nConsiderations:\nIf no parameters are provided, date() must be invoked (date({}) is invalid).\nExample 1. date()\nQuery\nRETURN date() AS currentDate\nThe current date is returned.\nTable 2. Result\ncurrentDate\n2022-06-14\nRows: 1\nExample 2. date()\nQuery\nRETURN date({timezone: 'America/Los Angeles'}) AS currentDateInLA\nThe current date in California is returned.\nTable 3. Result\ncurrentDateInLA\n2022-06-14\nRows: 1\ndate.transaction()\ndate.transaction() returns the current DATE value using the transaction clock. This value will be the same for each invocation within the same transaction. However, a different value may be produced for different transactions.\nSyntax:\ndate.transaction([{timezone}])\nReturns:\nDATE\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 3. date.transaction()\nQuery\nRETURN date.transaction() AS currentDate\nTable 4. Result\ncurrentDate\n2022-06-14\nRows: 1\ndate.statement()\ndate.statement() returns the current DATE value using the statement clock. This value will be the same for each invocation within the same statement. However, a different value may be produced for different statements within the same transaction.\nSyntax:\ndate.statement([{timezone}])\nReturns:\nDATE\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 4. date.statement()\nQuery\nRETURN date.statement() AS currentDate\nTable 5. Result\ncurrentDate\n2022-06-14\nRows: 1\ndate.realtime()\ndate.realtime() returns the current DATE value using the realtime clock. This value will be the live clock of the system.\nSyntax:\ndate.realtime([{timezone}])\nReturns:\nDATE\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 5. date.realtime()\nQuery\nRETURN date.realtime() AS currentDate\nTable 6. Result\ncurrentDate\n2022-06-14\nRows: 1\nExample 6. date.realtime()\nQuery\nRETURN date.realtime('America/Los Angeles') AS currentDateInLA\nTable 7. Result\ncurrentDateInLA\n2022-06-14\nRows: 1\nCreating a calendar (Year-Month-Day) DATE\ndate() returns a DATE value with the specified year, month and day component values.\nSyntax:\ndate({year [, month, day]})\nReturns:\nDATE\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nmonth\nAn integer between 1 and 12 that specifies the month.\nday\nAn integer between 1 and 31 that specifies the day of the month.\nConsiderations:\nThe day of the month component will default to 1 if day is omitted.\nThe month component will default to 1 if month is omitted.\nIf month is omitted, day must also be omitted.\nExample 7. date()\nQuery\nUNWIND [\ndate({year: 1984, month: 10, day: 11}),\ndate({year: 1984, month: 10}),\ndate({year: 1984})\n] AS theDate\nRETURN theDate\nTable 8. Result\ntheDate\n1984-10-11\n1984-10-01\n1984-01-01\nRows: 3\nCreating a week (Year-Week-Day) DATE\ndate() returns a DATE value with the specified year, week and dayOfWeek component values.\nSyntax:\ndate({year [, week, dayOfWeek]})\nReturns:\nDATE\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nweek\nAn integer between 1 and 53 that specifies the week.\ndayOfWeek\nAn integer between 1 and 7 that specifies the day of the week.\nConsiderations:\nThe day of the week component will default to 1 if dayOfWeek is omitted.\nThe week component will default to 1 if week is omitted.\nIf week is omitted, dayOfWeek must also be omitted.\nExample 8. date()\nQuery\nUNWIND [\ndate({year: 1984, week: 10, dayOfWeek: 3}),\ndate({year: 1984, week: 10}),\ndate({year: 1984})\n] AS theDate\nRETURN theDate\nTable 9. Result\ntheDate\n1984-03-07\n1984-03-05\n1984-01-01\nRows: 3\nCreating a quarter (Year-Quarter-Day) DATE\ndate() returns a DATE value with the specified year, quarter and dayOfQuarter component values.\nSyntax:\ndate({year [, quarter, dayOfQuarter]})\nReturns:\nDATE\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nquarter\nAn integer between 1 and 4 that specifies the quarter.\ndayOfQuarter\nAn integer between 1 and 92 that specifies the day of the quarter.\nConsiderations:\nThe day of the quarter component will default to 1 if dayOfQuarter is omitted.\nThe quarter component will default to 1 if quarter is omitted.\nIf quarter is omitted, dayOfQuarter must also be omitted.\nExample 9. date()\nQuery\nUNWIND [\ndate({year: 1984, quarter: 3, dayOfQuarter: 45}),\ndate({year: 1984, quarter: 3}),\ndate({year: 1984})\n] AS theDate\nRETURN theDate\nTable 10. Result\ntheDate\n1984-08-14\n1984-07-01\n1984-01-01\nRows: 3\nCreating an ordinal (Year-Day) DATE\ndate() returns a DATE value with the specified year and ordinalDay component values.\nSyntax:\ndate({year [, ordinalDay]})\nReturns:\nDATE\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nordinalDay\nAn integer between 1 and 366 that specifies the ordinal day of the year.\nConsiderations:\nThe ordinal day of the year component will default to 1 if ordinalDay is omitted.\nExample 10. date()\nQuery\nUNWIND [\ndate({year: 1984, ordinalDay: 202}),\ndate({year: 1984})\n] AS theDate\nRETURN theDate\nThe date corresponding to 11 February 1984 is returned.\nTable 11. Result\ntheDate\n1984-07-20\n1984-01-01\nRows: 2\nCreating a DATE from a STRING\ndate() returns the DATE value obtained by parsing a STRING representation of a temporal value.\nSyntax:\ndate(temporalValue)\nReturns:\nDATE\nArguments:\nName Description\ntemporalValue\nA STRING representing a temporal value.\nConsiderations:\ntemporalValue must comply with the format defined for dates.\ntemporalValue must denote a valid date; i.e. a temporalValue denoting 30 February 2001 is invalid.\ndate(null) returns null.\nExample 11. date()\nQuery\nUNWIND [\ndate('2015-07-21'),\ndate('2015-07'),\ndate('201507'),\ndate('2015-W30-2'),\ndate('2015202'),\ndate('2015')\n] AS theDate\nRETURN theDate\nTable 12. Result\ntheDate\n2015-07-21\n2015-07-01\n2015-07-01\n2015-07-21\n2015-07-21\n2015-01-01\nRows: 6\nCreating a DATE using other temporal values as components\ndate() returns the DATE value obtained by selecting and composing components from another temporal value. In essence, this allows a ZONED DATETIME or LOCAL DATETIME value to be converted to a DATE, and for \"missing\" components to be provided.\nSyntax:\ndate({date [, year, month, day, week, dayOfWeek, quarter, dayOfQuarter, ordinalDay]})\nReturns:\nDATE\nArguments:\nName Description\nA single map consisting of the following:\ndate\nA DATE value.\nyear\nAn expression consisting of at least four digits that specifies the year.\nmonth\nAn integer between 1 and 12 that specifies the month.\nday\nAn integer between 1 and 31 that specifies the day of the month.\nweek\nAn integer between 1 and 53 that specifies the week.\ndayOfWeek\nAn integer between 1 and 7 that specifies the day of the week.\nquarter\nAn integer between 1 and 4 that specifies the quarter.\ndayOfQuarter\nAn integer between 1 and 92 that specifies the day of the quarter.\nordinalDay\nAn integer between 1 and 366 that specifies the ordinal day of the year.\nConsiderations:\nIf any of the optional parameters are provided, these will override the corresponding components of date.\ndate(dd) may be written instead of date({date: dd}).\nExample 12. date()\nQuery\nUNWIND [\ndate({year: 1984, month: 11, day: 11}),\nlocaldatetime({year: 1984, month: 11, day: 11, hour: 12, minute: 31, second: 14}),\ndatetime({year: 1984, month: 11, day: 11, hour: 12, timezone: '+01:00'})\n] AS dd\nRETURN date({date: dd}) AS dateOnly, date({date: dd, day: 28}) AS dateDay\nTable 13. Result\ndateOnly dateDay\n1984-11-11\n1984-11-28\n1984-11-11\n1984-11-28\n1984-11-11\n1984-11-28\nRows: 3\nTruncating a DATE\ndate.truncate() returns the DATE value obtained by truncating a specified temporal instant value at the nearest preceding point in time at the specified component boundary (which is denoted by the truncation unit passed as a parameter to the function). In other words, the DATE returned will have all components that are smaller than the specified truncation unit set to their default values.\nIt is possible to supplement the truncated value by providing a map containing components which are smaller than the truncation unit. This will have the effect of overriding the default values which would otherwise have been set for these smaller components. For example, day\u2009\u2014\u2009with some value x\u2009\u2014\u2009may be provided when the truncation unit STRING is 'year' in order to ensure the returned value has the day set to x instead of the default day (which is 1).\nSyntax:\ndate.truncate(unit [, temporalInstantValue [, mapOfComponents ] ])\nReturns:\nDATE\nArguments:\nName Description\nunit\nA string expression evaluating to one of the following STRING values: 'millennium', 'century', 'decade', 'year', 'weekYear', 'quarter', 'month', 'week', 'day'.\ntemporalInstantValue\nAn expression of one of the following types: ZONED DATETIME, LOCAL DATETIME, DATE.\nmapOfComponents\nAn expression evaluating to a map containing components smaller than unit.\nConsiderations:\nAny component that is provided in mapOfComponents must be smaller than unit; i.e. if unit STRING is 'day', mapOfComponents cannot contain information pertaining to a month.\nAny component that is not contained in mapOfComponents and which is smaller than unit will be set to its minimal value.\nIf mapOfComponents is not provided, all components of the returned value which are smaller than unit will be set to their default values.\nIf temporalInstantValue is not provided, it will be set to the current date, i.e. date.truncate(unit) is equivalent of date.truncate(unit, date()).\nExample 13. date.truncate()\nQuery\nWITH\n  datetime({\n    year: 2017, month: 11, day: 11,\n    hour: 12, minute: 31, second: 14, nanosecond: 645876123,\n    timezone: '+01:00'\n  }) AS d\nRETURN\n  date.truncate('millennium', d) AS truncMillenium,\n  date.truncate('century', d) AS truncCentury,\n  date.truncate('decade', d) AS truncDecade,\n  date.truncate('year', d, {day: 5}) AS truncYear,\n  date.truncate('weekYear', d) AS truncWeekYear,\n  date.truncate('quarter', d) AS truncQuarter,\n  date.truncate('month', d) AS truncMonth,\n  date.truncate('week', d, {dayOfWeek: 2}) AS truncWeek,\n  date.truncate('day', d) AS truncDay\nTable 14. Result\ntruncMillenium truncCentury truncDecade truncYear truncWeekYear truncQuarter truncMonth truncWeek truncDay\n2000-01-01\n2000-01-01\n2010-01-01\n2017-01-05\n2017-01-02\n2017-10-01\n2017-11-01\n2017-11-07\n2017-11-11\nRows: 1\ndatetime()\nDetails for using the datetime() function.\nGetting the current ZONED DATETIME\ndatetime.transaction()\ndatetime.statement()\ndatetime.realtime()\nCreating a calendar (Year-Month-Day) ZONED DATETIME\nCreating a week (Year-Week-Day) ZONED DATETIME\nCreating a quarter (Year-Quarter-Day) ZONED DATETIME\nCreating an ordinal (Year-Day) ZONED DATETIME\nCreating a ZONED DATETIME from a STRING\nCreating a ZONED DATETIME using other temporal values as components\nCreating a ZONED DATETIME from a timestamp\nTruncating a ZONED DATETIME\nGetting the current ZONED DATETIME\ndatetime() returns the current ZONED DATETIME value. If no time zone parameter is specified, the default time zone will be used.\nSyntax:\ndatetime([{timezone}])\nReturns:\nZONED DATETIME\nArguments:\nName Description\nA single map consisting of the following:\ntimezone\nA string expression that represents the time zone.\nConsiderations:\nIf no parameters are provided, datetime() must be invoked (datetime({}) is invalid).\nExample 14. .datetime()\nQuery\nRETURN datetime() AS currentDateTime\nThe current date and time using the local time zone is returned.\nTable 15. Result\ncurrentDateTime\n2022-06-14T10:02:28.192Z\nRows: 1\nExample 15. .datetime()\nQuery\nRETURN datetime({timezone: 'America/Los Angeles'}) AS currentDateTimeInLA\nThe current date and time of day in California is returned.\nTable 16. Result\ncurrentDateTimeInLA\n2022-06-14T03:02:28.238-07:00[America/Los_Angeles]\nRows: 1\ndatetime.transaction()\ndatetime.transaction() returns the current ZONED DATETIME value using the transaction clock. This value will be the same for each invocation within the same transaction. However, a different value may be produced for different transactions.\nSyntax:\ndatetime.transaction([{timezone}])\nReturns:\nZONED DATETIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 16. datetime.transaction()\nQuery\nRETURN datetime.transaction() AS currentDateTime\nTable 17. Result\ncurrentDateTime\n2022-06-14T10:02:28.290Z\nRows: 1\nExample 17. datetime.transaction()\nQuery\nRETURN datetime.transaction('America/Los Angeles') AS currentDateTimeInLA\nTable 18. Result\ncurrentDateTimeInLA\n2022-06-14T03:02:28.338-07:00[America/Los_Angeles]\nRows: 1\ndatetime.statement()\ndatetime.statement() returns the current ZONED DATETIME value using the statement clock. This value will be the same for each invocation within the same statement. However, a different value may be produced for different statements within the same transaction.\nSyntax:\ndatetime.statement([{timezone}])\nReturns:\nZONED DATETIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 18. datetime.statement()\nQuery\nRETURN datetime.statement() AS currentDateTime\nTable 19. Result\ncurrentDateTime\n2022-06-14T10:02:28.395Z\nRows: 1\ndatetime.realtime()\ndatetime.realtime() returns the current ZONED DATETIME value using the realtime clock. This value will be the live clock of the system.\nSyntax:\ndatetime.realtime([{timezone}])\nReturns:\nZONED DATETIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 19. datetime.realtime()\nQuery\nRETURN datetime.realtime() AS currentDateTime\nTable 20. Result\ncurrentDateTime\n2022-06-14T10:02:28.494444Z\nRows: 1\nCreating a calendar (Year-Month-Day) ZONED DATETIME\ndatetime() returns a ZONED DATETIME value with the specified year, month, day, hour, minute, second, millisecond, microsecond, nanosecond and timezone component values.\nSyntax:\ndatetime({year [, month, day, hour, minute, second, millisecond, microsecond, nanosecond, timezone]})\nReturns:\nZONED DATETIME\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nmonth\nAn integer between 1 and 12 that specifies the month.\nday\nAn integer between 1 and 31 that specifies the day of the month.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\ntimezone\nAn expression that specifies the time zone.\nConsiderations:\nThe month component will default to 1 if month is omitted.\nThe day of the month component will default to 1 if day is omitted.\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nThe timezone component will default to the configured default time zone if timezone is omitted.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set year, month, day, hour, minute, and second may be omitted; i.e. it is possible to specify only year, month and day, but specifying year, month, day and minute is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 20. datetime()\nQuery\nUNWIND [\ndatetime({year: 1984, month: 10, day: 11, hour: 12, minute: 31, second: 14, millisecond: 123, microsecond: 456, nanosecond: 789}),\ndatetime({year: 1984, month: 10, day: 11, hour: 12, minute: 31, second: 14, millisecond: 645, timezone: '+01:00'}),\ndatetime({year: 1984, month: 10, day: 11, hour: 12, minute: 31, second: 14, nanosecond: 645876123, timezone: 'Europe/Stockholm'}),\ndatetime({year: 1984, month: 10, day: 11, hour: 12, minute: 31, second: 14, timezone: '+01:00'}),\ndatetime({year: 1984, month: 10, day: 11, hour: 12, minute: 31, second: 14}),\ndatetime({year: 1984, month: 10, day: 11, hour: 12, minute: 31, timezone: 'Europe/Stockholm'}),\ndatetime({year: 1984, month: 10, day: 11, hour: 12, timezone: '+01:00'}),\ndatetime({year: 1984, month: 10, day: 11, timezone: 'Europe/Stockholm'})\n] AS theDate\nRETURN theDate\nTable 21. Result\ntheDate\n1984-10-11T12:31:14.123456789Z\n1984-10-11T12:31:14.645+01:00\n1984-10-11T12:31:14.645876123+01:00[Europe/Stockholm]\n1984-10-11T12:31:14+01:00\n1984-10-11T12:31:14Z\n1984-10-11T12:31+01:00[Europe/Stockholm]\n1984-10-11T12:00+01:00\n1984-10-11T00:00+01:00[Europe/Stockholm]\nRows: 8\nCreating a week (Year-Week-Day) ZONED DATETIME\ndatetime() returns a ZONED DATETIME value with the specified year, week, dayOfWeek, hour, minute, second, millisecond, microsecond, nanosecond and timezone component values.\nSyntax:\ndatetime({year [, week, dayOfWeek, hour, minute, second, millisecond, microsecond, nanosecond, timezone]})\nReturns:\nZONED DATETIME\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nweek\nAn integer between 1 and 53 that specifies the week.\ndayOfWeek\nAn integer between 1 and 7 that specifies the day of the week.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\ntimezone\nAn expression that specifies the time zone.\nConsiderations:\nThe week component will default to 1 if week is omitted.\nThe day of the week component will default to 1 if dayOfWeek is omitted.\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nThe timezone component will default to the configured default time zone if timezone is omitted.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set year, week, dayOfWeek, hour, minute, and second may be omitted; i.e. it is possible to specify only year, week and dayOfWeek, but specifying year, week, dayOfWeek and minute is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 21. datetime()\nQuery\nUNWIND [\ndatetime({year: 1984, week: 10, dayOfWeek: 3, hour: 12, minute: 31, second: 14, millisecond: 645}),\ndatetime({year: 1984, week: 10, dayOfWeek: 3, hour: 12, minute: 31, second: 14, microsecond: 645876, timezone: '+01:00'}),\ndatetime({year: 1984, week: 10, dayOfWeek: 3, hour: 12, minute: 31, second: 14, nanosecond: 645876123, timezone: 'Europe/Stockholm'}),\ndatetime({year: 1984, week: 10, dayOfWeek: 3, hour: 12, minute: 31, second: 14, timezone: 'Europe/Stockholm'}),\ndatetime({year: 1984, week: 10, dayOfWeek: 3, hour: 12, minute: 31, second: 14}),\ndatetime({year: 1984, week: 10, dayOfWeek: 3, hour: 12, timezone: '+01:00'}),\ndatetime({year: 1984, week: 10, dayOfWeek: 3, timezone: 'Europe/Stockholm'})\n] AS theDate\nRETURN theDate\nTable 22. Result\ntheDate\n1984-03-07T12:31:14.645Z\n1984-03-07T12:31:14.645876+01:00\n1984-03-07T12:31:14.645876123+01:00[Europe/Stockholm]\n1984-03-07T12:31:14+01:00[Europe/Stockholm]\n1984-03-07T12:31:14Z\n1984-03-07T12:00+01:00\n1984-03-07T00:00+01:00[Europe/Stockholm]\nRows: 7\nCreating a quarter (Year-Quarter-Day) ZONED DATETIME\ndatetime() returns a ZONED DATETIME value with the specified year, quarter, dayOfQuarter, hour, minute, second, millisecond, microsecond, nanosecond and timezone component values.\nSyntax:\ndatetime({year [, quarter, dayOfQuarter, hour, minute, second, millisecond, microsecond, nanosecond, timezone]})\nReturns:\nZONED DATETIME\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nquarter\nAn integer between 1 and 4 that specifies the quarter.\ndayOfQuarter\nAn integer between 1 and 92 that specifies the day of the quarter.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\ntimezone\nAn expression that specifies the time zone.\nConsiderations:\nThe quarter component will default to 1 if quarter is omitted.\nThe day of the quarter component will default to 1 if dayOfQuarter is omitted.\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nThe timezone component will default to the configured default time zone if timezone is omitted.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set year, quarter, dayOfQuarter, hour, minute, and second may be omitted; i.e. it is possible to specify only year, quarter and dayOfQuarter, but specifying year, quarter, dayOfQuarter and minute is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 22. datetime()\nQuery\nUNWIND [\ndatetime({year: 1984, quarter: 3, dayOfQuarter: 45, hour: 12, minute: 31, second: 14, microsecond: 645876}),\ndatetime({year: 1984, quarter: 3, dayOfQuarter: 45, hour: 12, minute: 31, second: 14, timezone: '+01:00'}),\ndatetime({year: 1984, quarter: 3, dayOfQuarter: 45, hour: 12, timezone: 'Europe/Stockholm'}),\ndatetime({year: 1984, quarter: 3, dayOfQuarter: 45})\n] AS theDate\nRETURN theDate\nTable 23. Result\ntheDate\n1984-08-14T12:31:14.645876Z\n1984-08-14T12:31:14+01:00\n1984-08-14T12:00+02:00[Europe/Stockholm]\n1984-08-14T00:00Z\nRows: 4\nCreating an ordinal (Year-Day) ZONED DATETIME\ndatetime() returns a ZONED DATETIME value with the specified year, ordinalDay, hour, minute, second, millisecond, microsecond, nanosecond and timezone component values.\nSyntax:\ndatetime({year [, ordinalDay, hour, minute, second, millisecond, microsecond, nanosecond, timezone]})\nReturns:\nZONED DATETIME\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nordinalDay\nAn integer between 1 and 366 that specifies the ordinal day of the year.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\ntimezone\nAn expression that specifies the time zone.\nConsiderations:\nThe ordinal day of the year component will default to 1 if ordinalDay is omitted.\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nThe timezone component will default to the configured default time zone if timezone is omitted.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set year, ordinalDay, hour, minute, and second may be omitted; i.e. it is possible to specify only year and ordinalDay, but specifying year, ordinalDay and minute is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 23. datetime()\nQuery\nUNWIND [\ndatetime({year: 1984, ordinalDay: 202, hour: 12, minute: 31, second: 14, millisecond: 645}),\ndatetime({year: 1984, ordinalDay: 202, hour: 12, minute: 31, second: 14, timezone: '+01:00'}),\ndatetime({year: 1984, ordinalDay: 202, timezone: 'Europe/Stockholm'}),\ndatetime({year: 1984, ordinalDay: 202})\n] AS theDate\nRETURN theDate\nTable 24. Result\ntheDate\n1984-07-20T12:31:14.645Z\n1984-07-20T12:31:14+01:00\n1984-07-20T00:00+02:00[Europe/Stockholm]\n1984-07-20T00:00Z\nRows: 4\nCreating a ZONED DATETIME from a STRING\ndatetime() returns the ZONED DATETIME value obtained by parsing a STRING representation of a temporal value.\nSyntax:\ndatetime(temporalValue)\nReturns:\nZONED DATETIME\nArguments:\nName Description\ntemporalValue\nA STRING representing a temporal value.\nConsiderations:\ntemporalValue must comply with the format defined for dates, times and time zones.\nThe timezone component will default to the configured default time zone if it is omitted.\ntemporalValue must denote a valid date and time; i.e. a temporalValue denoting 30 February 2001 is invalid.\ndatetime(null) returns null.\nExample 24. datetime()\nQuery\nUNWIND [\ndatetime('2015-07-21T21:40:32.142+0100'),\ndatetime('2015-W30-2T214032.142Z'),\ndatetime('2015T214032-0100'),\ndatetime('20150721T21:40-01:30'),\ndatetime('2015-W30T2140-02'),\ndatetime('2015202T21+18:00'),\ndatetime('2015-07-21T21:40:32.142[Europe/London]'),\ndatetime('2015-07-21T21:40:32.142-04[America/New_York]')\n] AS theDate\nRETURN theDate\nTable 25. Result\ntheDate\n2015-07-21T21:40:32.142+01:00\n2015-07-21T21:40:32.142Z\n2015-01-01T21:40:32-01:00\n2015-07-21T21:40-01:30\n2015-07-20T21:40-02:00\n2015-07-21T21:00+18:00\n2015-07-21T21:40:32.142+01:00[Europe/London]\n2015-07-21T21:40:32.142-04:00[America/New_York]\nRows: 8\nCreating a ZONED DATETIME using other temporal values as components\ndatetime() returns the ZONED DATETIME value obtained by selecting and composing components from another temporal value. In essence, this allows a DATE, LOCAL DATETIME, ZONED TIME or LOCAL TIME value to be converted to a ZONED DATETIME, and for \"missing\" components to be provided.\nSyntax:\ndatetime({datetime [, year, ..., timezone]}) | datetime({date [, year, ..., timezone]}) | datetime({time [, year, ..., timezone]}) | datetime({date, time [, year, ..., timezone]})\nReturns:\nZONED DATETIME\nArguments:\nName Description\nA single map consisting of the following:\ndatetime\nA ZONED DATETIME value.\ndate\nA DATE value.\ntime\nA ZONED TIME value.\nyear\nAn expression consisting of at least four digits that specifies the year.\nmonth\nAn integer between 1 and 12 that specifies the month.\nday\nAn integer between 1 and 31 that specifies the day of the month.\nweek\nAn integer between 1 and 53 that specifies the week.\ndayOfWeek\nAn integer between 1 and 7 that specifies the day of the week.\nquarter\nAn integer between 1 and 4 that specifies the quarter.\ndayOfQuarter\nAn integer between 1 and 92 that specifies the day of the quarter.\nordinalDay\nAn integer between 1 and 366 that specifies the ordinal day of the year.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\ntimezone\nAn expression that specifies the time zone.\nConsiderations:\nIf any of the optional parameters are provided, these will override the corresponding components of datetime, date and/or time.\ndatetime(dd) may be written instead of datetime({datetime: dd}).\nSelecting a ZONED TIME or ZONED DATETIME value as the time component also selects its time zone. If a LOCAL TIME or LOCAL DATETIME is selected instead, the default time zone is used. In any case, the time zone can be overridden explicitly.\nSelecting a ZONED DATETIME as the datetime component and overwriting the time zone will adjust the local time to keep the same point in time.\nSelecting a ZONED DATETIME or ZONED TIME as the time component and overwriting the time zone will adjust the local time to keep the same point in time.\nExample 25. datetime()\nThe following query shows the various usages of datetime({date [, year, ..., timezone]}).\nQuery\nWITH date({year: 1984, month: 10, day: 11}) AS dd\nRETURN\n  datetime({date: dd, hour: 10, minute: 10, second: 10}) AS dateHHMMSS,\n  datetime({date: dd, hour: 10, minute: 10, second: 10, timezone:'+05:00'}) AS dateHHMMSSTimezone,\n  datetime({date: dd, day: 28, hour: 10, minute: 10, second: 10}) AS dateDDHHMMSS,\n  datetime({date: dd, day: 28, hour: 10, minute: 10, second: 10, timezone:'Pacific/Honolulu'}) AS dateDDHHMMSSTimezone\nTable 26. Result\ndateHHMMSS dateHHMMSSTimezone dateDDHHMMSS dateDDHHMMSSTimezone\n1984-10-11T10:10:10Z\n1984-10-11T10:10:10+05:00\n1984-10-28T10:10:10Z\n1984-10-28T10:10:10-10:00[Pacific/Honolulu]\nRows: 1\nExample 26. datetime()\nThe following query shows the various usages of datetime({time [, year, \u2026, timezone]}).\nQuery\nWITH time({hour: 12, minute: 31, second: 14, microsecond: 645876, timezone: '+01:00'}) AS tt\nRETURN\n  datetime({year: 1984, month: 10, day: 11, time: tt}) AS YYYYMMDDTime,\n  datetime({year: 1984, month: 10, day: 11, time: tt, timezone:'+05:00'}) AS YYYYMMDDTimeTimezone,\n  datetime({year: 1984, month: 10, day: 11, time: tt, second: 42}) AS YYYYMMDDTimeSS,\n  datetime({year: 1984, month: 10, day: 11, time: tt, second: 42, timezone: 'Pacific/Honolulu'}) AS YYYYMMDDTimeSSTimezone\nTable 27. Result\nYYYYMMDDTime YYYYMMDDTimeTimezone YYYYMMDDTimeSS YYYYMMDDTimeSSTimezone\n1984-10-11T12:31:14.645876+01:00\n1984-10-11T16:31:14.645876+05:00\n1984-10-11T12:31:42.645876+01:00\n1984-10-11T01:31:42.645876-10:00[Pacific/Honolulu]\nRows: 1\nExample 27. datetime()\nThe following query shows the various usages of datetime({date, time [, year, ..., timezone]}); i.e. combining a DATE and a ZONED TIME value to create a single ZONED DATETIME value.\nQuery\nWITH\n  date({year: 1984, month: 10, day: 11}) AS dd,\n  localtime({hour: 12, minute: 31, second: 14, millisecond: 645}) AS tt\nRETURN\n  datetime({date: dd, time: tt}) AS dateTime,\n  datetime({date: dd, time: tt, timezone: '+05:00'}) AS dateTimeTimezone,\n  datetime({date: dd, time: tt, day: 28, second: 42}) AS dateTimeDDSS,\n  datetime({date: dd, time: tt, day: 28, second: 42, timezone: 'Pacific/Honolulu'}) AS dateTimeDDSSTimezone\nTable 28. Result\ndateTime dateTimeTimezone dateTimeDDSS dateTimeDDSSTimezone\n1984-10-11T12:31:14.645Z\n1984-10-11T12:31:14.645+05:00\n1984-10-28T12:31:42.645Z\n1984-10-28T12:31:42.645-10:00[Pacific/Honolulu]\nRows: 1\nExample 28. datetime()\nThe following query shows the various usages of datetime({datetime [, year, ..., timezone]}).\nQuery\nWITH\n  datetime({\n    year: 1984, month: 10, day: 11,\n    hour: 12,\n    timezone: 'Europe/Stockholm'\n  }) AS dd\nRETURN\n  datetime({datetime: dd}) AS dateTime,\n  datetime({datetime: dd, timezone: '+05:00'}) AS dateTimeTimezone,\n  datetime({datetime: dd, day: 28, second: 42}) AS dateTimeDDSS,\n  datetime({datetime: dd, day: 28, second: 42, timezone: 'Pacific/Honolulu'}) AS dateTimeDDSSTimezone\nTable 29. Result\ndateTime dateTimeTimezone dateTimeDDSS dateTimeDDSSTimezone\n1984-10-11T12:00+01:00[Europe/Stockholm]\n1984-10-11T16:00+05:00\n1984-10-28T12:00:42+01:00[Europe/Stockholm]\n1984-10-28T01:00:42-10:00[Pacific/Honolulu]\nRows: 1\nCreating a ZONED DATETIME from a timestamp\ndatetime() returns the ZONED DATETIME value at the specified number of seconds or milliseconds from the UNIX epoch in the UTC time zone.\nConversions to other temporal instant types from UNIX epoch representations can be achieved by transforming a ZONED DATETIME value to one of these types.\nSyntax:\ndatetime({ epochSeconds | epochMillis })\nReturns:\nZONED DATETIME\nArguments:\nName Description\nA single map consisting of the following:\nepochSeconds\nA numeric value representing the number of seconds from the UNIX epoch in the UTC time zone.\nepochMillis\nA numeric value representing the number of milliseconds from the UNIX epoch in the UTC time zone.\nConsiderations:\nepochSeconds/epochMillis may be used in conjunction with nanosecond.\nExample 29. datetime()\nQuery\nRETURN datetime({epochSeconds: timestamp() / 1000, nanosecond: 23}) AS theDate\nTable 30. Result\ntheDate\n2022-06-14T10:02:30.000000023Z\nRows: 1\nExample 30. datetime()\nQuery\nRETURN datetime({epochMillis: 424797300000}) AS theDate\nTable 31. Result\ntheDate\n1983-06-18T15:15Z\nRows: 1\nTruncating a ZONED DATETIME\ndatetime.truncate() returns the ZONED DATETIME value obtained by truncating a specified temporal instant value at the nearest preceding point in time at the specified component boundary (which is denoted by the truncation unit passed as a parameter to the function). In other words, the ZONED DATETIME returned will have all components that are smaller than the specified truncation unit set to their default values.\nIt is possible to supplement the truncated value by providing a map containing components which are smaller than the truncation unit. This will have the effect of overriding the default values which would otherwise have been set for these smaller components. For example, day\u2009\u2014\u2009with some value x\u2009\u2014\u2009may be provided when the truncation unit STRING is 'year' in order to ensure the returned value has the day set to x instead of the default day (which is 1).\nSyntax:\ndatetime.truncate(unit [, temporalInstantValue [, mapOfComponents ] ])\nReturns:\nZONED DATETIME\nArguments:\nName Description\nunit\nA string expression evaluating to one of the following strings: 'millennium', 'century', 'decade', 'year', 'weekYear', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond', 'microsecond'.\ntemporalInstantValue\nAn expression of one of the following types: ZONED DATETIME, LOCAL DATETIME, DATE.\nmapOfComponents\nAn expression evaluating to a map containing components smaller than unit. During truncation, a time zone can be attached or overridden using the key timezone.\nConsiderations:\ntemporalInstantValue cannot be a DATE value if unit is one of: 'hour', 'minute', 'second', 'millisecond', 'microsecond'.\nThe time zone of temporalInstantValue may be overridden; for example, datetime.truncate('minute', input, {timezone: '+0200'}).\nIf temporalInstantValue is one of ZONED TIME, ZONED DATETIME\u2009\u2014\u2009a value with a time zone\u2009\u2014\u2009and the time zone is overridden, no time conversion occurs.\nIf temporalInstantValue is one of LOCAL DATETIME, DATE\u2009\u2014\u2009a value without a time zone\u2009\u2014\u2009and the time zone is not overridden, the configured default time zone will be used.\nAny component that is provided in mapOfComponents must be smaller than unit; i.e. if unit is 'day', mapOfComponents cannot contain information pertaining to a month.\nAny component that is not contained in mapOfComponents and which is smaller than unit will be set to its minimal value.\nIf mapOfComponents is not provided, all components of the returned value which are smaller than unit will be set to their default values.\nIf temporalInstantValue is not provided, it will be set to the current date, time and timezone, i.e. datetime.truncate(unit) is equivalent of datetime.truncate(unit, datetime()).\nExample 31. datetime()\nQuery\nWITH\n  datetime({\n    year:2017, month:11, day:11,\n    hour:12, minute:31, second:14, nanosecond: 645876123,\n    timezone: '+03:00'\n  }) AS d\nRETURN\n  datetime.truncate('millennium', d, {timezone: 'Europe/Stockholm'}) AS truncMillenium,\n  datetime.truncate('year', d, {day: 5}) AS truncYear,\n  datetime.truncate('month', d) AS truncMonth,\n  datetime.truncate('day', d, {millisecond: 2}) AS truncDay,\n  datetime.truncate('hour', d) AS truncHour,\n  datetime.truncate('second', d) AS truncSecond\nTable 32. Result\ntruncMillenium truncYear truncMonth truncDay truncHour truncSecond\n2000-01-01T00:00+01:00[Europe/Stockholm]\n2017-01-05T00:00+03:00\n2017-11-01T00:00+03:00\n2017-11-11T00:00:00.002+03:00\n2017-11-11T12:00+03:00\n2017-11-11T12:31:14+03:00\nRows: 1\nlocaldatetime()\nDetails for using the localdatetime() function.\nGetting the current LOCAL DATETIME\nlocaldatetime.transaction()\nlocaldatetime.statement()\nlocaldatetime.realtime()\nCreating a calendar (Year-Month-Day) LOCAL DATETIME\nCreating a week (Year-Week-Day) LOCAL DATETIME\nCreating a quarter (Year-Quarter-Day) LOCAL DATETIME\nCreating an ordinal (Year-Day) LOCAL DATETIME\nCreating a LOCAL DATETIME from a STRING\nCreating a LOCAL DATETIME using other temporal values as components\nTruncating a LOCAL DATETIME\nGetting the current LOCAL DATETIME\nlocaldatetime() returns the current LOCAL DATETIME value. If no time zone parameter is specified, the local time zone will be used.\nSyntax:\nlocaldatetime([{timezone}])\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\nA single map consisting of the following:\ntimezone\nA string expression that represents the time zone.\nConsiderations:\nIf no parameters are provided, localdatetime() must be invoked (localdatetime({}) is invalid).\nExample 32. localdatetime()\nQuery\nRETURN localdatetime() AS now\nThe current local date and time (i.e. in the local time zone) is returned.\nTable 33. Result\nnow\n2022-06-14T10:02:30.447\nRows: 1\nExample 33. localdatetime()\nQuery\nRETURN localdatetime({timezone: 'America/Los Angeles'}) AS now\nThe current local date and time in California is returned.\nTable 34. Result\nnow\n2022-06-14T03:02:30.482\nRows: 1\nlocaldatetime.transaction()\nlocaldatetime.transaction() returns the current LOCAL DATETIME value using the transaction clock. This value will be the same for each invocation within the same transaction. However, a different value may be produced for different transactions.\nSyntax:\nlocaldatetime.transaction([{timezone}])\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 34. localdatetime.transaction()\nQuery\nRETURN localdatetime.transaction() AS now\nTable 35. Result\nnow\n2022-06-14T10:02:30.532\nRows: 1\nlocaldatetime.statement()\nlocaldatetime.statement() returns the current LOCAL DATETIME value using the statement clock. This value will be the same for each invocation within the same statement. However, a different value may be produced for different statements within the same transaction.\nSyntax:\nlocaldatetime.statement([{timezone}])\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 35. localdatetime.statement()\nQuery\nRETURN localdatetime.statement() AS now\nTable 36. Result\nnow\n2022-06-14T10:02:30.570\nRows: 1\nlocaldatetime.realtime()\nlocaldatetime.realtime() returns the current LOCAL DATETIME value using the realtime clock. This value will be the live clock of the system.\nSyntax:\nlocaldatetime.realtime([{timezone}])\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 36. localdatetime.realtime()\nQuery\nRETURN localdatetime.realtime() AS now\nTable 37. Result\nnow\n2022-06-14T10:02:30.647817\nRows: 1\nExample 37. localdatetime.realtime()\nQuery\nRETURN localdatetime.realtime('America/Los Angeles') AS nowInLA\nTable 38. Result\nnowInLA\n2022-06-14T03:02:30.691099\nRows: 1\nCreating a calendar (Year-Month-Day) LOCAL DATETIME\nlocaldatetime() returns a LOCAL DATETIME value with the specified year, month, day, hour, minute, second, millisecond, microsecond and nanosecond component values.\nSyntax:\nlocaldatetime({year [, month, day, hour, minute, second, millisecond, microsecond, nanosecond]})\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nmonth\nAn integer between 1 and 12 that specifies the month.\nday\nAn integer between 1 and 31 that specifies the day of the month.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\nConsiderations:\nThe month component will default to 1 if month is omitted.\nThe day of the month component will default to 1 if day is omitted.\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set year, month, day, hour, minute, and second may be omitted; i.e. it is possible to specify only year, month and day, but specifying year, month, day and minute is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 38. localdatetime.realtime()\nQuery\nRETURN\n  localdatetime({\n    year: 1984, month: 10, day: 11,\n    hour: 12, minute: 31, second: 14, millisecond: 123, microsecond: 456, nanosecond: 789\n  }) AS theDate\nTable 39. Result\ntheDate\n1984-10-11T12:31:14.123456789\nRows: 1\nCreating a week (Year-Week-Day) LOCAL DATETIME\nlocaldatetime() returns a LOCAL DATETIME value with the specified year, week, dayOfWeek, hour, minute, second, millisecond, microsecond and nanosecond component values.\nSyntax:\nlocaldatetime({year [, week, dayOfWeek, hour, minute, second, millisecond, microsecond, nanosecond]})\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nweek\nAn integer between 1 and 53 that specifies the week.\ndayOfWeek\nAn integer between 1 and 7 that specifies the day of the week.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\nConsiderations:\nThe week component will default to 1 if week is omitted.\nThe day of the week component will default to 1 if dayOfWeek is omitted.\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set year, week, dayOfWeek, hour, minute, and second may be omitted; i.e. it is possible to specify only year, week and dayOfWeek, but specifying year, week, dayOfWeek and minute is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 39. localdatetime()\nQuery\nRETURN\n  localdatetime({\n    year: 1984, week: 10, dayOfWeek: 3,\n    hour: 12, minute: 31, second: 14, millisecond: 645\n  }) AS theDate\nTable 40. Result\ntheDate\n1984-03-07T12:31:14.645\nRows: 1\nCreating a quarter (Year-Quarter-Day) ZONED DATETIME\nlocaldatetime() returns a LOCAL DATETIME value with the specified year, quarter, dayOfQuarter, hour, minute, second, millisecond, microsecond and nanosecond component values.\nSyntax:\nlocaldatetime({year [, quarter, dayOfQuarter, hour, minute, second, millisecond, microsecond, nanosecond]})\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nquarter\nAn integer between 1 and 4 that specifies the quarter.\ndayOfQuarter\nAn integer between 1 and 92 that specifies the day of the quarter.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\nConsiderations:\nThe quarter component will default to 1 if quarter is omitted.\nThe day of the quarter component will default to 1 if dayOfQuarter is omitted.\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set year, quarter, dayOfQuarter, hour, minute, and second may be omitted; i.e. it is possible to specify only year, quarter and dayOfQuarter, but specifying year, quarter, dayOfQuarter and minute is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 40. localdatetime()\nQuery\nRETURN\n  localdatetime({\n    year: 1984, quarter: 3, dayOfQuarter: 45,\n    hour: 12, minute: 31, second: 14, nanosecond: 645876123\n  }) AS theDate\nTable 41. Result\ntheDate\n1984-08-14T12:31:14.645876123\nRows: 1\nCreating an ordinal (Year-Day) LOCAL DATETIME\nlocaldatetime() returns a LOCAL DATETIME value with the specified year, ordinalDay, hour, minute, second, millisecond, microsecond and nanosecond component values.\nSyntax:\nlocaldatetime({year [, ordinalDay, hour, minute, second, millisecond, microsecond, nanosecond]})\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\nA single map consisting of the following:\nyear\nAn expression consisting of at least four digits that specifies the year.\nordinalDay\nAn integer between 1 and 366 that specifies the ordinal day of the year.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\nConsiderations:\nThe ordinal day of the year component will default to 1 if ordinalDay is omitted.\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set year, ordinalDay, hour, minute, and second may be omitted; i.e. it is possible to specify only year and ordinalDay, but specifying year, ordinalDay and minute is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 41. localdatetime()\nQuery\nRETURN\n  localdatetime({\n    year: 1984, ordinalDay: 202,\n    hour: 12, minute: 31, second: 14, microsecond: 645876\n  }) AS theDate\nTable 42. Result\ntheDate\n1984-07-20T12:31:14.645876\nRows: 1\nCreating a LOCAL DATETIME from a STRING\nlocaldatetime() returns the LOCAL DATETIME value obtained by parsing a STRING representation of a temporal value.\nSyntax:\nlocaldatetime(temporalValue)\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\ntemporalValue\nA STRING representing a temporal value.\nConsiderations:\ntemporalValue must comply with the format defined for dates and times.\ntemporalValue must denote a valid date and time; i.e. a temporalValue denoting 30 February 2001 is invalid.\nlocaldatetime(null) returns null.\nExample 42. localdatetime()\nQuery\nUNWIND [\nlocaldatetime('2015-07-21T21:40:32.142'),\nlocaldatetime('2015-W30-2T214032.142'),\nlocaldatetime('2015-202T21:40:32'),\nlocaldatetime('2015202T21')\n] AS theDate\nRETURN theDate\nTable 43. Result\ntheDate\n2015-07-21T21:40:32.142\n2015-07-21T21:40:32.142\n2015-07-21T21:40:32\n2015-07-21T21:00\nRows: 4\nCreating a LOCAL DATETIME using other temporal values as components\nlocaldatetime() returns the LOCAL DATETIME value obtained by selecting and composing components from another temporal value. In essence, this allows a DATE, ZONED DATETIME, ZONED TIME or LOCAL TIME value to be converted to a LOCAL DATETIME, and for \"missing\" components to be provided.\nSyntax:\nlocaldatetime({datetime [, year, ..., nanosecond]}) | localdatetime({date [, year, ..., nanosecond]}) | localdatetime({time [, year, ..., nanosecond]}) | localdatetime({date, time [, year, ..., nanosecond]})\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\nA single map consisting of the following:\ndatetime\nA ZONED DATETIME value.\ndate\nA DATE value.\ntime\nA ZONED TIME value.\nyear\nAn expression consisting of at least four digits that specifies the year.\nmonth\nAn integer between 1 and 12 that specifies the month.\nday\nAn integer between 1 and 31 that specifies the day of the month.\nweek\nAn integer between 1 and 53 that specifies the week.\ndayOfWeek\nAn integer between 1 and 7 that specifies the day of the week.\nquarter\nAn integer between 1 and 4 that specifies the quarter.\ndayOfQuarter\nAn integer between 1 and 92 that specifies the day of the quarter.\nordinalDay\nAn integer between 1 and 366 that specifies the ordinal day of the year.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\nConsiderations:\nIf any of the optional parameters are provided, these will override the corresponding components of datetime, date and/or time.\nlocaldatetime(dd) may be written instead of localdatetime({datetime: dd}).\nExample 43. localdatetime()\nThe following query shows the various usages of localdatetime({date [, year, ..., nanosecond]}).\nQuery\nWITH date({year: 1984, month: 10, day: 11}) AS dd\nRETURN\n  localdatetime({date: dd, hour: 10, minute: 10, second: 10}) AS dateHHMMSS,\n  localdatetime({date: dd, day: 28, hour: 10, minute: 10, second: 10}) AS dateDDHHMMSS\nTable 44. Result\ndateHHMMSS dateDDHHMMSS\n1984-10-11T10:10:10\n1984-10-28T10:10:10\nRows: 1\nExample 44. localdatetime()\nThe following query shows the various usages of localdatetime({time [, year, ..., nanosecond]}).\nQuery\nWITH time({hour: 12, minute: 31, second: 14, microsecond: 645876, timezone: '+01:00'}) AS tt\nRETURN\n  localdatetime({year: 1984, month: 10, day: 11, time: tt}) AS YYYYMMDDTime,\n  localdatetime({year: 1984, month: 10, day: 11, time: tt, second: 42}) AS YYYYMMDDTimeSS\nTable 45. Result\nYYYYMMDDTime YYYYMMDDTimeSS\n1984-10-11T12:31:14.645876\n1984-10-11T12:31:42.645876\nRows: 1\nExample 45. localdatetime()\nThe following query shows the various usages of localdatetime({date, time [, year, ..., nanosecond]}); i.e. combining a DATE and a ZONED TIME value to create a single LOCAL DATETIME value.\nQuery\nWITH\n  date({year: 1984, month: 10, day: 11}) AS dd,\n  time({hour: 12, minute: 31, second: 14, microsecond: 645876, timezone: '+01:00'}) AS tt\nRETURN\n  localdatetime({date: dd, time: tt}) AS dateTime,\n  localdatetime({date: dd, time: tt, day: 28, second: 42}) AS dateTimeDDSS\nTable 46. Result\ndateTime dateTimeDDSS\n1984-10-11T12:31:14.645876\n1984-10-28T12:31:42.645876\nRows: 1\nExample 46. localdatetime()\nThe following query shows the various usages of localdatetime({datetime [, year, ..., nanosecond]}).\nQuery\nWITH\n  datetime({\n    year: 1984, month: 10, day: 11,\n    hour: 12,\n    timezone: '+01:00'\n  }) AS dd\nRETURN\n  localdatetime({datetime: dd}) AS dateTime,\n  localdatetime({datetime: dd, day: 28, second: 42}) AS dateTimeDDSS\nTable 47. Result\ndateTime dateTimeDDSS\n1984-10-11T12:00\n1984-10-28T12:00:42\nRows: 1\nTruncating a LOCAL DATETIME\nlocaldatetime.truncate() returns the LOCAL DATETIME value obtained by truncating a specified temporal instant value at the nearest preceding point in time at the specified component boundary (which is denoted by the truncation unit passed as a parameter to the function). In other words, the LOCAL DATETIME returned will have all components that are smaller than the specified truncation unit set to their default values.\nIt is possible to supplement the truncated value by providing a map containing components which are smaller than the truncation unit. This will have the effect of overriding the default values which would otherwise have been set for these smaller components. For example, day\u2009\u2014\u2009with some value x\u2009\u2014\u2009may be provided when the truncation unit STRING is 'year' in order to ensure the returned value has the day set to x instead of the default day (which is 1).\nSyntax:\nlocaldatetime.truncate(unit [, temporalInstantValue [, mapOfComponents ] ])\nReturns:\nLOCAL DATETIME\nArguments:\nName Description\nunit\nA string expression evaluating to one of the following STRING values`: 'millennium', 'century', 'decade', 'year', 'weekYear', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond', 'microsecond'.\ntemporalInstantValue\nAn expression of one of the following types: ZONED DATETIME, LOCAL DATETIME, DATE.\nmapOfComponents\nAn expression evaluating to a map containing components smaller than unit.\nConsiderations:\ntemporalInstantValue cannot be a DATE value if unit is one of: 'hour', 'minute', 'second', 'millisecond', 'microsecond'.\nAny component that is provided in mapOfComponents must be smaller than unit; i.e. if unit is 'day', mapOfComponents cannot contain information pertaining to a month.\nAny component that is not contained in mapOfComponents and which is smaller than unit will be set to its minimal value.\nIf mapOfComponents is not provided, all components of the returned value which are smaller than unit will be set to their default values.\nIf temporalInstantValue is not provided, it will be set to the current date and time, i.e. localdatetime.truncate(unit) is equivalent of localdatetime.truncate(unit, localdatetime()).\nExample 47. localdatetime.truncate()\nQuery\nWITH\n  localdatetime({\n    year: 2017, month: 11, day: 11,\n    hour: 12, minute: 31, second: 14, nanosecond: 645876123\n  }) AS d\nRETURN\n  localdatetime.truncate('millennium', d) AS truncMillenium,\n  localdatetime.truncate('year', d, {day: 2}) AS truncYear,\n  localdatetime.truncate('month', d) AS truncMonth,\n  localdatetime.truncate('day', d) AS truncDay,\n  localdatetime.truncate('hour', d, {nanosecond: 2}) AS truncHour,\n  localdatetime.truncate('second', d) AS truncSecond\nTable 48. Result\ntruncMillenium truncYear truncMonth truncDay truncHour truncSecond\n2000-01-01T00:00\n2017-01-02T00:00\n2017-11-01T00:00\n2017-11-11T00:00\n2017-11-11T12:00:00.000000002\n2017-11-11T12:31:14\nRows: 1\nlocaltime()\nDetails for using the localtime() function.\nGetting the current LOCAL TIME\nlocaltime.transaction()\nlocaltime.statement()\nlocaltime.realtime()\nCreating a LOCAL TIME\nCreating a LOCAL TIME from a STRING\nCreating a LOCAL TIME using other temporal values as components\nTruncating a LOCAL TIME\nGetting the current LOCAL TIME\nlocaltime() returns the current LOCAL TIME value. If no time zone parameter is specified, the local time zone will be used.\nSyntax:\nlocaltime([{timezone}])\nReturns:\nLOCAL TIME\nArguments:\nName Description\nA single map consisting of the following:\ntimezone\nA string expression that represents the time zone.\nConsiderations:\nIf no parameters are provided, localtime() must be invoked (localtime({}) is invalid).\nExample 48. localtime()\nQuery\nRETURN localtime() AS now\nThe current local time (i.e. in the local time zone) is returned.\nTable 49. Result\nnow\n10:02:31.596\nRows: 1\nExample 49. localtime()\nQuery\nRETURN localtime({timezone: 'America/Los Angeles'}) AS nowInLA\nThe current local time in California is returned.\nTable 50. Result\nnowInLA\n03:02:31.629\nRows: 1\nlocaltime.transaction()\nlocaltime.transaction() returns the current LOCAL TIME value using the transaction clock. This value will be the same for each invocation within the same transaction. However, a different value may be produced for different transactions.\nSyntax:\nlocaltime.transaction([{timezone}])\nReturns:\nLOCAL TIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 50. localtime.transaction()\nQuery\nRETURN localtime.transaction() AS now\nTable 51. Result\nnow\n10:02:31.662\nRows: 1\nlocaltime.statement()\nlocaltime.statement() returns the current LOCAL TIME value using the statement clock. This value will be the same for each invocation within the same statement. However, a different value may be produced for different statements within the same transaction.\nSyntax:\nlocaltime.statement([{timezone}])\nReturns:\nLOCAL TIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 51. localtime.statement()\nQuery\nRETURN localtime.statement() AS now\nTable 52. Result\nnow\n10:02:31.697\nRows: 1\nExample 52. localtime.statement()\nQuery\nRETURN localtime.statement('America/Los Angeles') AS nowInLA\nTable 53. Result\nnowInLA\n03:02:31.737\nRows: 1\nlocaltime.realtime()\nlocaltime.realtime() returns the current LOCAL TIME value using the realtime clock. This value will be the live clock of the system.\nSyntax:\nlocaltime.realtime([{timezone}])\nReturns:\nLOCAL TIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 53. localtime.realtime()\nQuery\nRETURN localtime.realtime() AS now\nTable 54. Result\nnow\n10:02:31.806895\nRows: 1\nCreating a LOCAL TIME\nlocaltime() returns a LOCAL TIME value with the specified hour, minute, second, millisecond, microsecond and nanosecond component values.\nSyntax:\nlocaltime({hour [, minute, second, millisecond, microsecond, nanosecond]})\nReturns:\nLOCAL TIME\nArguments:\nName Description\nA single map consisting of the following:\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\nConsiderations:\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set hour, minute, and second may be omitted; i.e. it is possible to specify only hour and minute, but specifying hour and second is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 54. localtime()\nQuery\nUNWIND [\nlocaltime({hour: 12, minute: 31, second: 14, nanosecond: 789, millisecond: 123, microsecond: 456}),\nlocaltime({hour: 12, minute: 31, second: 14}),\nlocaltime({hour: 12})\n] AS theTime\nRETURN theTime\nTable 55. Result\ntheTime\n12:31:14.123456789\n12:31:14\n12:00\nRows: 3\nCreating a LOCAL TIME from a STRING\nlocaltime() returns the LOCAL TIME value obtained by parsing a STRING representation of a temporal value.\nSyntax:\nlocaltime(temporalValue)\nReturns:\nLOCAL TIME\nArguments:\nName Description\ntemporalValue\nA STRING representing a temporal value.\nConsiderations:\ntemporalValue must comply with the format defined for times.\ntemporalValue must denote a valid time; i.e. a temporalValue denoting 13:46:64 is invalid.\nlocaltime(null) returns null.\nExample 55. localtime()\nQuery\nUNWIND [\nlocaltime('21:40:32.142'),\nlocaltime('214032.142'),\nlocaltime('21:40'),\nlocaltime('21')\n] AS theTime\nRETURN theTime\nTable 56. Result\ntheTime\n21:40:32.142\n21:40:32.142\n21:40\n21:00\nRows: 4\nCreating a LOCAL TIME using other temporal values as components\nlocaltime() returns the LOCAL TIME value obtained by selecting and composing components from another temporal value. In essence, this allows a ZONED DATETIME, LOCAL DATETIME or ZONED TIME value to be converted to a LOCAL TIME, and for \"missing\" components to be provided.\nSyntax:\nlocaltime({time [, hour, ..., nanosecond]})\nReturns:\nLOCAL TIME\nArguments:\nName Description\nA single map consisting of the following:\ntime\nA ZONED TIME value.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\nConsiderations:\nIf any of the optional parameters are provided, these will override the corresponding components of time.\nlocaltime(tt) may be written instead of localtime({time: tt}).\nExample 56. localtime()\nQuery\nWITH time({hour: 12, minute: 31, second: 14, microsecond: 645876, timezone: '+01:00'}) AS tt\nRETURN\n  localtime({time: tt}) AS timeOnly,\n  localtime({time: tt, second: 42}) AS timeSS\nTable 57. Result\ntimeOnly timeSS\n12:31:14.645876\n12:31:42.645876\nRows: 1\nTruncating a LOCAL TIME\nlocaltime.truncate() returns the LOCAL TIME value obtained by truncating a specified temporal instant value at the nearest preceding point in time at the specified component boundary (which is denoted by the truncation unit passed as a parameter to the function). In other words, the LOCAL TIME returned will have all components that are smaller than the specified truncation unit set to their default values.\nIt is possible to supplement the truncated value by providing a map containing components which are smaller than the truncation unit. This will have the effect of overriding the default values which would otherwise have been set for these smaller components. For example, minute\u2009\u2014\u2009with some value x\u2009\u2014\u2009may be provided when the truncation unit string is 'hour' in order to ensure the returned value has the minute set to x instead of the default minute (which is 1).\nSyntax:\nlocaltime.truncate(unit [, temporalInstantValue [, mapOfComponents ] ])\nReturns:\nLOCAL TIME\nArguments:\nName Description\nunit\nA string expression evaluating to one of the following STRING values: 'day', 'hour', 'minute', 'second', 'millisecond', 'microsecond'.\ntemporalInstantValue\nAn expression of one of the following types: ZONED DATETIME, LOCAL DATETIME, ZONED TIME, LOCAL TIME.\nmapOfComponents\nAn expression evaluating to a map containing components smaller than unit.\nConsiderations:\nTruncating time to day\u2009\u2014\u2009i.e. unit is 'day' \u2009\u2014\u2009is supported, and yields midnight at the start of the day (00:00), regardless of the value of temporalInstantValue. However, the time zone of temporalInstantValue is retained.\nAny component that is provided in mapOfComponents must be smaller than unit; i.e. if unit is 'second', mapOfComponents cannot contain information pertaining to a minute.\nAny component that is not contained in mapOfComponents and which is smaller than unit will be set to its minimal value.\nIf mapOfComponents is not provided, all components of the returned value which are smaller than unit will be set to their default values.\nIf temporalInstantValue is not provided, it will be set to the current time, i.e. localtime.truncate(unit) is equivalent of localtime.truncate(unit, localtime()).\nExample 57. localtime.truncate()\nQuery\nWITH time({hour: 12, minute: 31, second: 14, nanosecond: 645876123, timezone: '-01:00'}) AS t\nRETURN\n  localtime.truncate('day', t) AS truncDay,\n  localtime.truncate('hour', t) AS truncHour,\n  localtime.truncate('minute', t, {millisecond: 2}) AS truncMinute,\n  localtime.truncate('second', t) AS truncSecond,\n  localtime.truncate('millisecond', t) AS truncMillisecond,\n  localtime.truncate('microsecond', t) AS truncMicrosecond\nTable 58. Result\ntruncDay truncHour truncMinute truncSecond truncMillisecond truncMicrosecond\n00:00:00\n12:00:00\n12:31:00.002000000\n12:31:14\"\n12:31:14.645000000\n12:31:14.645876000\nRows: 1\ntime()\nDetails for using the time() function.\nGetting the current ZONED TIME\ntime.transaction()\ntime.statement()\ntime.realtime()\nCreating a ZONED TIME\nCreating a ZONED TIME from a STRING\nCreating a ZONED TIME using other temporal values as components\nTruncating a ZONED TIME\nGetting the current ZONED TIME\ntime() returns the current ZONED TIME value. If no time zone parameter is specified, the local time zone will be used.\nSyntax:\ntime([{timezone}])\nReturns:\nZONED TIME\nArguments:\nName Description\nA single map consisting of the following:\ntimezone\nA string expression that represents the time zone.\nConsiderations:\nIf no parameters are provided, time() must be invoked (time({}) is invalid).\nExample 58. time()\nQuery\nRETURN time() AS currentTime\nThe current time of day using the local time zone is returned.\nTable 59. Result\ncurrentTime\n10:02:32.192Z\nRows: 1\nExample 59. time()\nQuery\nRETURN time({timezone: 'America/Los Angeles'}) AS currentTimeInLA\nThe current time of day in California is returned.\nTable 60. Result\ncurrentTimeInLA\n03:02:32.233-07:00\nRows: 1\ntime.transaction()\ntime.transaction() returns the current ZONED TIME value using the transaction clock. This value will be the same for each invocation within the same transaction. However, a different value may be produced for different transactions.\nSyntax:\ntime.transaction([{timezone}])\nReturns:\nZONED TIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 60. time.transaction()\nQuery\nRETURN time.transaction() AS currentTime\nTable 61. Result\ncurrentTime\n10:02:32.276Z\nRows: 1\ntime.statement()\ntime.statement() returns the current ZONED TIME value using the statement clock. This value will be the same for each invocation within the same statement. However, a different value may be produced for different statements within the same transaction.\nSyntax:\ntime.statement([{timezone}])\nReturns:\nZONED TIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 61. time.statement()\nQuery\nRETURN time.statement() AS currentTime\nTable 62. Result\ncurrentTime\n10:02:32.317Z\nRows: 1\nExample 62. time.statement()\nQuery\nRETURN time.statement('America/Los Angeles') AS currentTimeInLA\nTable 63. Result\ncurrentTimeInLA\n03:02:32.351-07:00\nRows: 1\ntime.realtime()\ntime.realtime() returns the current ZONED TIME value using the realtime clock. This value will be the live clock of the system.\nSyntax:\ntime.realtime([{timezone}])\nReturns:\nZONED TIME\nArguments:\nName Description\ntimezone\nA string expression that represents the time zone.\nExample 63. time.realtime()\nQuery\nRETURN time.realtime() AS currentTime\nTable 64. Result\ncurrentTime\n10:02:32.436948Z\nRows: 1\nCreating a ZONED TIME\ntime() returns a ZONED TIME value with the specified hour, minute, second, millisecond, microsecond, nanosecond and timezone component values.\nSyntax:\ntime({hour [, minute, second, millisecond, microsecond, nanosecond, timezone]})\nReturns:\nZONED TIME\nArguments:\nName Description\nA single map consisting of the following:\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\ntimezone\nAn expression that specifies the time zone.\nConsiderations:\nThe hour component will default to 0 if hour is omitted.\nThe minute component will default to 0 if minute is omitted.\nThe second component will default to 0 if second is omitted.\nAny missing millisecond, microsecond or nanosecond values will default to 0.\nThe timezone component will default to the configured default time zone if timezone is omitted.\nIf millisecond, microsecond and nanosecond are given in combination (as part of the same set of parameters), the individual values must be in the range 0 to 999.\nThe smallest components in the set hour, minute, and second may be omitted; i.e. it is possible to specify only hour and minute, but specifying hour and second is not permitted.\nOne or more of millisecond, microsecond and nanosecond can only be specified as long as second is also specified.\nExample 64. time()\nQuery\nUNWIND [\ntime({hour: 12, minute: 31, second: 14, millisecond: 123, microsecond: 456, nanosecond: 789}),\ntime({hour: 12, minute: 31, second: 14, nanosecond: 645876123}),\ntime({hour: 12, minute: 31, second: 14, microsecond: 645876, timezone: '+01:00'}),\ntime({hour: 12, minute: 31, timezone: '+01:00'}),\ntime({hour: 12, timezone: '+01:00'})\n] AS theTime\nRETURN theTime\nTable 65. Result\ntheTime\n12:31:14.123456789Z\n12:31:14.645876123Z\n12:31:14.645876000+01:00\n12:31:00+01:00\n12:00:00+01:00\nRows: 5\nCreating a ZONED TIME from a STRING\ntime() returns the ZONED TIME value obtained by parsing a STRING representation of a temporal value.\nSyntax:\ntime(temporalValue)\nReturns:\nZONED TIME\nArguments:\nName Description\ntemporalValue\nA STRING representing a temporal value.\nConsiderations:\ntemporalValue must comply with the format defined for times and time zones.\nThe timezone component will default to the configured default time zone if it is omitted.\ntemporalValue must denote a valid time; i.e. a temporalValue denoting 15:67 is invalid.\ntime(null) returns null.\nExample 65. time()\nQuery\nUNWIND [\ntime('21:40:32.142+0100'),\ntime('214032.142Z'),\ntime('21:40:32+01:00'),\ntime('214032-0100'),\ntime('21:40-01:30'),\ntime('2140-00:00'),\ntime('2140-02'),\ntime('22+18:00')\n] AS theTime\nRETURN theTime\nTable 66. Result\ntheTime\n21:40:32.142000000+01:00\n21:40:32.142000000Z\n21:40:32+01:00\n21:40:32-01:00\n21:40:00-01:30\n21:40:00Z\n21:40:00-02:00\n22:00:00+18:00\nRows: 8\nCreating a ZONED TIME using other temporal values as components\ntime() returns the ZONED TIME value obtained by selecting and composing components from another temporal value. In essence, this allows a ZONED DATETIME, LOCAL DATETIME or LOCAL TIME value to be converted to a ZONED TIME, and for \"missing\" components to be provided.\nSyntax:\ntime({time [, hour, ..., timezone]})\nReturns:\nZONED TIME\nArguments:\nName Description\nA single map consisting of the following:\ntime\nA ZONED TIME value.\nhour\nAn integer between 0 and 23 that specifies the hour of the day.\nminute\nAn integer between 0 and 59 that specifies the number of minutes.\nsecond\nAn integer between 0 and 59 that specifies the number of seconds.\nmillisecond\nAn integer between 0 and 999 that specifies the number of milliseconds.\nmicrosecond\nAn integer between 0 and 999,999 that specifies the number of microseconds.\nnanosecond\nAn integer between 0 and 999,999,999 that specifies the number of nanoseconds.\ntimezone\nAn expression that specifies the time zone.\nConsiderations:\nIf any of the optional parameters are provided, these will override the corresponding components of time.\ntime(tt) may be written instead of time({time: tt}).\nSelecting a ZONED TIME or ZONED DATETIME value as the time component also selects its time zone. If a LOCAL TIME or LOCAL DATETIME is selected instead, the default time zone is used. In any case, the time zone can be overridden explicitly.\nSelecting a ZONED DATETIME or ZONED TIME as the time component and overwriting the time zone will adjust the local time to keep the same point in time.\nExample 66. time()\nQuery\nWITH localtime({hour: 12, minute: 31, second: 14, microsecond: 645876}) AS tt\nRETURN\n  time({time: tt}) AS timeOnly,\n  time({time: tt, timezone: '+05:00'}) AS timeTimezone,\n  time({time: tt, second: 42}) AS timeSS,\n  time({time: tt, second: 42, timezone: '+05:00'}) AS timeSSTimezone\nTable 67. Result\ntimeOnly timeTimezone timeSS timeSSTimezone\n12:31:14.645876Z\n12:31:14.645876+05:00\n12:31:42.645876Z\n12:31:42.645876+05:00\nRows: 1\nTruncating a ZONED TIME\ntime.truncate() returns the ZONED TIME value obtained by truncating a specified temporal instant value at the nearest preceding point in time at the specified component boundary (which is denoted by the truncation unit passed as a parameter to the function). In other words, the ZONED TIME returned will have all components that are smaller than the specified truncation unit set to their default values.\nIt is possible to supplement the truncated value by providing a map containing components which are smaller than the truncation unit. This will have the effect of overriding the default values which would otherwise have been set for these smaller components. For example, minute\u2009\u2014\u2009with some value x\u2009\u2014\u2009may be provided when the truncation unit STRING is 'hour' in order to ensure the returned value has the minute set to x instead of the default minute (which is 1).\nSyntax:\ntime.truncate(unit [, temporalInstantValue [, mapOfComponents ] ])\nReturns:\nZONED TIME\nArguments:\nName Description\nunit\nA string expression evaluating to one of the following STRING values: 'day', 'hour', 'minute', 'second', 'millisecond', 'microsecond'.\ntemporalInstantValue\nAn expression of one of the following types: ZONED DATETIME, LOCAL DATETIME, ZONED TIME, LOCAL TIME.\nmapOfComponents\nAn expression evaluating to a map containing components smaller than unit. During truncation, a time zone can be attached or overridden using the key timezone.\nConsiderations:\nTruncating time to day\u2009\u2014\u2009i.e. unit is 'day' \u2009\u2014\u2009is supported, and yields midnight at the start of the day (00:00), regardless of the value of temporalInstantValue. However, the time zone of temporalInstantValue is retained.\nThe time zone of temporalInstantValue may be overridden; for example, time.truncate('minute', input, {timezone: '+0200'}).\nIf temporalInstantValue is one of ZONED TIME, ZONED DATETIME\u2009\u2014\u2009a value with a time zone\u2009\u2014\u2009and the time zone is overridden, no time conversion occurs.\nIf temporalInstantValue is one of LOCAL TIME, LOCAL DATETIME, DATE\u2009\u2014\u2009a value without a time zone\u2009\u2014\u2009and the time zone is not overridden, the configured default time zone will be used.\nAny component that is provided in mapOfComponents must be smaller than unit; i.e. if unit is 'second', mapOfComponents cannot contain information pertaining to a minute.\nAny component that is not contained in mapOfComponents and which is smaller than unit will be set to its minimal value.\nIf mapOfComponents is not provided, all components of the returned value which are smaller than unit will be set to their default values.\nIf temporalInstantValue is not provided, it will be set to the current time and timezone, i.e. time.truncate(unit) is equivalent of time.truncate(unit, time()).\nExample 67. time()\nQuery\nWITH time({hour: 12, minute: 31, second: 14, nanosecond: 645876123, timezone: '-01:00'}) AS t\nRETURN\n  time.truncate('day', t) AS truncDay,\n  time.truncate('hour', t) AS truncHour,\n  time.truncate('minute', t) AS truncMinute,\n  time.truncate('second', t) AS truncSecond,\n  time.truncate('millisecond', t, {nanosecond: 2}) AS truncMillisecond,\n  time.truncate('microsecond', t) AS truncMicrosecond\nTable 68. Result\ntruncDay truncHour truncMinute truncSecond truncMillisecond truncMicrosecond\n00:00:00-01:00\n12:00:00-01:00\n12:31:00-01:00\n12:31:14-01:00\n12:31:14.645000002-01:00\n12:31:14.645876000-01:00\nRows: 1\nString functions\nTemporal functions - duration", "embeddings": [-0.016200745478272438, 0.02984055131673813, -0.009657573886215687, 0.02319788560271263, -0.0013416503788903356, -0.005892620421946049, 0.022280709818005562, -0.003685315605252981, 0.061341024935245514, -0.043312929570674896, 0.03476757928729057, -0.07134950906038284, -0.10322302579879761, 0.0751795768737793, 0.0450868234038353, -0.037191398441791534, -0.03651478886604309, -0.0818873792886734, 0.017377281561493874, -0.04283949360251427, 0.07378118485212326, -0.04679000750184059, -0.10153010487556458, -0.02556515485048294, 0.01432920340448618, -0.04847563058137894, 0.01353264320641756, -0.009875240735709667, 0.16075094044208527, 0.03047408163547516, -0.010858286172151566, 0.07395726442337036, 0.047471534460783005, -0.002438087947666645, -0.0846923291683197, 0.04738086089491844, -0.001996660605072975, 0.060818150639534, -0.002440694021061063, -0.06800483912229538, 0.03527682274580002, -0.08149304986000061, 0.02176475338637829, 0.022999487817287445, -0.018751148134469986, 0.0022100063506513834, 0.0796242505311966, 0.03462791442871094, -0.1066662073135376, 0.05970921367406845, -0.03370460495352745, 0.12186276167631149, -0.026631543412804604, -0.009694632142782211, 0.09148163348436356, 0.11253952980041504, -0.04105616733431816, 0.027839623391628265, -0.020320042967796326, -0.014147513546049595, -0.06769828498363495, 0.008583400398492813, -0.017089778557419777, -0.03142261132597923, 0.06240861490368843, 0.017457738518714905, -0.008432559669017792, 0.008820447139441967, 0.08993151783943176, -0.006905783899128437, -0.03159942477941513, -0.007202914450317621, -0.06621408462524414, 0.04290235787630081, 0.04823976382613182, 0.0026446348056197166, 0.015826674178242683, -0.0021305650006979704, -0.003101316513493657, -0.048799071460962296, 0.038342155516147614, 0.05463401973247528, -0.016065232455730438, -0.001027544611133635, 0.039430733770132065, 0.03869473189115524, 0.019145771861076355, 0.09044438600540161, 0.04929983615875244, 0.047849372029304504, 0.004443100653588772, -0.02907266840338707, 0.052300725132226944, -0.029094375669956207, 0.03877221420407295, -0.056983135640621185, 0.030019214376807213, 0.04267114773392677, 0.12524904310703278, -0.0010678445687517524, -0.06247817724943161, 0.015517786145210266, -0.058112990111112595, 0.02195774018764496, 0.003720566164702177, -0.05616694688796997, -0.09036660939455032, -0.02919020690023899, -0.0011623930186033249, 0.029899727553129196, -0.056540194898843765, 0.0005234658601693809, -0.013690611347556114, -0.08627260476350784, -0.019804062321782112, 0.008469407446682453, -0.051692068576812744, -0.04574555903673172, 0.10930023342370987, 0.04394375905394554, -0.011246736161410809, 0.022744091227650642, 0.000513700710143894, 0.021204372867941856, -0.013738147914409637, 0.014142000116407871, 0.03800884634256363, 4.172737887796293e-33, -0.02338668890297413, -0.04741495102643967, -0.05427579954266548, -0.011527436785399914, -0.06598366796970367, 0.04128090292215347, 0.010134204290807247, -0.05450732633471489, 0.057023681700229645, 0.02082914672791958, -0.04379962012171745, -0.025402242317795753, -0.04088635742664337, 0.05283199995756149, 0.04887101799249649, 0.004605498164892197, 0.07022202759981155, 0.03026421368122101, 0.03189276158809662, 0.04166589677333832, 0.020687062293291092, 0.04626212641596794, -0.022167125716805458, -0.0024847695603966713, 0.08605986833572388, -0.014738356694579124, 0.01828114688396454, 0.009533243253827095, -0.02623477205634117, -0.013288146816194057, -0.042062222957611084, -0.08145949244499207, -0.10395439714193344, 0.021752599626779556, 0.11680842936038971, 0.008161179721355438, 0.026510367169976234, 0.024149678647518158, 0.007824878208339214, -0.03907050937414169, -0.04227086901664734, -0.02701154537498951, -0.011416171677410603, -0.013812193647027016, 0.008769672363996506, -0.04961517080664635, -0.08124637603759766, 0.10835079103708267, 0.014465831220149994, 0.06252077221870422, 0.010372374206781387, 0.07209520041942596, 0.05037807300686836, -0.10849007964134216, -0.007781994063407183, 0.0635475143790245, 0.07188086211681366, 0.024701567366719246, -0.0032508012373000383, 0.08867121487855911, -0.006524421740323305, 0.01801629364490509, 0.031992923468351364, -0.03154584765434265, -0.012479925528168678, -0.011031259782612324, -0.009580349549651146, -0.027791032567620277, 0.09944097697734833, -0.03135114908218384, 0.02227216213941574, 0.044749315828084946, 0.025864453986287117, -0.037927135825157166, 0.023320158943533897, -0.0013355775736272335, 0.05765078216791153, -0.050370533019304276, -0.023120084777474403, 0.04580486938357353, -0.07378645986318588, -0.03113315813243389, 0.004167360719293356, 0.027878563851118088, 0.01917659305036068, -0.03267357870936394, -0.001446709269657731, -0.03020818904042244, 0.04301818460226059, -0.0919690951704979, -0.08451752364635468, -0.003424348309636116, -0.024241557344794273, -6.887121708132327e-05, -0.006554847117513418, -5.585777606400687e-33, 0.07247982919216156, -0.03253745660185814, -0.047319427132606506, 0.005453492980450392, 0.0025435888674110174, -0.04598455876111984, -0.10228795558214188, 0.032690759748220444, -0.002435690490528941, 0.015398300252854824, -0.009609566070139408, -0.0200794730335474, 0.00142928387504071, -0.06547723710536957, -0.007135442458093166, 0.044059839099645615, -0.061056844890117645, -0.10327611118555069, -0.04111266881227493, 0.04283593222498894, 0.021032588556408882, -0.01359525602310896, -0.04307016357779503, 0.011967740021646023, 0.0069050476886332035, 0.026728050783276558, 0.08732026070356369, 0.036993611603975296, -0.05941487103700638, 0.06477493792772293, -0.10257504880428314, -0.01490639429539442, -0.0026377514004707336, -0.025146333500742912, -0.04396849870681763, -0.05204501748085022, 0.057221513241529465, -0.07137876003980637, 0.042711421847343445, -0.08767259865999222, 0.025691725313663483, 0.012411200441420078, -0.027293400838971138, -0.0391315296292305, -0.07747151702642441, 0.11620336025953293, -0.008457507006824017, 0.0898486003279686, 0.012829096987843513, 0.039749760180711746, 0.07069183140993118, 0.008898983709514141, -0.0007788186776451766, -0.029146477580070496, -0.02728991024196148, -0.014828529208898544, 0.012064848095178604, -0.11070737987756729, 0.029077844694256783, 0.039272941648960114, -0.07136581093072891, -0.07678967714309692, 0.0637604221701622, -0.007263814099133015, 0.005511197727173567, -0.1023659035563469, 0.020353609696030617, -0.09246845543384552, -0.03633345291018486, -0.05501481890678406, 0.09618573635816574, 0.04141039401292801, -0.10096197575330734, -0.02493969351053238, -0.06706269085407257, -0.009617367759346962, 0.026133272796869278, 0.062031339854002, 0.040604494512081146, -0.032342731952667236, -0.06199399009346962, 0.047698669135570526, 0.03530560061335564, 0.05900740996003151, -0.08776155859231949, 0.06668107211589813, -0.01732831448316574, 0.004377278964966536, 0.05203225463628769, -0.02950305864214897, -0.03231720253825188, 0.08133449405431747, -0.10363385826349258, 0.1145830973982811, -0.06493786722421646, -5.535560987368626e-08, -0.007256661541759968, -0.036238498985767365, -0.08686315268278122, 0.004303975496441126, -0.027739079669117928, -0.029113709926605225, -0.020333344116806984, -0.008606488816440105, 0.05614572390913963, -0.047680482268333435, 0.0573069304227829, -0.011611667461693287, -0.044583793729543686, -0.10119011998176575, 0.11005869507789612, -0.016186049208045006, 0.0753878504037857, -0.05985688790678978, -0.0868077203631401, -0.0692671686410904, 0.016652453690767288, -0.01965523697435856, -0.04781399667263031, -0.033140186220407486, -0.03203835338354111, -0.021533135324716568, -0.04940846934914589, 0.08454033732414246, 0.07992297410964966, 0.08607541769742966, 0.024477966129779816, 0.10575273633003235, -0.03652525320649147, 0.012490893714129925, -0.034288037568330765, -0.004015764221549034, -0.006829099729657173, -0.006012236699461937, -0.05412923917174339, 0.03257148712873459, 0.05354216322302818, 0.04092938452959061, -0.13201157748699188, -0.022463636472821236, -0.018416257575154305, -0.04790803790092468, -0.028296831995248795, -0.04434729740023613, 0.012968585826456547, 0.08096417784690857, -0.07498124986886978, 0.07071035355329514, 0.00494206789880991, 0.018328556790947914, -0.019247708842158318, 0.05224113166332245, 0.011976536363363266, -0.09280215948820114, 0.07565875351428986, -0.01749962754547596, -0.01051026489585638, 0.040802326053380966, 0.03081405721604824, -0.005375634878873825], "keywords": ["date", "time", "zoned time time"], "redirects": []}, "https://neo4j.com/docs/cypher-manual/5/functions/string": {"links": ["https://unicode.org/reports/tr15", "https://neo4j.com/docs/cypher-manual/5/functions/temporal", "https://neo4j.registration.goldcast.io/events/03805ea9-fe3a-4cac-8c15-aa622666531a", "https://neo4j.com/docs/cypher-manual/5/appendix/gql-conformance", "https://en.wikipedia.org/wiki/ISO_8601", "https://neo4j.com/docs/cypher-manual/5/syntax/operators", "https://neo4j.com/docs/cypher-manual/5/functions/mathematical-trigonometric"], "text": "String functions\nString functions operate on string expressions only, and will return an error if used on any other values. The exception to this rule is toString(), which also accepts numbers, booleans and temporal values (i.e. DATE, ZONED TIME` LOCAL TIME, ZONED DATETIME, LOCAL DATETIME or DURATION values).\nFunctions taking a STRING as input all operate on Unicode characters rather than on a standard char[]. For example, the size() function applied to any Unicode character will return 1, even if the character does not fit in the 16 bits of one char.\nWhen toString() is applied to a temporal value, it returns a STRING representation suitable for parsing by the corresponding temporal functions. This STRING will therefore be formatted according to the ISO 8601 format.\nSee also String operators.\nbtrim()\nIntroduced in 5.20\nbtrim() returns the original STRING with leading and trailing trimCharacterString characters removed. If trimCharacterString is not specified then all leading and trailing whitespace will be removed.\nSyntax:\nbtrim(original [, trimCharacterString])\nReturns:\nSTRING\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\ntrimCharacterString\nAn expression that returns a STRING.\nConsiderations:\nbtrim(null) returns null.\nbtrim(null, null) returns null.\nbtrim(\"hello\", null) returns null.\nbtrim(null, ' ') returns null.\nExample 1. btrim()\nQuery\nRETURN btrim('   hello    '), btrim('xxyyhelloxyxy', 'xy')\nTable 1. Result\nbtrim(' hello') btrim('xxyyhelloxyxy', 'xy')\n\"hello\"\n\"hello\"\nRows: 1\nleft()\nleft() returns a STRING containing the specified number of leftmost characters of the given STRING.\nSyntax:\nleft(original, length)\nReturns:\nSTRING\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\nlength\nAn expression that returns a positive INTEGER.\nConsiderations:\nleft(null, length) return null.\nleft(null, null) return null.\nleft(original, null) will raise an error.\nIf length is not a positive INTEGER, an error is raised.\nIf length exceeds the size of original, original is returned.\nExample 2. left()\nQuery\nRETURN left('hello', 3)\nTable 2. Result\nleft('hello', 3)\n\"hel\"\nRows: 1\nlower()\nIntroduced in 5.21\nlower() returns the given STRING in lowercase. This function is an alias to the toLower() function, and it was introduced as part of Cypher\u00ae's GQL conformance.\nlower(original)\nReturns:\nSTRING\nArguments:\nName Description\ninput\nA string to be converted into lowercase.\nConsiderations:\nlower(null) returns null.\nExample 3. lower()\nQuery\nRETURN lower('HELLO')\nTable 3. Result\nlower('HELLO')\n\"hello\"\nRows: 1\nltrim()\nltrim() returns the original STRING with leading trimCharacterString characters removed. As of Neo4j 5.20, a trimCharacterString can be specified. If this is not specified all leading whitespace will be removed.\nSyntax:\nltrim(original [, trimCharacterString])\nReturns:\nSTRING\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\ntrimCharacterString\nAn expression that returns a STRING.\nConsiderations:\nltrim(null) returns null.\nltrim(null, null) returns null.\nltrim(\"hello\", null) returns null.\nltrim(null, ' ') returns null.\nExample 4. ltrim()\nQuery\nRETURN ltrim('   hello'), ltrim('xxyyhelloxyxy', 'xy')\nTable 4. Result\nltrim(' hello') ltrim('xxyyhelloxyxy', 'xy')\n\"hello\"\n\"helloxyxy\"\nRows: 1\nnormalize()\nIntroduced in 5.17\nnormalize() returns the given STRING normalized using the NFC Unicode normalization form.\nUnicode normalization is a process that transforms different representations of the same string into a standardized form. For more information, see the documentation for Unicode normalization forms.\nThe normalize() function is useful for converting STRING values into comparable forms. When comparing two STRING values, it is their Unicode codepoints that are compared. In Unicode, a codepoint for a character that looks the same may be represented by two, or more, different codepoints. For example, the character < can be represented as \\uFE64 (\ufe64) or \\u003C (<). To the human eye, the characters may appear identical. However, if compared, Cypher will return false as \\uFE64 does not equal \\u003C. Using the normalize() function, it is possible to normalize the codepoint \\uFE64 to \\u003C, creating a single codepoint representation, allowing them to be successfully compared.\nSyntax:\nnormalize(input)\nReturns:\nSTRING\nArguments:\nName Description\ninput\nAn expression that returns a STRING.\nConsiderations:\nnormalize(null) returns null.\nExample 5. normalize()\nQuery\nRETURN normalize('\\u212B') = '\\u00C5' AS result\nTable 5. Result\nresult\ntrue\nRows: 1\nTo check if a STRING is normalized, use the IS NORMALIZED operator.\nnormalize(), with specified normal form\nIntroduced in 5.17\nnormalize() returns the given STRING normalized using the specified normalization form. The normalization form can be of type NFC, NFD, NFKC or NFKD.\nThere are two main types of normalization forms:\nCanonical equivalence: The NFC (default) and NFD are forms of canonical equivalence. This means that codepoints that represent the same abstract character will be normalized to the same codepoint (and have the same appearance and behavior). The NFC form will always give the composed canonical form (in which the combined codes are replaced with a single representation, if possible). The`NFD` form gives the decomposed form (the opposite of the composed form, which converts the combined codepoints into a split form if possible).\nCompatability normalization: NFKC and NFKD are forms of compatibility normalization. All canonically equivalent sequences are compatible, but not all compatible sequences are canonical. This means that a character normalized in NFC or NFD should also be normalized in NFKC and NFKD. Other characters with only slight differences in appearance should be compatibly equivalent.\nFor example, the Greek Upsilon with Acute and Hook Symbol \u03d3 can be represented by the Unicode codepoint: \\u03D3.\nNormalized in NFC: \\u03D3 Greek Upsilon with Acute and Hook Symbol (\u03d3)\nNormalized in NFD: \\u03D2\\u0301 Greek Upsilon with Hook Symbol + Combining Acute Accent (\u03d2\u0301)\nNormalized in NFKC: \\u038E Greek Capital Letter Upsilon with Tonos (\u038e)\nNormalized in NFKD: \\u03A5\\u0301 Greek Capital Letter Upsilon + Combining Acute Accent (\u03a5\u0301)\nIn the compatibility normalization forms (NFKC and NFKD) the character is visibly different as it no longer contains the hook symbol.\nSyntax:\nnormalize(input, normalForm)\nReturns:\nSTRING\nArguments:\nName Description\ninput\nAn expression that returns a STRING.\nnormalForm\nA keyword specifying the normal form, can be NFC, NFD, NFKC or NFKD.\nConsiderations:\nnormalize(null, NFC) returns null.\nExample 6. normalize()\nQuery\nRETURN normalize('\\uFE64', NFKC) = '\\u003C' AS result\nTable 6. Result\nresult\ntrue\nRows: 1\nTo check if a STRING is normalized in a specific Unicode normal form, use the IS NORMALIZED operator with a specified normalization form.\nreplace()\nreplace() returns a STRING in which all occurrences of a specified STRING in the given STRING have been replaced by another (specified) replacement STRING.\nSyntax:\nreplace(original, search, replace)\nReturns:\nSTRING\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\nsearch\nAn expression that specifies the STRING to be replaced in original.\nreplace\nAn expression that specifies the replacement STRING.\nConsiderations:\nIf any argument is null, null will be returned.\nIf search is not found in original, original will be returned.\nExample 7. replace()\nQuery\nRETURN replace(\"hello\", \"l\", \"w\")\nTable 7. Result\nreplace(\"hello\", \"l\", \"w\")\n\"hewwo\"\nRows: 1\nreverse()\nreverse() returns a STRING in which the order of all characters in the given STRING have been reversed.\nSyntax:\nreverse(original)\nReturns:\nSTRING\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\nConsiderations:\nreverse(null) returns null.\nExample 8. reverse\nQuery\nRETURN reverse('anagram')\nTable 8. Result\nreverse('anagram')\n\"margana\"\nRows: 1\nright()\nright() returns a STRING containing the specified number of rightmost characters in the given STRING.\nSyntax:\nright(original, length)\nReturns:\nSTRING\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\nlength\nAn expression that returns a positive INTEGER.\nConsiderations:\nright(null, length) return null.\nright(null, null) return null.\nright(original, null) will raise an error.\nIf length is not a positive INTEGER, an error is raised.\nIf length exceeds the size of original, original is returned.\nExample 9. right()\nQuery\nRETURN right('hello', 3)\nTable 9. Result\nright('hello', 3)\n\"llo\"\nRows: 1\nrtrim()\nrtrim() returns the original STRING with trailing trimCharacterString characters removed. As of Neo4j 5.20, a trimCharacterString can be specified. If this is not specified all trailing whitespace will be removed.\nSyntax:\nrtrim(original [, trimCharacterString])\nReturns:\nSTRING\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\ntrimCharacterString\nAn expression that returns a STRING.\nConsiderations:\nrtrim(null) returns null.\nrtrim(null, null) returns null.\nrtrim(\"hello\", null) returns null.\nrtrim(null, ' ') returns null.\nExample 10. rtrim()\nQuery\nRETURN rtrim('hello   '), rtrim('xxyyhelloxyxy', 'xy')\nTable 10. Result\nrtrim('hello ') rtrim('xxyyhelloxyxy', 'xy')\n\"hello\"\n\"xxyyhello\"\nRows: 1\nsplit()\nsplit() returns a LIST<STRING> resulting from the splitting of the given STRING around matches of the given delimiter.\nSyntax:\nsplit(original, splitDelimiter)\nReturns:\nLIST<STRING>\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\nsplitDelimiter\nThe STRING with which to split original.\nConsiderations:\nsplit(null, splitDelimiter) return null.\nsplit(original, null) return null\nExample 11. split()\nQuery\nRETURN split('one,two', ',')\nTable 11. Result\nsplit('one,two', ',')\n[\"one\",\"two\"]\nRows: 1\nsubstring()\nsubstring() returns a substring of the given STRING, beginning with a zero-based index start and length.\nSyntax:\nsubstring(original, start [, length])\nReturns:\nSTRING\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\nstart\nAn expression that returns a positive INTEGER, denoting the position at which the substring will begin.\nlength\nAn expression that returns a positive INTEGER, denoting how many characters of original will be returned.\nConsiderations:\nstart uses a zero-based index.\nIf length is omitted, the function returns the substring starting at the position given by start and extending to the end of original.\nIf original is null, null is returned.\nIf either start or length is null or a negative integer, an error is raised.\nIf start is 0, the substring will start at the beginning of original.\nIf length is 0, the empty STRING will be returned.\nExample 12. substring()\nQuery\nRETURN substring('hello', 1, 3), substring('hello', 2)\nTable 12. Result\nsubstring('hello', 1, 3) substring('hello', 2)\n\"ell\"\n\"llo\"\nRows: 1\ntoLower()\ntoLower() returns the given STRING in lowercase.\nSyntax:\ntoLower(original)\nReturns:\nSTRING\nArguments:\nName Description\ninput\nA string to be converted into lowercase.\nConsiderations:\ntoLower(null) returns null.\nExample 13. toLower()\nQuery\nRETURN toLower('HELLO')\nTable 13. Result\ntoLower('HELLO')\n\"hello\"\nRows: 1\ntoString()\ntoString() converts an INTEGER, FLOAT, BOOLEAN, STRING, POINT, DURATION, DATE, ZONED TIME, LOCAL TIME, LOCAL DATETIME or ZONED DATETIME value to a STRING.\nSyntax:\ntoString(expression)\nReturns:\nSTRING\nArguments:\nName Description\nexpression\nAn expression that returns an INTEGER, FLOAT, BOOLEAN, STRING, POINT, DURATION, DATE, ZONED TIME, LOCAL TIME, LOCAL DATETIME or ZONED DATETIME value.\nConsiderations:\ntoString(null) returns null.\nIf expression is a STRING, it will be returned unchanged.\nThis function will return an error if provided with an expression that is not an INTEGER, FLOAT, BOOLEAN, STRING, POINT, DURATION, DATE, ZONED TIME, LOCAL TIME, LOCAL DATETIME or ZONED DATETIME value.\nExample 14. toString()\nQuery\nRETURN\n  toString(11.5),\n  toString('already a string'),\n  toString(true),\n  toString(date({year: 1984, month: 10, day: 11})) AS dateString,\n  toString(datetime({year: 1984, month: 10, day: 11, hour: 12, minute: 31, second: 14, millisecond: 341, timezone: 'Europe/Stockholm'})) AS datetimeString,\n  toString(duration({minutes: 12, seconds: -60})) AS durationString\nTable 14. Result\ntoString(11.5) toString('already a string') toString(true) dateString datetimeString durationString\n\"11.5\"\n\"already a string\"\n\"true\"\n\"1984-10-11\"\n\"1984-10-11T12:31:14.341+01:00[Europe/Stockholm]\"\n\"PT11M\"\nRows: 1\ntoStringOrNull()\nThe function toStringOrNull() converts an INTEGER, FLOAT, BOOLEAN, STRING, POINT, DURATION, DATE, ZONED TIME, LOCAL TIME, LOCAL DATETIME or ZONED DATETIME value to a STRING.\nSyntax:\ntoStringOrNull(expression)\nReturns:\nSTRING or null.\nArguments:\nName Description\nexpression\nAny expression that returns a value.\nConsiderations:\ntoStringOrNull(null) returns null.\nIf the expression is not an INTEGER, FLOAT, BOOLEAN, STRING, POINT, DURATION, DATE, ZONED TIME, LOCAL TIME, LOCAL DATETIME or ZONED DATETIME value, null will be returned.\nExample 15. toStringOrNull()\nQuery\nRETURN toStringOrNull(11.5),\ntoStringOrNull('already a string'),\ntoStringOrNull(true),\ntoStringOrNull(date({year: 1984, month: 10, day: 11})) AS dateString,\ntoStringOrNull(datetime({year: 1984, month: 10, day: 11, hour: 12, minute: 31, second: 14, millisecond: 341, timezone: 'Europe/Stockholm'})) AS datetimeString,\ntoStringOrNull(duration({minutes: 12, seconds: -60})) AS durationString,\ntoStringOrNull(['A', 'B', 'C']) AS list\nTable 15. Result\ntoStringOrNull(11.5) toStringOrNull('already a string') toStringOrNull(true) dateString datetimeString durationString list\n\"11.5\"\n\"already a string\"\n\"true\"\n\"1984-10-11\"\n\"1984-10-11T12:31:14.341+01:00[Europe/Stockholm]\"\n\"PT11M\"\n<null>\nRows: 1\ntoUpper()\ntoUpper() returns the given STRING in uppercase.\nSyntax:\ntoUpper(original)\nReturns:\nSTRING\nArguments:\nName Description\ninput\nA string to be converted into uppercase.\nConsiderations:\ntoUpper(null) returns null.\nExample 16. toUpper()\nQuery\nRETURN toUpper('hello')\nTable 16. Result\ntoUpper('hello')\n\"HELLO\"\nRows: 1\ntrim()\ntrim() returns the given STRING with the leading and/or trailing trimCharacterString character removed. As of Neo4j 5.20, a trimCharacterString can be specified. If this is not specified all leading and/or trailing whitespace will be removed.\nSyntax:\ntrim([[LEADING | TRAILING | BOTH] [trimCharacterString] FROM] original)\nReturns:\nSTRING\nArguments:\nName Description\noriginal\nAn expression that returns a STRING.\ntrimCharacterString\nAn expression that returns a single character STRING.\nConsiderations:\ntrim(null) returns null.\ntrim(null FROM \"hello\") returns null.\ntrim(\" \" FROM null) returns null.\ntrim(BOTH null FROM null) returns null.\nExample 17. trim()\nQuery\nRETURN trim('   hello   '), trim(BOTH 'x' FROM 'xxxhelloxxx')\nTable 17. Result\ntrim(' hello ') trim(BOTH 'x' FROM 'xxxhelloxxx')\n\"hello\"\n\"hello\"\nRows: 1\nupper()\nIntroduced in 5.21\nupper() returns the given STRING in uppercase. This function is an alias to the toUpper() function, and it was introduced as part of Cypher\u2019s GQL conformance.\nSyntax:\nupper(original)\nReturns:\nSTRING\nArguments:\nName Description\ninput\nA string to be converted into uppercase.\nConsiderations:\nupper(null) returns null.\nExample 18. upper()\nQuery\nRETURN upper('hello')\nTable 18. Result\nupper('hello')\n\"HELLO\"\nRows: 1\nMathematical functions - trigonometric\nTemporal functions - instant types", "embeddings": [0.013124041259288788, 0.04893640801310539, 0.03210461884737015, -0.024077562615275383, -0.013468826189637184, 0.006768065504729748, -0.0014113252982497215, 0.09214118868112564, 0.0029181954450905323, -0.05275001749396324, 0.028898946940898895, -0.036002710461616516, -0.009599690325558186, 0.03173348680138588, 0.016627375036478043, 0.02683117985725403, -0.06776225566864014, -0.06977680325508118, -0.09463962912559509, -0.05584302544593811, 0.04151791334152222, 0.041982538998126984, -0.09658277034759521, 0.05744055286049843, 0.019967302680015564, -0.024311285465955734, 0.005861277226358652, -0.021443111822009087, 0.020848961547017097, 0.05953449755907059, -0.006081673316657543, -0.001037829089909792, 0.09090842306613922, -0.00999705120921135, -0.01003962941467762, 0.02929077483713627, 0.02048463746905327, -0.013785483315587044, -0.025426307693123817, -0.028363263234496117, -0.0382789708673954, -0.0837937667965889, -0.0031663095578551292, 0.043203480541706085, 0.0613943412899971, 0.01368322130292654, 0.02313934452831745, 0.048712149262428284, -0.05257297307252884, -0.0032867284025996923, 0.04680018126964569, 0.12253440171480179, -0.05178241804242134, 0.030783751979470253, -0.01352778822183609, -0.027890903875231743, -0.01388099230825901, 0.053509846329689026, 0.0232758279889822, -0.0002501358976587653, -0.10053940117359161, -0.029442138969898224, -0.020143819972872734, 0.04827238991856575, 0.06405293941497803, -0.055267199873924255, 0.012373214587569237, -0.05643730238080025, -0.04214024916291237, -0.07541286945343018, -0.010461774654686451, -0.04276090860366821, -0.10391656309366226, 0.15307903289794922, 0.011409511789679527, 0.08236672729253769, 0.05879799276590347, 0.026806404814124107, 0.025524713099002838, -0.029867613688111305, 0.052748918533325195, -0.059066567569971085, 0.06374192982912064, 0.04032775014638901, 0.009928056038916111, -0.035308290272951126, -0.07457441836595535, 0.12149181216955185, 0.028414590284228325, 0.035221293568611145, 0.03611406311392784, -0.029765764251351357, 0.011411205865442753, 0.03063192032277584, -0.008540376089513302, -0.017287787050008774, 0.01102130115032196, 0.06705739349126816, 0.0041163768619298935, 0.010352717712521553, -0.028030280023813248, 0.01531208772212267, -0.11305594444274902, -0.04336843639612198, -0.023243866860866547, 0.012902808375656605, 0.06996934860944748, -0.021837309002876282, 0.10033775120973587, -0.04545827582478523, 0.001654831343330443, -0.022466037422418594, 0.010560414753854275, -0.026314495131373405, -0.0023181068245321512, -0.019648080691695213, -0.014933171682059765, 0.013984200544655323, 0.06888847798109055, 0.013805091381072998, 0.025979001075029373, -0.03377393260598183, -0.031050166115164757, 0.011312463320791721, -0.017159953713417053, 0.02286522090435028, 0.07741773128509521, 6.47869450288682e-33, -0.009906873106956482, 0.03324871137738228, -0.05637812614440918, -0.04244471341371536, -0.07280786335468292, 0.034496430307626724, -0.09625505656003952, 0.032276224344968796, -0.02035282365977764, 0.0007528247078880668, -0.02894100546836853, -0.0702701210975647, 0.04281846806406975, -0.11823301017284393, 0.03836022689938545, 0.07837546616792679, 0.07509051263332367, 0.012872220948338509, 0.007081359624862671, 0.035260509699583054, 0.015061364509165287, 0.09417275339365005, 0.0017860188381746411, 0.012607157230377197, 0.00505412369966507, 0.009198215790092945, 0.020171457901597023, -0.060897789895534515, 0.03517685830593109, -0.002380657009780407, -0.04220921918749809, 0.00014125216694083065, -0.08746857196092606, 0.015779808163642883, 0.10471887141466141, 0.04724712669849396, 0.020181652158498764, 0.018977945670485497, -0.07910609990358353, 0.02195877954363823, -0.057515766471624374, 0.056672073900699615, -0.03786406293511391, 0.030785271897912025, 0.057165730744600296, -0.0895661860704422, -0.023780612275004387, 0.0007737328996881843, -0.02702248841524124, 0.09185970574617386, -0.05611986294388771, 0.07988186925649643, 0.05542459711432457, 0.023571331053972244, 0.009027484804391861, -0.04448634013533592, 0.08838235586881638, -0.04200572893023491, -0.03725796192884445, 0.04420991986989975, 0.027002139016985893, 0.07660026848316193, 0.057801730930805206, -0.041884895414114, -0.048935480415821075, -0.035176556557416916, 0.0513920858502388, -0.009613120928406715, -0.026355061680078506, 0.0008944697910919785, -0.03673761710524559, 0.011883322149515152, 0.0018914258107542992, 0.009255542419850826, -0.03414703160524368, -0.08601127564907074, 0.12543721497058868, -0.08109600096940994, -0.017574865370988846, -0.037529800087213516, 0.013274257071316242, -0.023704450577497482, 0.07372184842824936, -0.006495366804301739, 0.00474281283095479, -0.08015042543411255, 0.027749037370085716, -0.0448346883058548, 0.04012420400977135, -0.08846747875213623, 0.0462149977684021, -0.13429836928844452, -0.08668364584445953, 0.029758431017398834, 0.023415355011820793, -5.778238725066928e-33, 0.0016194533091038465, -0.0350477397441864, -0.08438554406166077, -0.03788340091705322, -0.07624546438455582, -0.11976291984319687, -0.008641863241791725, 0.08892761915922165, 0.032822877168655396, -0.07997575402259827, 0.06884123384952545, -0.001587366801686585, 0.006623490247875452, 0.029159117490053177, 0.018298542127013206, -0.022229550406336784, 0.020507317036390305, -0.006139540113508701, -0.032080020755529404, -0.008588983677327633, 0.004527989774942398, 0.0005154897808097303, -0.08476848155260086, -0.00616409070789814, 0.006942207925021648, 0.12386218458414078, 0.01064156461507082, -0.01892755925655365, 0.035139068961143494, 0.024595435708761215, -0.05872620269656181, 0.017068887129426003, 0.03323938697576523, 0.005105506628751755, -0.06921656429767609, -0.006590384524315596, 0.07471035420894623, -0.015300437808036804, 0.034185245633125305, -0.029714496806263924, -0.02007921040058136, 0.05207303538918495, 0.0007461424102075398, -0.003911981824785471, -0.017261359840631485, 0.04824265465140343, -0.003923406358808279, 0.05065048113465309, -0.011459161527454853, 0.007349686697125435, 0.12310769408941269, 0.0008802505326457322, -0.005258982535451651, 0.02300836145877838, 0.019146131351590157, -0.0625888779759407, -0.09537360072135925, 0.006753722205758095, -0.039107028394937515, -0.057480257004499435, -0.05150986462831497, 0.010838588699698448, 0.06584714353084564, -0.009713996201753616, -0.032996077090501785, 0.03821698948740959, -0.013747875578701496, 0.006575336214154959, 0.02590363100171089, -0.09913474321365356, 0.01030438020825386, -0.030309101566672325, -0.024874553084373474, 0.0419217012822628, -0.09375231713056564, 0.0025698919780552387, 0.051236048340797424, 0.009262426756322384, -0.027305401861667633, 0.098906010389328, -0.030571628361940384, 0.032363470643758774, 0.06241394206881523, 0.06949137896299362, -0.007342644967138767, 0.00523972837254405, -0.010297579690814018, 0.06859314441680908, -0.050253819674253464, -0.05163710564374924, 0.015716303139925003, 0.048191096633672714, -0.04053621366620064, 0.14015056192874908, -0.0196781475096941, -5.4969337526245e-08, -0.002304615220054984, -0.015814892947673798, -0.11966727674007416, -0.03316614776849747, -0.008555314503610134, 0.003416012041270733, -0.020183131098747253, -0.12842343747615814, 0.05031276494264603, -0.018056325614452362, 0.05355451628565788, -0.0036557435523718596, -0.08961427211761475, -0.1607058048248291, 0.04793412983417511, 0.022719739004969597, 0.0009035394177772105, -0.06872348487377167, -0.051629919558763504, 0.05013951286673546, -0.00949536170810461, -0.0375579297542572, -0.06941897422075272, -0.040581002831459045, -0.06827572733163834, 0.01706392876803875, -0.06496347486972809, 0.11335477232933044, 0.10473742336034775, -0.03872447460889816, 0.04999817535281181, 0.07024107128381729, 0.017524635419249535, 0.002894794335588813, -0.05199677497148514, -0.001049228012561798, 0.011179078370332718, 0.026265131309628487, 0.050743959844112396, 0.07837484031915665, 0.05164777487516403, -0.030972611159086227, -0.12269842624664307, 0.03634229674935341, -0.011490766890347004, -0.08797281235456467, 0.06937109678983688, 0.04248736426234245, -0.0164400115609169, -0.02513909712433815, -0.02786720171570778, -0.005964873358607292, -0.04652998223900795, 0.024103432893753052, 0.059567321091890335, -0.01714867539703846, 0.01665036380290985, -0.025776075199246407, 0.011736580170691013, 0.01681417040526867, -0.025624340400099754, -0.008551010861992836, 0.11100007593631744, -0.03394559398293495], "keywords": ["integer", "tostring", "string", "iso 8601", "unicode"], "redirects": []}, "https://neo4j.com/docs/cypher-manual/5/functions/mathematical-trigonometric": {"links": ["https://neo4j.registration.goldcast.io/events/03805ea9-fe3a-4cac-8c15-aa622666531a", "https://neo4j.com/docs/cypher-manual/5/functions/mathematical-logarithmic", "https://neo4j.com/docs/cypher-manual/5/syntax/operators", "https://neo4j.com/docs/cypher-manual/5/functions/string"], "text": "Mathematical functions - trigonometric\nTrigonometric mathematical functions operate on numeric expressions only, and will return an error if used on any other values. See also Mathematical operators.\nacos()\nacos() returns the arccosine of a FLOAT in radians.\nSyntax:\nacos(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in radians.\nConsiderations:\nacos(null) returns null.\nIf (expression < -1) or (expression > 1), then (acos(expression)) returns NaN.\nExample 1. acos()\nQuery\nRETURN acos(0.5)\nThe arccosine of 0.5 is returned.\nTable 1. Result\nacos(0.5)\n1.0471975511965979\nRows: 1\nasin()\nasin() returns the arcsine of a FLOAT in radians.\nSyntax:\nasin(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in radians.\nConsiderations:\nasin(null) returns null.\nIf (expression < -1) or (expression > 1), then (asin(expression)) returns NaN.\nExample 2. asin()\nQuery\nRETURN asin(0.5)\nThe arcsine of 0.5 is returned.\nTable 2. Result\nasin(0.5)\n0.5235987755982989\nRows: 1\natan()\natan() returns the arctangent of a FLOAT in radians.\nSyntax:\natan(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in radians.\nConsiderations:\natan(null) returns null.\nExample 3. atan()\nQuery\nRETURN atan(0.5)\nThe arctangent of 0.5 is returned.\nTable 3. Result\natan(0.5)\n0.4636476090008061\nRows: 1\natan2()\natan2() returns the arctangent2 of a set of coordinates in radians.\nSyntax:\natan2(expression1, expression2)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression1\nA numeric expression for y that represents the angle in radians.\nexpression2\nA numeric expression for x that represents the angle in radians.\nConsiderations:\natan2(null, null), atan2(null, expression2) and atan(expression1, null) all return null.\nExample 4. atan2()\nQuery\nRETURN atan2(0.5, 0.6)\nThe arctangent2 of 0.5 and 0.6 is returned.\nTable 4. Result\natan2(0.5, 0.6)\n0.6947382761967033\nRows: 1\ncos()\ncos() returns the cosine of a FLOAT.\nSyntax:\ncos(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in radians.\nConsiderations:\ncos(null) returns null.\nExample 5. cos()\nQuery\nRETURN cos(0.5)\nThe cosine of 0.5 is returned.\nTable 5. Result\ncos(0.5)\n0.8775825618903728\nRows: 1\ncot()\ncot() returns the cotangent of a FLOAT.\nSyntax:\ncot(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in radians.\nConsiderations:\ncot(null) returns null.\ncot(0) returns Infinity.\nExample 6. cot()\nQuery\nRETURN cot(0.5)\nThe cotangent of 0.5 is returned.\nTable 6. Result\ncot(0.5)\n1.830487721712452\nRows: 1\ndegrees()\ndegrees() converts radians to degrees.\nSyntax:\ndegrees(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in radians.\nConsiderations:\ndegrees(null) returns null.\nExample 7. degrees\nQuery\nRETURN degrees(3.14159)\nThe number of degrees in something close to pi is returned.\nTable 7. Result\ndegrees(3.14159)\n179.9998479605043\nRows: 1\nhaversin()\nhaversin() returns half the versine of a number.\nSyntax:\nhaversin(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in radians.\nConsiderations:\nhaversin(null) returns null.\nExample 8. haversin()\nQuery\nRETURN haversin(0.5)\nThe haversine of 0.5 is returned.\nTable 8. Result\nhaversin(0.5)\n0.06120871905481362\nRows: 1\nSpherical distance using the haversin() function\nThe haversin() function may be used to compute the distance on the surface of a sphere between two points (each given by their latitude and longitude).\nExample 9. haversin()\nIn this example the spherical distance (in km) between Berlin in Germany (at lat 52.5, lon 13.4) and San Mateo in California (at lat 37.5, lon -122.3) is calculated using an average earth radius of 6371 km.\nQuery\nCREATE (ber:City {lat: 52.5, lon: 13.4}), (sm:City {lat: 37.5, lon: -122.3})\nRETURN 2 * 6371 * asin(sqrt(haversin(radians( sm.lat - ber.lat ))\n  + cos(radians( sm.lat )) * cos(radians( ber.lat )) *\n  haversin(radians( sm.lon - ber.lon )))) AS dist\nThe estimated distance between 'Berlin' and 'San Mateo' is returned.\nTable 9. Result\ndist\n9129.969740051658\nRows: 1\nNodes created: 2\nProperties set: 4\nLabels added: 2\npi()\npi() returns the mathematical constant pi.\nSyntax:\npi()\nReturns:\nFLOAT\nExample 10. pi()\nQuery\nRETURN pi()\nThe constant pi is returned.\nTable 10. Result\npi()\n3.141592653589793\nRows: 1\nradians()\nradians() converts degrees to radians.\nSyntax:\nradians(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in degrees.\nConsiderations:\nradians(null) returns null.\nExample 11. radians()\nQuery\nRETURN radians(180)\nThe number of radians in 180 degrees is returned (pi).\nTable 11. Result\nradians(180)\n3.141592653589793\nRows: 1\nsin()\nsin() returns the sine of a number.\nSyntax:\nsin(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in radians.\nConsiderations:\nsin(null) returns null.\nExample 12. sin()\nQuery\nRETURN sin(0.5)\nThe sine of 0.5 is returned.\nTable 12. Result\nsin(0.5)\n0.479425538604203\nRows: 1\ntan()\ntan() returns the tangent of a number.\nSyntax:\ntan(expression)\nReturns:\nFLOAT\nArguments:\nName Description\nexpression\nA numeric expression that represents the angle in radians.\nConsiderations:\ntan(null) returns null.\nExample 13. tan()\nQuery\nRETURN tan(0.5)\nThe tangent of 0.5 is returned.\nTable 13. Result\ntan(0.5)\n0.5463024898437905\nRows: 1\nMathematical functions - logarithmic\nString functions", "embeddings": [-0.07042645663022995, 0.003383117727935314, -0.07134078443050385, 0.05161808431148529, -0.010935251601040363, -0.1115950420498848, 0.027443287894129753, 0.0670296773314476, 0.018487555906176567, 0.026313522830605507, 0.05671297386288643, -0.08821829408407211, 0.007590143010020256, 0.02337481454014778, -0.008836626075208187, -0.02287222445011139, -0.005917358212172985, -0.01665041781961918, -0.06359895318746567, -0.029756275936961174, 0.03305896371603012, 0.029923977330327034, -0.11094128340482712, 0.037695448845624924, 0.011648823507130146, -0.059718042612075806, 0.010967837646603584, -0.08610806614160538, 0.01576092652976513, -0.018361520022153854, -0.11485514789819717, 0.031360212713479996, 0.01676066406071186, 0.016115017235279083, -0.050961319357156754, -0.0010509224375709891, 0.021025462076067924, -0.06826915591955185, 0.002070365473628044, -0.002472753869369626, -0.05086095631122589, -0.016026264056563377, 0.08983715623617172, 0.04454697668552399, 0.03693047910928726, -0.03259171545505524, -0.028809020295739174, 0.015372644178569317, 0.08356943726539612, 0.019901782274246216, 0.004468655679374933, 0.13622044026851654, -0.11351574212312698, -0.013389870524406433, -0.020286057144403458, 0.05080310255289078, -0.04532792791724205, -0.06415540724992752, 0.04093571752309799, -0.014022045768797398, -0.024356475099921227, -0.07441718876361847, 0.022979557514190674, 0.010461878962814808, -0.01532905176281929, -0.05795302614569664, 0.012616961263120174, -0.09781843423843384, -0.05806417390704155, 0.012186293490231037, -0.03495179861783981, 0.028096014633774757, -0.009647204540669918, 0.11436233669519424, 0.0006907125934958458, 0.07643981277942657, 0.025783993303775787, 0.01901816390454769, 0.04408707469701767, -0.02834913320839405, 0.009810221381485462, 0.0019175023771822453, 0.03771812468767166, -0.043801430612802505, 0.08003681153059006, 0.030735671520233154, 0.03266352042555809, 0.10858001559972763, 0.11235164105892181, 0.0279280636459589, 0.02592572756111622, -0.005082661751657724, -0.0293959379196167, -0.05777793005108833, 0.0445086807012558, 0.01819073036313057, 0.07513509690761566, 0.002967109903693199, -0.016496967524290085, 0.015389855951070786, -0.01314588077366352, 0.09702691435813904, -0.041870228946208954, -0.06007225438952446, -0.08446583151817322, 0.04106990620493889, 0.10293465107679367, -0.008398810401558876, 0.06128902733325958, 0.005984166637063026, -0.07206354290246964, 0.005679103545844555, -0.0030661621131002903, -0.06796020269393921, 0.03637809678912163, 0.019916633144021034, -0.02549740858376026, -0.03603753447532654, 0.029611919075250626, 0.043272655457258224, -0.017128201201558113, 0.09060068428516388, -0.0019052118295803666, 0.1348317414522171, 0.026884669438004494, 0.005374287720769644, -0.014431945979595184, 4.352687705807954e-33, -0.13934208452701569, 0.06944571435451508, 0.04606335610151291, -0.07869379967451096, -0.04077974334359169, -0.0021011834032833576, -0.0488998182117939, 0.04119124263525009, -0.010827846825122833, 0.07397011667490005, -0.08622916787862778, 0.06955514848232269, 0.022197116166353226, -0.05822458863258362, 0.03438308835029602, 0.06181469187140465, 0.09058496356010437, -0.0511612631380558, -0.0687260776758194, -0.021504491567611694, -0.0025190317537635565, 0.009916520677506924, -0.05497238412499428, 0.03399454802274704, -0.032305311411619186, 0.061920467764139175, -0.00709863705560565, 0.06427478790283203, -0.08528473228216171, 0.018262017518281937, -0.0473199300467968, -0.04310458526015282, 0.018361154943704605, -0.04014391079545021, 0.08315815031528473, 0.02101990021765232, -0.003453353885561228, 0.013590089976787567, 0.06890589743852615, 0.04775845631957054, -0.07888714969158173, 0.07443992048501968, -0.01963994838297367, 0.04634144529700279, 0.044037457555532455, -0.1332458108663559, -0.01036498136818409, 0.07058005034923553, 0.020089685916900635, 0.005391331389546394, -0.10526726394891739, 0.046821389347314835, 0.017369182780385017, 0.0195043683052063, 0.044959258288145065, -0.009760239161550999, -0.012814254499971867, 0.02588776871562004, -0.013277065940201283, 0.029127728193998337, 0.047269634902477264, -0.0029199589043855667, -0.05260942876338959, -0.10417898744344711, -0.16445903480052948, 0.0657491683959961, -0.10071203857660294, -0.014306935481727123, 0.025968559086322784, -0.017120826989412308, 0.047872692346572876, 0.023023463785648346, -0.03141763061285019, 0.03649165853857994, 0.05318458750844002, -0.060308072715997696, 0.08858731389045715, -0.034875016659498215, -0.036304742097854614, -0.015981536358594894, -0.010853158310055733, 0.028523096814751625, 0.050577253103256226, 0.025602079927921295, -0.03276781365275383, 0.02609371952712536, 0.04812956973910332, 0.00394087890163064, -0.027742119506001472, -0.034606464207172394, 0.01745673455297947, 0.004134769551455975, 0.022659974172711372, -0.009932179003953934, -0.004114269744604826, -5.551581006367328e-33, -0.1064491793513298, 0.05406545102596283, -0.07783718407154083, -0.09577607363462448, -0.1022179052233696, 0.012892669066786766, 0.05566535145044327, -0.09811313450336456, 0.041367802768945694, -0.15302571654319763, 0.03337335214018822, 0.02021404542028904, -0.04706597328186035, -0.07295548915863037, 0.0371878482401371, 0.056043241173028946, -0.04523826763033867, -0.03166754171252251, -0.04341284930706024, 0.044527288526296616, -0.03229661285877228, 0.10249751806259155, 0.039109256118535995, 0.031251460313797, 0.0010202843695878983, 0.0247631948441267, 0.05251872166991234, 0.0072642844170331955, 0.02507338672876358, 0.036675550043582916, -0.0403636135160923, -0.037609606981277466, 0.03538987785577774, -0.018205614760518074, -0.01352991908788681, -0.07998640835285187, 0.04923214390873909, 0.002935051918029785, -0.08793818950653076, -0.042976029217243195, 0.07565084099769592, -0.022483717650175095, 0.057174671441316605, -0.004477808251976967, 0.014946465380489826, 0.042336355894804, 0.05172687768936157, 0.03185819834470749, 6.19307829765603e-05, -0.008494236506521702, -0.002800809685140848, -0.08840052783489227, 0.008072192780673504, 0.06806134432554245, 0.037002116441726685, 0.0313536636531353, -0.024356096982955933, 0.062041182070970535, -0.02182280831038952, -0.025156673043966293, -0.05482442304491997, 0.002385850762948394, 0.03885732963681221, 0.02504868246614933, 0.004815442021936178, 0.024194374680519104, -0.032970283180475235, 0.04606104642152786, -0.031526196748018265, 0.0015581208281219006, 0.0025579240173101425, 0.004699402023106813, -0.016095256432890892, -0.0590948760509491, -0.09544924646615982, -0.01709032990038395, 0.03910670429468155, -0.03526850417256355, -0.03713301196694374, 0.034214284271001816, 0.0021292315796017647, 0.07846818119287491, -0.01313062384724617, -0.02302153781056404, -0.07185067981481552, -0.03820593282580376, 0.04685281962156296, -0.03219187632203102, -0.09024032205343246, 0.014598770067095757, -0.04293039068579674, 0.04059767350554466, -0.08526650071144104, -0.025471918284893036, 0.05172101408243179, -4.189739044591079e-08, -0.0035228084307163954, 0.04344276711344719, 0.03743235394358635, -0.035695575177669525, 0.013274511322379112, 0.03789529204368591, 0.03790697455406189, -0.06229164078831673, 0.0049476525746285915, -0.07804509997367859, -0.004201630130410194, 0.05182268097996712, 0.09010180830955505, -0.09051994234323502, 0.018520822748541832, 0.060945019125938416, 0.009263374842703342, -0.012857140973210335, 0.041850749403238297, -0.026010870933532715, -0.03411188721656799, -0.002002788707613945, -0.008062521927058697, -0.03664809465408325, -0.01800042949616909, 0.05124780535697937, -0.044664643704891205, 0.04814324155449867, 0.007291806861758232, 0.010666708461940289, 0.018726633861660957, -0.03752836957573891, 0.09805372357368469, 0.03049856796860695, 0.020096920430660248, -0.01034688949584961, 0.026449989527463913, 0.04418622702360153, 0.028584906831383705, -0.03203336521983147, -0.07785921543836594, 0.06756893545389175, 0.012931502424180508, -0.0004893793375231326, 0.042429834604263306, 0.01940225623548031, 0.13327175378799438, -0.036676645278930664, 0.08385376632213593, -0.05017174780368805, -0.028236020356416702, 0.037194348871707916, -0.0761139765381813, -0.0017796444008126855, -0.003256948431953788, -0.06870617717504501, -0.03292664885520935, -0.04774672910571098, -0.05238896980881691, 0.06139296665787697, -0.033732689917087555, -0.01861574500799179, -0.0036838569212704897, -0.025971930474042892], "keywords": ["arccosine", "arctangenttang", "arctangent"], "redirects": []}, "https://neo4j.com/docs/cypher-manual/5/syntax/operators": {"links": ["https://neo4j.com/docs/cypher-manual/5/values-and-types/property-structural-constructed", "https://neo4j.com/docs/cypher-manual/5/patterns/fixed-length-patterns", "https://neo4j.com/docs/cypher-manual/5/syntax/comments", "https://neo4j.com/docs/cypher-manual/5/functions/list", "https://neo4j.com/docs/cypher-manual/5/functions/string", "https://neo4j.com/docs/cypher-manual/5/values-and-types/spatial", "https://unicode.org/reports/tr15", "https://neo4j.com/docs/cypher-manual/5/values-and-types/working-with-null", "https://neo4j.com/docs/cypher-manual/5/clauses/set", "https://neo4j.com/docs/cypher-manual/5/clauses/where", "https://neo4j.registration.goldcast.io/events/03805ea9-fe3a-4cac-8c15-aa622666531a", "https://neo4j.com/docs/cypher-manual/5/appendix/gql-conformance", "https://neo4j.com/docs/cypher-manual/5/values-and-types/temporal", "https://neo4j.com/docs/cypher-manual/5/syntax/parameters", "https://neo4j.com/docs/cypher-manual/5/functions/aggregating", "https://neo4j.com/docs/cypher-manual/5/values-and-types/lists", "https://neo4j.com/docs/cypher-manual/5/queries/expressions", "https://neo4j.com/docs/cypher-manual/5/values-and-types/maps"], "text": "Operators\nThis page contains an overview of the available Cypher\u00ae operators.\nOperators at a glance\nAggregation operators\nDISTINCT\nProperty operators\n. for static property access, [] for dynamic property access, = for replacing all properties, += for mutating specific properties\nMathematical operators\n+, -, *, /, %, ^\nComparison operators\n=, <>, <, >, <=, >=, IS NULL, IS NOT NULL\nSTRING-specific comparison operators\nSTARTS WITH, ENDS WITH, CONTAINS, =~ (regex matching)\nBoolean operators\nAND, OR, XOR, NOT\nString operators\n+ and || (string concatenation), IS NORMALIZED\nTemporal operators\n+ and - for operations between durations and temporal instants/durations, * and / for operations between durations and numbers\nMap operators\n. for static value access by key, [] for dynamic value access by key\nList operators\n+ and || (list concatenation), IN to check existence of an element in a list, [] for accessing element(s) dynamically\nAggregation operators\nThe aggregation operators comprise:\nremove duplicates values: DISTINCT\nUsing the DISTINCT operator\nRetrieve the unique eye colors from Person nodes.\nQuery\nCREATE\n  (a:Person {name: 'Anne', eyeColor: 'blue'}),\n  (b:Person {name: 'Bill', eyeColor: 'brown'}),\n  (c:Person {name: 'Carol', eyeColor: 'blue'})\nWITH [a, b, c] AS ps\nUNWIND ps AS p\nRETURN DISTINCT p.eyeColor\nEven though both 'Anne' and 'Carol' have blue eyes, 'blue' is only returned once.\nTable 1. Result\np.eyeColor\n\"blue\"\n\"brown\"\nRows: 2\nNodes created: 3\nProperties set: 6\nLabels added: 3\nDISTINCT is commonly used in conjunction with aggregating functions.\nProperty operators\nThe property operators pertain to a node or a relationship, and comprise:\nstatically access the property of a node or relationship using the dot operator: .\ndynamically access the property of a node or relationship using the subscript operator: []\nproperty replacement = for replacing all properties of a node or relationship\nproperty mutation operator += for setting specific properties of a node or relationship\nStatically accessing a property of a node or relationship using the . operator\nQuery\nCREATE\n  (a:Person {name: 'Jane', livesIn: 'London'}),\n  (b:Person {name: 'Tom', livesIn: 'Copenhagen'})\nWITH a, b\nMATCH (p:Person)\nRETURN  p.name\nTable 2. Result\np.name\n\"Jane\"\n\"Tom\"\nRows: 2\nNodes created: 2\nProperties set: 4\nLabels added: 2\nFiltering on a dynamically-computed property key using the [] operator\nQuery\nCREATE\n  (a:Restaurant {name: 'Hungry Jo', rating_hygiene: 10, rating_food: 7}),\n  (b:Restaurant {name: 'Buttercup Tea Rooms', rating_hygiene: 5, rating_food: 6}),\n  (c1:Category {name: 'hygiene'}),\n  (c2:Category {name: 'food'})\nWITH a, b, c1, c2\nMATCH (restaurant:Restaurant), (category:Category)\nWHERE restaurant[\"rating_\" + category.name] > 6\nRETURN DISTINCT restaurant.name\nTable 3. Result\nrestaurant.name\n\"Hungry Jo\"\nRows: 1\nNodes created: 4\nProperties set: 8\nLabels added: 4\nSee Basic usage for more details on dynamic property access.\nThe behavior of the [] operator with respect to null is detailed here.\nReplacing all properties of a node or relationship using the = operator\nQuery\nCREATE (a:Person {name: 'Sofia', age: 20})\nWITH a\nMATCH (p:Person {name: 'Sofia'})\nSET p = {name: 'Ellen', livesIn: 'London'}\nRETURN p.name, p.age, p.livesIn\nAll the existing properties on the node are replaced by those provided in the map; i.e. the name property is updated from Sofia to Ellen, the age property is deleted, and the livesIn property is added.\nTable 4. Result\np.name p.age p.livesIn\n\"Ellen\"\n<null>\n\"London\"\nRows: 1\nNodes created: 1\nProperties set: 5\nLabels added: 1\nSee Replace all properties using a map and = for more details on using the property replacement operator =.\nMutating specific properties of a node or relationship using the += operator\nQuery\nCREATE (a:Person {name: 'Sofia', age: 20})\nWITH a\nMATCH (p:Person {name: 'Sofia'})\nSET p += {name: 'Ellen', livesIn: 'London'}\nRETURN p.name, p.age, p.livesIn\nThe properties on the node are updated as follows by those provided in the map: the name property is updated from Sofia to Ellen, the age property is left untouched, and the livesIn property is added.\nTable 5. Result\np.name p.age p.livesIn\n\"Ellen\"\n20\n\"London\"\nRows: 1\nNodes created: 1\nProperties set: 4\nLabels added: 1\nSee Mutate specific properties using a map and += for more details on using the property mutation operator +=.\nMathematical operators\nThe mathematical operators comprise:\naddition: +\nsubtraction or unary minus: -\nmultiplication: *\ndivision: /\nmodulo division: %\nexponentiation: ^\nUsing the exponentiation operator ^\nQuery\nWITH 2 AS number, 3 AS exponent\nRETURN number ^ exponent AS result\nTable 6. Result\nresult\n8.0\nRows: 1\nUsing the unary minus operator -\nQuery\nWITH -3 AS a, 4 AS b\nRETURN b - a AS result\nTable 7. Result\nresult\n7\nRows: 1\nComparison operators\nThe comparison operators comprise:\nequality: =\ninequality: <>\nless than: <\ngreater than: >\nless than or equal to: <=\ngreater than or equal to: >=\nIS NULL\nIS NOT NULL\nSTRING-specific comparison operators comprise:\nSTARTS WITH: perform case-sensitive prefix searching on STRING values.\nENDS WITH: perform case-sensitive suffix searching on STRING values.\nCONTAINS: perform case-sensitive inclusion searching in STRING values.\n=~: regular expression for matching a pattern.\nComparing two numbers\nQuery\nWITH 4 AS one, 3 AS two\nRETURN one > two AS result\nTable 8. Result\nresult\ntrue\nRows: 1\nSee Equality and comparison of values for more details on the behavior of comparison operators, and Using ranges for more examples showing how these may be used.\nUsing STARTS WITH to filter names\nQuery\nWITH ['John', 'Mark', 'Jonathan', 'Bill'] AS somenames\nUNWIND somenames AS names\nWITH names AS candidate\nWHERE candidate STARTS WITH 'Jo'\nRETURN candidate\nTable 9. Result\ncandidate\n\"John\"\n\"Jonathan\"\nRows: 2\nSTRING matching contains more information regarding the STRING-specific comparison operators as well as additional examples illustrating the usage thereof.\nEquality and comparison of values\nEquality\nCypher supports comparing values (see Property, structural, and constructed values) by equality using the = and <> operators.\nValues of the same type are only equal if they are the same identical value (e.g. 3 = 3 and \"x\" <> \"xy\").\nMaps are only equal if they map exactly the same keys to equal values and lists are only equal if they contain the same sequence of equal values (e.g. [3, 4] = [1+2, 8/2]).\nValues of different types are considered as equal according to the following rules:\nPaths are treated as lists of alternating nodes and relationships and are equal to all lists that contain that very same sequence of nodes and relationships.\nTesting any value against null with both the = and the <> operators always evaluates to null. This includes null = null and null <> null. The only way to reliably test if a value v is null is by using the special v IS NULL, or v IS NOT NULL, equality operators. v IS NOT NULL is equivalent to NOT(v IS NULL).\nAll other combinations of types of values cannot be compared with each other. Especially, nodes, relationships, and literal maps are incomparable with each other.\nIt is an error to compare values that cannot be compared.\nOrdering and comparison of values\nThe comparison operators <=, < (for ascending) and >=, > (for descending) are used to compare values for ordering. The following points give some details on how the comparison is performed.\nNumerical values are compared for ordering using numerical order (e.g. 3 < 4 is true).\nAll comparability tests (<, <=, >, >=) with java.lang.Double.NaN evaluate as false. For example, 1 > b and 1 < b are both false when b is NaN.\nString values are compared for ordering using lexicographic order (e.g. \"x\" < \"xy\").\nBoolean values are compared for ordering such that false < true.\nComparison of spatial values:\nPoint values can only be compared within the same Coordinate Reference System (CRS)\u2009\u2014\u2009otherwise, the result will be null.\nFor two points a and b within the same CRS, a is considered to be greater than b if a.x > b.x and a.y > b.y (and a.z > b.z for 3D points).\na is considered less than b if a.x < b.x and a.y < b.y (and a.z < b.z for 3D points).\nIf none if the above is true, the points are considered incomparable and any comparison operator between them will return null.\nOrdering of spatial values:\nORDER BY requires all values to be orderable.\nPoints are ordered after arrays and before temporal types.\nPoints of different CRS are ordered by the CRS code (the value of SRID field). For the currently supported set of Coordinate Reference Systems this means the order: 4326, 4979, 7302, 9157\nPoints of the same CRS are ordered by each coordinate value in turn, x first, then y and finally z.\nNote that this order is different to the order returned by the spatial index, which will be the order of the space filling curve.\nComparison of temporal values:\nTemporal instant values are comparable within the same type. An instant is considered less than another instant if it occurs before that instant in time, and it is considered greater than if it occurs after.\nInstant values that occur at the same point in time\u2009\u2014\u2009but that have a different time zone\u2009\u2014\u2009are not considered equal, and must therefore be ordered in some predictable way. Cypher prescribes that, after the primary order of point in time, instant values be ordered by effective time zone offset, from west (negative offset from UTC) to east (positive offset from UTC). This has the effect that times that represent the same point in time will be ordered with the time with the earliest local time first. If two instant values represent the same point in time, and have the same time zone offset, but a different named time zone (this is possible for DateTime only, since Time only has an offset), these values are not considered equal, and ordered by the time zone identifier, alphabetically, as its third ordering component. If the type, point in time, offset, and time zone name are all equal, then the values are equal, and any difference in order is impossible to observe.\nDuration values cannot be compared, since the length of a day, month or year is not known without knowing which day, month or year it is. Since Duration values are not comparable, the result of applying a comparison operator between two Duration values is null.\nOrdering of temporal values:\nORDER BY requires all values to be orderable.\nTemporal instances are ordered after spatial instances and before strings.\nComparable values should be ordered in the same order as implied by their comparison order.\nTemporal instant values are first ordered by type, and then by comparison order within the type.\nSince no complete comparison order can be defined for Duration values, we define an order for ORDER BY specifically for Duration:\nDuration values are ordered by normalising all components as if all years were 365.2425 days long (PT8765H49M12S), all months were 30.436875 (1/12 year) days long (PT730H29M06S), and all days were 24 hours long [1].\nComparing for ordering when one argument is null (e.g. null < 3 is null).\nOrdering of values with different types:\nThe ordering is, in ascending order, defined according to the following list:\nMAP\nNODE\nRELATIONSHIP\nLIST\nPATH\nZONED DATETIME\nLOCAL DATETIME\nDATE\nZONED TIME\nLOCAL TIME\nDURATION\nSTRING\nBOOLEAN\nNumbers: INTEGER, FLOAT\nThe value null is ordered after all other values.\nOrdering of constructed type values:\nFor the constructed types (e.g. maps and lists), elements of the containers are compared pairwise for ordering and thus determine the ordering of two container types. For example, [1, 'foo', 3] is ordered before [1, 2, 'bar'] since 'foo' is ordered before 2.\nChaining comparison operations\nComparisons can be chained arbitrarily, e.g., x < y <= z is equivalent to x < y AND y <= z.\nFormally, if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z.\nNote that a op1 b op2 c does not imply any kind of comparison between a and c, so that, e.g., x < y > z is perfectly legal (although perhaps not elegant).\nThe example:\nMATCH (n) WHERE 21 < n.age <= 30 RETURN n\nis equivalent to\nMATCH (n) WHERE 21 < n.age AND n.age <= 30 RETURN n\nThus, it matches all nodes where the age is between 21 and 30.\nThis syntax extends to all equality = and inequality <> comparisons, as well as to chains longer than three.\nChains of = and <> are treated in a special way in Cypher.\nThis means that 1=1=true is equivalent to 1=1 AND 1=true and not to (1=1)=true or 1=(1=true).\nFor example:\na < b = c <= d <> e\nIs equivalent to:\na < b AND b = c AND c <= d AND d <> e\nUsing a regular expression with =~ to filter words\nQuery\nWITH ['mouse', 'chair', 'door', 'house'] AS wordlist\nUNWIND wordlist AS word\nWITH word\nWHERE word =~ '.*ous.*'\nRETURN word\nTable 10. Result\nword\n\"mouse\"\n\"house\"\nRows: 2\nFurther information and examples regarding the use of regular expressions in filtering can be found in Regular expressions.\nBoolean operators\nThe boolean operators\u2009\u2014\u2009also known as logical operators\u2009\u2014\u2009comprise:\nconjunction: AND\ndisjunction: OR,\nexclusive disjunction: XOR\nnegation: NOT\nHere is the truth table for AND, OR, XOR and NOT.\na b a AND b a OR b a XOR b NOT a\nfalse\nfalse\nfalse\nfalse\nfalse\ntrue\nfalse\nnull\nfalse\nnull\nnull\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\ntrue\nfalse\ntrue\nnull\nnull\ntrue\nnull\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\nnull\nfalse\nfalse\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\nnull\ntrue\nnull\ntrue\nnull\nnull\nUsing boolean operators to filter numbers\nQuery\nWITH [2, 4, 7, 9, 12] AS numberlist\nUNWIND numberlist AS number\nWITH number\nWHERE number = 4 OR (number > 6 AND number < 10)\nRETURN number\nTable 11. Result\nnumber\n4\n7\n9\nRows: 3\nString operators\nThe string operators comprise:\nconcatenating STRING values: + and ||\nchecking if a STRING is normalized: IS NORMALIZED\nConcatenating two STRING values with +\nUsing + to concatenate strings is functionally equivalent to using ||. However, the + string concatenation operator is not GQL conformant.\nQuery\nRETURN 'neo' + '4j' AS result\nTable 12. Result\nresult\n\"neo4j\"\nRows: 1\nConcatenating two\nSTRING\nvalues with\n||\nIntroduced in 5.19\nQuery\nRETURN 'neo' || '4j' AS result\nTable 13. Result\nresult\n\"neo4j\"\nRows: 1\nChecking if a\nSTRING\nIS NORMALIZED\nIntroduced in 5.17\nThe IS NORMALIZED operator is used to check whether the given STRING is in the NFC Unicode normalization form:\nUnicode normalization is a process that transforms different representations of the same string into a standardized form. For more information, see the documentation for Unicode normalization forms.\nQuery\nRETURN \"the \\u212B char\" IS NORMALIZED AS normalized\nTable 14. Result\nnormalized\nfalse\nBecause the given STRING contains a non-normalized Unicode character (\\u212B), false is returned.\nTo normalize a STRING, use the normalize() function.\nNote that the IS NORMALIZED operator returns null when used on a non-STRING value. For example, RETURN 1 IS NORMALIZED returns null.\nChecking if a\nSTRING\nIS NOT NORMALIZED\nIntroduced in 5.17\nThe IS NOT NORMALIZED operator is used to check whether the given STRING is not in the NFC Unicode normalization form:\nQuery\nRETURN \"the \\u212B char\" IS NOT NORMALIZED AS notNormalized\nTable 15. Result\nnotNormalized\ntrue\nBecause the given STRING contains a non-normalized Unicode character (\\u212B), and is not normalized, true is returned.\nTo normalize a STRING, use the normalize() function.\nNote that the IS NOT NORMALIZED operator returns null when used on a non-STRING value. For example, RETURN 1 IS NOT NORMALIZED returns null.\nUsing IS NORMALIZED with a specified normalization type\nIt is possible to define which Unicode normalization type is used (the default is NFC).\nThe available normalization types are:\nNFC\nNFD\nNFKC\nNFKD\nQuery\nWITH \"the \\u00E4 char\" as myString\nRETURN myString IS NFC NORMALIZED AS nfcNormalized,\n    myString IS NFD NORMALIZED AS nfdNormalized\nThe given STRING contains the Unicode character: \\u00E4, which is considered normalized in NFC form, but not in NFD form.\nTable 16. Result\nnfcNormalized nfdNormalized\ntrue\nfalse\nRows: 2\nIt is also possible to specify the normalization form when using the negated normalization operator. For example, RETURN \"string\" IS NOT NFD NORMALIZED.\nTemporal operators\nTemporal operators comprise:\nadding a DURATION to either a temporal instant or another DURATION: +\nsubtracting a DURATION from either a temporal instant or another DURATION: -\nmultiplying a DURATION with a number: *\ndividing a DURATION by a number: /\nThe following table shows\u2009\u2014\u2009for each combination of operation and operand type\u2009\u2014\u2009the type of the value returned from the application of each temporal operator:\nOperator Left-hand operand Right-hand operand Type of result\n+\nTemporal instant\nDURATION\nThe type of the temporal instant\n+\nDURATION\nTemporal instant\nThe type of the temporal instant\n-\nTemporal instant\nDURATION\nThe type of the temporal instant\n+\nDURATION\nDURATION\nDURATION\n-\nDURATION\nDURATION\nDURATION\n*\nDURATION\nNumber\nDURATION\n*\nNumber\nDURATION\nDURATION\n/\nDURATION\nNumber\nDURATION\nAdding and subtracting a DURATION to or from a temporal instant\nQuery\nWITH\n  localdatetime({year:1984, month:10, day:11, hour:12, minute:31, second:14}) AS aDateTime,\n  duration({years: 12, nanoseconds: 2}) AS aDuration\nRETURN aDateTime + aDuration, aDateTime - aDuration\nTable 17. Result\naDateTime + aDuration aDateTime - aDuration\n1996-10-11T12:31:14.000000002\n1972-10-11T12:31:13.999999998\nRows: 1\nComponents of a DURATION that do not apply to the temporal instant are ignored. For example, when adding a DURATION to a DATE, the hours, minutes, seconds and nanoseconds of the DURATION are ignored (ZONED TIME and LOCAL TIME behaves in an analogous manner):\nQuery\nWITH\n  date({year:1984, month:10, day:11}) AS aDate,\n  duration({years: 12, nanoseconds: 2}) AS aDuration\nRETURN aDate + aDuration, aDate - aDuration\nTable 18. Result\naDate + aDuration aDate - aDuration\n1996-10-11\n1972-10-11\nRows: 1\nAdding two durations to a temporal instant is not an associative operation. This is because non-existing dates are truncated to the nearest existing date:\nQuery\nRETURN\n  (date(\"2011-01-31\") + duration(\"P1M\")) + duration(\"P12M\") AS date1,\n  date(\"2011-01-31\") + (duration(\"P1M\") + duration(\"P12M\")) AS date2\nTable 19. Result\ndate1 date2\n2012-02-28\n2012-02-29\nRows: 1\nAdding and subtracting a DURATION to or from another DURATION\nQuery\nWITH\n  duration({years: 12, months: 5, days: 14, hours: 16, minutes: 12, seconds: 70, nanoseconds: 1}) as duration1,\n  duration({months:1, days: -14, hours: 16, minutes: -12, seconds: 70}) AS duration2\nRETURN duration1, duration2, duration1 + duration2, duration1 - duration2\nTable 20. Result\nduration1 duration2 duration1 + duration2 duration1 - duration2\nP12Y5M14DT16H13M10.000000001S\nP1M-14DT15H49M10S\nP12Y6MT32H2M20.000000001S\nP12Y4M28DT24M0.000000001S\nRows: 1\nMultiplying and dividing a DURATION with or by a number\nThese operations are interpreted simply as component-wise operations with overflow to smaller units based on an average length of units in the case of division (and multiplication with fractions).\nQuery\nWITH duration({days: 14, minutes: 12, seconds: 70, nanoseconds: 1}) AS aDuration\nRETURN aDuration, aDuration * 2, aDuration / 3\nTable 21. Result\naDuration aDuration * 2 aDuration / 3\nP14DT13M10.000000001S\nP28DT26M20.000000002S\nP4DT16H4M23.333333333S\nRows: 1\nMap operators\nThe map operators comprise:\nstatically access the value of a map by key using the dot operator: .\ndynamically access the value of a map by key using the subscript operator: []\nThe behavior of the [] operator with respect to null is detailed in the working with null page.\nStatically accessing the value of a nested map by key using the . operator\nQuery\nWITH {person: {name: 'Anne', age: 25}} AS p\nRETURN  p.person.name\nTable 22. Result\np.person.name\n\"Anne\"\nRows: 1\nDynamically accessing the value of a map by key using the [] operator and a parameter\nA parameter may be used to specify the key of the value to access:\nParameters\n{\n  \"myKey\" : \"name\"\n}\nQuery\nWITH {name: 'Anne', age: 25} AS a\nRETURN a[$myKey] AS result\nTable 23. Result\nresult\n\"Anne\"\nRows: 1\nMore information can be found in the Maps chapter.\nList operators\nThe list operators comprise:\nconcatenating lists l1 and l2: [l1] + [l2] and [l1] || [l2]\nchecking if an element e exists in a list l: e IN [l]\ndynamically accessing an element(s) in a list using the subscript operator: []\nThe behavior of the IN and [] operators with respect to null is detailed here.\nConcatenating two lists using +\nQuery\nRETURN [1,2,3,4,5] + [6,7] AS myList\nTable 24. Result\nmyList\n[1,2,3,4,5,6,7]\nRows: 1\nConcatenating two lists using\n||\nIntroduced in 5.19\nQuery\nRETURN [1,2,3,4,5] || [6,7] AS myList\nTable 25. Result\nmyList\n[1,2,3,4,5,6,7]\nRows: 1\nUsing IN to check if a number is in a list\nQuery\nWITH [2, 3, 4, 5] AS numberlist\nUNWIND numberlist AS number\nWITH number\nWHERE number IN [2, 3, 8]\nRETURN number\nTable 26. Result\nnumber\n2\n3\nRows: 2\nUsing IN for more complex list membership operations\nThe general rule is that the IN operator will evaluate to true if the list given as the right-hand operand contains an element which has the same type and contents (or value) as the left-hand operand. Lists are only comparable to other lists, and elements of a list innerList are compared pairwise in ascending order from the first element in innerList to the last element in innerList.\nThe following query checks whether or not the list [2, 1] is an element of the list [1, [2, 1], 3]:\nQuery\nRETURN [2, 1] IN [1, [2, 1], 3] AS inList\nThe query evaluates to true as the right-hand list contains, as an element, the list [1, 2] which is of the same type (a list) and contains the same contents (the numbers 2 and 1 in the given order) as the left-hand operand. If the left-hand operator had been [1, 2] instead of [2, 1], the query would have returned false.\nTable 27. Result\ninList\ntrue\nRows: 1\nAt first glance, the contents of the left-hand operand and the right-hand operand appear to be the same in the following query:\nQuery\nRETURN [1, 2] IN [1, 2] AS inList\nHowever, IN evaluates to false as the right-hand operand does not contain an element that is of the same type\u2009\u2014\u2009i.e. a list\u2009\u2014\u2009as the left-hand-operand.\nTable 28. Result\ninList\nfalse\nRows: 1\nThe following query can be used to ascertain whether or not a list\u2009\u2014\u2009obtained from, say, the labels() function\u2009\u2014\u2009contains at least one element that is also present in another list:\nMATCH (n)\nWHERE size([label IN labels(n) WHERE label IN ['Person', 'Employee'] | 1]) > 0\nRETURN count(n)\nAs long as labels(n) returns either Person or Employee (or both), the query will return a value greater than zero.\nAccessing elements in a list using the [] operator\nQuery\nWITH ['Anne', 'John', 'Bill', 'Diane', 'Eve'] AS names\nRETURN names[1..3] AS result\nThe square brackets will extract the elements from the start index 1, and up to (but excluding) the end index 3.\nTable 29. Result\nresult\n[\"John\",\"Bill\"]\nRows: 1\nDynamically accessing an element in a list using the [] operator and a parameter\nA parameter may be used to specify the index of the element to access:\nParameters\n{\n  \"myIndex\" : 1\n}\nQuery\nWITH ['Anne', 'John', 'Bill', 'Diane', 'Eve'] AS names\nRETURN names[$myIndex] AS result\nTable 30. Result\nresult\n\"John\"\nRows: 1\nUsing IN with [] on a nested list\nIN can be used in conjunction with [] to test whether an element exists in a nested list:\nQuery\nWITH [[1, 2, 3]] AS l\nRETURN 3 IN l[0] AS result\nTable 31. Result\nresult\ntrue\nRows: 1\nMore details on lists can be found in Lists in general.\n1. The 365.2425 days per year comes from the frequency of leap years. A leap year occurs on a year with an ordinal number divisible by 4, that is not divisible by 100, unless it divisible by 400. This means that over 400 years there are ((365 * 4 + 1) * 25 - 1) * 4 + 1 = 146097 days, which means an average of 365.2425 days per year.\nParameters\nComments", "embeddings": [-0.03581703454256058, 0.055704809725284576, 0.025629600510001183, 0.026626674458384514, -0.11612098664045334, -0.03603995963931084, 0.0734180212020874, -0.026488587260246277, 0.033360641449689865, -0.008976481854915619, 0.0156865231692791, -0.029657069593667984, 0.10089496523141861, 0.0003848724882118404, -0.005181035492569208, 0.07172361761331558, -0.04408104717731476, 0.067955881357193, -0.07515594363212585, -0.10413452982902527, 0.04197797179222107, -0.030110400170087814, -0.04553736746311188, -0.017152903601527214, -0.00971565954387188, 0.00017853479948826134, -0.028642326593399048, 0.03925454244017601, 0.13378608226776123, 0.024009693413972855, -0.08985580503940582, 0.014402689412236214, 0.05201808735728264, 0.09097977727651596, -0.09242229908704758, 0.030437402427196503, 0.02822532318532467, 0.0022649159654974937, 0.008044729009270668, -0.002478985581547022, 0.007583848666399717, -0.03880190849304199, -0.008856970816850662, -0.05315319821238518, -0.028067976236343384, 0.04992147907614708, -0.010685084387660027, -0.02238093689084053, -0.06734637171030045, -0.020498206838965416, -0.053909752517938614, 0.04215370863676071, -0.03047705441713333, -0.006150791887193918, 0.10707849264144897, 0.08334657549858093, -0.17278562486171722, -0.09772655367851257, 0.013145158998668194, -0.09522941708564758, -0.0530477873980999, -0.028401006013154984, 0.03101230598986149, 0.01344418153166771, 0.013622904196381569, -0.007050903048366308, 0.01860286109149456, 0.029092496261000633, 0.07019747793674469, 0.042541056871414185, -0.001633030828088522, -0.0023549613542854786, -0.0014828876592218876, 0.06394683569669724, -0.04141411557793617, 0.15385006368160248, 0.07742661982774734, -0.05529811605811119, -0.026035912334918976, 0.033598460257053375, -0.03277089446783066, -0.057154033333063126, -0.018646547570824623, 0.025389721617102623, 0.06650804728269577, -0.03224780037999153, -0.024656889960169792, -0.00598440645262599, 0.0022221875842660666, 0.025265192613005638, -0.04193394258618355, 0.05494287237524986, 0.05601859092712402, -0.06378000974655151, 0.0783957690000534, 0.002874574391171336, 0.058451082557439804, 0.019185300916433334, 0.05580146238207817, 0.02831854857504368, 0.003379691392183304, -0.015198791399598122, 0.009030740708112717, -0.07530093193054199, -0.03803284838795662, -0.017437735572457314, 0.007502618245780468, -0.04196740686893463, -0.015736469998955727, -0.006002683192491531, 0.0047904131934046745, -0.04229072108864784, -0.030301649123430252, -0.033715955913066864, 0.010573349893093109, 0.02069462090730667, 0.03307477384805679, 0.01030029822140932, 0.11869347840547562, -0.04546958580613136, 0.11148787289857864, -0.03323720395565033, -0.015784621238708496, 0.008739989250898361, 0.1027873307466507, 0.03122924640774727, -0.0023815850727260113, 6.429424391856073e-33, 0.003076585941016674, -0.011937232688069344, 0.054818809032440186, 0.023402605205774307, -0.02300303801894188, 0.07748479396104813, -0.04195571318268776, 0.027753613889217377, -0.12340475618839264, 0.02416176162660122, -0.03653823956847191, 0.1544405072927475, -0.013906649313867092, -0.036718953400850296, 0.008143541403114796, 0.021112900227308273, 0.10366497933864594, -0.022138921543955803, -0.07746317982673645, -0.005441843066364527, 0.042245831340551376, -0.00644877552986145, -0.0564645417034626, 0.13074356317520142, 0.06343565881252289, -0.026882551610469818, 0.013922625221312046, -0.03150109946727753, -0.00618963735178113, -0.011124314740300179, -0.055431634187698364, 0.024753540754318237, -0.03501531109213829, 0.06306053698062897, 0.08865179121494293, 0.05867747217416763, 0.023536644876003265, -0.0018925776239484549, -0.024112621322274208, -0.027280520647764206, -0.08580649644136429, -0.009861117228865623, -0.02414746955037117, -0.06599605083465576, -0.09089549630880356, -0.049474086612463, -0.07178367674350739, 0.06968309730291367, 0.03463464230298996, 0.021260632202029228, -0.01255437359213829, 0.009613699279725552, -0.025275537744164467, -0.008818626403808594, 0.004423015285283327, -0.0013506675604730844, 0.037962399423122406, 0.10810160636901855, -0.024326613172888756, 0.10298095643520355, -0.10525963455438614, 0.05003902688622475, 0.010809378698468208, -0.0023906526621431112, 0.02854672074317932, 0.015742667019367218, -0.017654454335570335, 0.028628550469875336, 0.008424460887908936, 0.004503428004682064, 0.06632989645004272, 0.06427713483572006, 0.013100632466375828, -0.05357137322425842, 0.059096403419971466, -0.05022348836064339, 0.05000436305999756, -0.04888623207807541, -0.028397860005497932, 0.025793537497520447, -0.0391688197851181, -0.026644183322787285, 0.031992167234420776, 0.026690516620874405, -0.05997803434729576, -0.00890958122909069, 0.008450489491224289, 0.010718593373894691, -0.025796502828598022, -0.10447763651609421, 0.012685807421803474, 0.008292130194604397, 0.030234012752771378, -0.03241274505853653, -0.07427985221147537, -7.244151444887339e-33, -0.03866202011704445, 0.012154561467468739, -0.0004534060135483742, -0.040006380528211594, -0.000523461785633117, -0.07836746424436569, 0.058228686451911926, -0.06055616959929466, 0.0031874298583716154, -0.15505555272102356, -0.0026035942137241364, -0.004439450800418854, 0.048850227147340775, -0.0787692591547966, -0.006929848343133926, 0.003947279881685972, -0.07580171525478363, -0.11445178091526031, -0.012876263819634914, 0.06830493360757828, -0.028862757608294487, 0.06281141936779022, 0.010162312537431717, 0.0423201248049736, -0.03640018776059151, 0.011341574601829052, 0.05060357600450516, 0.002371975453570485, -0.029055185616016388, -0.04271666333079338, 0.006305074784904718, -0.09380079805850983, -0.015788370743393898, -0.08485391736030579, -0.025891875848174095, -0.07211477309465408, 0.03515496850013733, -0.01662050187587738, 0.0005510076298378408, 0.04720815643668175, 0.003689985955134034, -0.01852685585618019, 0.059836991131305695, 0.04850538447499275, 0.045082736760377884, 0.026029100641608238, 0.02484435774385929, 0.0028548147529363632, -0.024923507124185562, -0.011491596698760986, 0.04890402778983116, -0.00797874666750431, -0.10747291892766953, 0.07696942239999771, -0.0034793633967638016, -0.02820436842739582, -0.011708828620612621, 0.03791842609643936, 0.05670575425028801, -0.008965760469436646, -0.06460712105035782, -0.04598162695765495, -0.04244597256183624, 0.1381542980670929, -0.014125159941613674, -0.032186318188905716, -0.04317878186702728, -0.069051593542099, -0.05652396008372307, -0.027400406077504158, 0.052450671792030334, -0.019117217510938644, -0.06874904781579971, 0.007017416413873434, 0.027262913063168526, -0.02721923030912876, 0.005949689075350761, -0.017682386562228203, -0.012903309427201748, 0.09240295737981796, -0.03791285678744316, -0.0012015111278742552, 0.09591040760278702, 0.06384172290563583, -0.11837810277938843, 0.0029695178382098675, 0.023808622732758522, 0.06392167508602142, -0.0016030988190323114, 0.032567769289016724, -0.04752412065863609, 0.014605201780796051, -0.13852059841156006, 0.05480208620429039, -0.0035407349932938814, -5.929745938715314e-08, -0.09273313730955124, -0.018788157030940056, -0.06362742930650711, 0.003198825754225254, 0.04382287710905075, -0.0379195436835289, 0.045253001153469086, -0.003119230503216386, 0.004884670022875071, 0.01913665421307087, 0.09015318751335144, -0.002929011359810829, -0.052775364369153976, -0.10909970104694366, 0.0605529323220253, 0.0008088945178315043, 0.00639846408739686, -0.013609346002340317, -0.018049046397209167, -0.017280861735343933, -0.04120343178510666, 0.007049631327390671, -0.03764698654413223, 0.03628906235098839, -0.028769833967089653, 0.03169628232717514, -0.05460516735911369, -0.013322066515684128, 0.020214546471834183, 0.004348912741988897, 0.004240191075950861, 0.04475712031126022, 0.08268025517463684, 0.021125800907611847, -0.06213395670056343, -0.0196292195469141, -0.01916526071727276, 0.06748586893081665, -0.019144058227539062, 0.0779150202870369, -0.02515733800828457, 0.007463819347321987, -0.059825800359249115, 0.041188087314367294, 0.015587457455694675, -0.01647307723760605, 0.02158118225634098, -0.039515551179647446, 0.13061970472335815, 0.0369427390396595, -0.001960278255864978, -0.05447697639465332, 0.007394316140562296, -0.019750917330384254, -0.04073760285973549, -0.040604665875434875, 0.05382714420557022, 0.016522210091352463, 0.06607917696237564, -0.006879383232444525, 0.03704893961548805, -0.06278879940509796, 0.005469887983053923, -0.010885310359299183], "keywords": ["node", "concatenation", "property", "aggregation"], "redirects": []}, "https://neo4j.com/docs/cypher-manual/5/values-and-types/maps": {"links": ["https://neo4j.com/docs/cypher-manual/5/functions/aggregating", "https://neo4j.com/docs/cypher-manual/5/values-and-types/working-with-null", "https://neo4j.com/docs/cypher-manual/5/values-and-types/lists", "https://neo4j.com/docs/http-api/5", "https://neo4j.registration.goldcast.io/events/03805ea9-fe3a-4cac-8c15-aa622666531a", "https://neo4j.com/docs/cypher-manual/5/values-and-types/casting-data", "https://neo4j.com/docs/cypher-manual/5/syntax/operators"], "text": "Maps\nCypher\u00ae supports the construction of maps. This section first discusses literal maps and then moves on to map projection.\nInformation regarding property access operators such as . and [] can be found here. The behavior of the [] operator with respect to null is detailed here.\nLiteral maps\nThe key names in a map must be literals. If returned through an HTTP API call, a JSON object will be returned. If returned in Java, an object of type java.util.Map<String,Object> will be returned.\nQuery\nRETURN {key: 'Value', listKey: [{inner: 'Map1'}, {inner: 'Map2'}]} AS map\nTable 1. Result\nmap\n{'listKey': [{'inner': 'Map1'}, {'inner': 'Map2'}], 'key': 'Value'}\nRows: 1\nMap projection\nCypher supports map projections, which allows for the construction of map projections from nodes, relationships, and other map values.\nA map projection begins with the variable bound to the graph entity to be projected from, and contains a body of comma-separated map elements, enclosed by { and }.\nMap projection\nmap_variable {map_element, [, ...n]}\nA map element projects one or more key-value pairs to the map projection. There exist four different types of map projection elements:\nProperty selector - Projects the property name as the key, and the value from the map_variable as the value for the projection.\nLiteral entry - This is a key-value pair, with the value being an arbitrary expression key: <expression>.\nVariable selector - Projects a variable, with the variable name as the key, and the value the variable is pointing to as the value of the projection. Its syntax is just the variable.\nAll-properties selector - projects all key-value pairs from the map_variable value.\nThe following conditions apply:\nIf the map_variable points to a null value, the whole map projection will evaluate to null.\nThe key names in a map must be of type STRING.\nExample graph\nThe following graph is used for the examples below:\nTo recreate the graph, run the following query against an empty Neo4j database:\nCREATE\n  (keanu:Person {name: 'Keanu Reeves', nationality: 'Canadian'}),\n  (carrieAnne:Person {name: 'Carrie-Anne Moss'}),\n  (theMatrixRevolutions:Movie {title: 'The Matrix Revolutions', released: 2003}),\n  (theMatrixReloaded:Movie {title: 'The Matrix Reloaded', released: 2003}),\n  (theMatrix:Movie {title: 'The Matrix', released: 1999}),\n  (theDevilsAdvocate:Movie {title: 'The Devils Advocate', released: 1997}),\n  (theMatrixResurrections:Movie {title: 'The Matrix Resurrections', released: 2021}),\n  (keanu)-[:ACTED_IN]->(theMatrix),\n  (keanu)-[:ACTED_IN]->(theMatrixRevolutions),\n  (keanu)-[:ACTED_IN]->(theMatrixReloaded),\n  (keanu)-[:ACTED_IN]->(theMatrixResurrections),\n  (keanu)-[:ACTED_IN]->(theDevilsAdvocate),\n  (carrieAnne)-[:ACTED_IN]->(theMatrix),\n  (carrieAnne)-[:]->(theMatrixRevolutions),\n  (carrieAnne)-[:]->(theMatrixReloaded),\n  (carrieAnne)-[:]->(theMatrixResurrections)\nView all (2 more lines)\nExamples\nThe below query finds the Keanu Reeves node and the movies he has acted in. It is an example of a map projection with a literal entry, which in turn also uses map projection inside the aggregating collect() function.\nQuery\nMATCH (keanu:Person {name: 'Keanu Reeves'})-[:ACTED_IN]->(movie:Movie)\nWITH keanu, collect(movie{.title, .released}) AS movies\nRETURN keanu{.name, movies: movies}\nTable 2. Result\nkeanu\n{movies: [{title: \"The Devils Advocate\", released: 1997}, {title: \"The Matrix Revolutions\", released: 2003}, {title: \"The Matrix Resurrections\", released: 2021}, {title: \"The Matrix Reloaded\", released: 2003}, {title: \"The Matrix\", released: 1999}], name: \"Keanu Reeves\"}\nRows: 1\nThe below query finds all Person nodes in the graph that have one or more relationships with the type ACTED_IN connected to Movie nodes. It uses the count() function to count how many Movie nodes are connected to each Person node in this way, and uses a variable selector to project the value of the count.\nQuery\nMATCH (actor:Person)-[:ACTED_IN]->(movie:Movie)\nWITH actor, count(movie) AS numberOfMovies\nRETURN actor{.name, numberOfMovies}\nTable 3. Result\nactor\n{numberOfMovies: 5, name: \"Keanu Reeves\"}\n{numberOfMovies: 4, name: \"Carrie-Anne Moss\"}\nRows: 2\nThe below query returns all properties from the Keanu Reeves node. An all-properties selector is used to project all the node properties, and additionally, explicitly project the property age. Since this property does not exist on the node Keanu Reeves, a null value is projected instead.\nQuery\nMATCH (keanu:Person {name: 'Keanu Reeves'})\nRETURN keanu{.*, .age}\nTable 4. Result\nkeanu\n{nationality: \"Canadian\", name: \"Keanu Reeves\", age: null}\nRows: 1\nThe below query is an example of statically accessing individual map members using the . operator:\nQuery\nWITH {age: 58, profession: 'Actor'} as keanuStats\nRETURN keanuStats.profession AS profession\nTable 5. Result\nprofession\n\"Actor\"\nRows: 1\nLists\nCasting data values", "embeddings": [-0.020813072100281715, 0.07745645195245743, 0.00508754001930356, -0.007704652845859528, -0.06251659989356995, -0.011546973139047623, -0.014662839472293854, 0.02931775338947773, -0.04967377334833145, 0.03733668848872185, -0.024403635412454605, -0.03507448360323906, 0.14172767102718353, 0.01049212459474802, 0.08556446433067322, 0.03357046842575073, 0.008515424095094204, 0.08447764813899994, 0.041316114366054535, -0.10396708548069, 0.09246154874563217, 0.036019209772348404, 0.003945768345147371, -0.047673437744379044, 0.03666015714406967, 0.034760404378175735, -0.003149578580632806, 0.046246983110904694, 0.009133671410381794, 0.0594390332698822, -0.04923780634999275, -0.023296814411878586, -0.07513495534658432, 0.08126576244831085, -0.04596362262964249, 0.0615529827773571, 0.04144606366753578, -0.008131894282996655, 0.011233006604015827, -0.002497914480045438, 0.028271319344639778, 0.047904931008815765, -0.039815351366996765, -0.02412792108952999, 0.022170305252075195, 0.014357964508235455, 0.004246997646987438, 0.003896499751135707, -0.1000257059931755, -0.03721121698617935, -0.10176998376846313, 0.03500289097428322, 0.0011812191223725677, -0.04171306639909744, 0.02281184308230877, 0.06550142914056778, -0.10052463412284851, -0.041849374771118164, 0.0023826733231544495, -0.017444944009184837, -0.025857554748654366, -0.0741942897439003, 0.014615817926824093, 0.014491197653114796, 0.02444423735141754, -0.05350122228264809, 0.0034315469674766064, 0.013840806670486927, 0.05838944762945175, 0.002514369087293744, 0.015375135466456413, -0.04857204481959343, -0.032991454005241394, -0.06753759831190109, 0.0012108340160921216, 0.09567055851221085, 0.06705077737569809, -0.03007410652935505, -0.03112766332924366, -0.02411787211894989, 0.014097708277404308, 0.013597668148577213, -0.05572955310344696, 0.01846916601061821, -0.057763777673244476, -0.013200519606471062, -0.028751002624630928, -0.0031657316721975803, -0.025067226961255074, 0.09602507203817368, -0.03420465067028999, -0.10156646370887756, -0.0007467089453712106, 0.05676377937197685, 0.08547542989253998, -0.006954488810151815, 0.10827333480119705, -0.04325128719210625, 0.07819187641143799, 0.016437914222478867, 0.03583452105522156, -0.036089833825826645, 0.020852768793702126, -0.10454963892698288, 0.019689960405230522, -0.009749204851686954, -0.0434708446264267, -0.034259553998708725, -0.043937426060438156, 0.005068928003311157, -0.06859235465526581, 0.004905325826257467, -0.08660215139389038, -0.06400854885578156, -0.13058488070964813, 0.010506214573979378, 0.01556907407939434, 0.012932089157402515, 0.06994836032390594, 0.005883466452360153, 0.025251377373933792, -0.026182444766163826, -0.01726979948580265, -0.00694286311045289, -0.015281925909221172, -0.005698284599930048, -0.13655436038970947, 3.0948216903777484e-33, 0.00905846618115902, -0.02638760767877102, 0.0967683419585228, 0.0036735255271196365, -0.017651692032814026, 0.056146103888750076, 0.005197351798415184, 0.019827933982014656, -0.035193488001823425, -0.049802135676145554, -0.03327712416648865, 0.11668289452791214, 0.03678595647215843, 0.018276449292898178, -0.05364932864904404, 0.06242476403713226, 0.06311629712581635, 0.029677752405405045, -0.031063133850693703, -0.01679934188723564, -0.022747309878468513, 0.04872830957174301, 0.007427326403558254, 0.03387090563774109, 0.06204083934426308, 0.017815209925174713, -0.07234714180231094, 0.026398565620183945, -0.10511838644742966, -0.014008941128849983, -0.02529144287109375, -0.0007280797581188381, -0.017888503149151802, -0.003823505714535713, 0.053143806755542755, -0.012974664568901062, 0.024273673072457314, -0.04702555760741234, -0.03806867077946663, -0.11049099266529083, -0.025294359773397446, -0.023895783349871635, -0.03431673347949982, -0.0014372975565493107, -0.03924521431326866, -0.11549274623394012, -0.0671948716044426, -0.006029265932738781, 0.00013285881141200662, 0.006287870928645134, 0.02494305744767189, 0.022968078032135963, -0.03767738118767738, 0.031092505902051926, 0.020499231293797493, -0.013777365908026695, 0.04788143187761307, 0.037292223423719406, -0.011634500697255135, 0.08799777179956436, -0.10748493671417236, 0.02039315365254879, 0.033246662467718124, 0.02081548050045967, 0.005987766198813915, 0.044760365039110184, -0.05953153967857361, -0.008215525187551975, -0.06018643081188202, -0.008549329824745655, 0.05294858664274216, 0.10572414100170135, 0.029290171340107918, -0.024706033989787102, 0.024148236960172653, -0.01487034186720848, -0.09091829508543015, -0.13141077756881714, -0.013960742391645908, -0.028830934315919876, -0.04273907467722893, -0.022234436124563217, -0.0450500063598156, 0.06169047951698303, -0.07273885607719421, 0.05460834875702858, -0.02069755271077156, 0.04824300482869148, 0.0910429134964943, -0.02887004055082798, -0.021660976111888885, -0.026384111493825912, -0.09061405807733536, -0.021502429619431496, -0.009369236417114735, -5.317674895626971e-33, -0.016533274203538895, 0.03783559799194336, 0.04234090819954872, -0.017484523355960846, 0.030811907723546028, -0.0758562833070755, 0.05894901230931282, -0.07234062254428864, -0.03351282328367233, 0.042379289865493774, -0.09765308350324631, -0.09410753101110458, 0.055899571627378464, -0.005819343030452728, 0.021799281239509583, 0.014517218805849552, 0.0019587245769798756, -0.02333657070994377, -0.019115986302495003, 0.08450257778167725, -0.002838026499375701, 0.031096888706088066, -0.005020826123654842, 0.05136309191584587, 0.0009230855503119528, -0.04611283168196678, 0.016880471259355545, 0.03529990464448929, -0.04686480388045311, 0.01129484735429287, 0.025909772142767906, -0.06882549822330475, 0.004074098076671362, -0.053745243698358536, 0.035911209881305695, -0.02064412645995617, 0.032121915370225906, 0.012740395031869411, -0.018342887982726097, -0.012074558064341545, -0.07675925642251968, -0.02697383426129818, 0.0264118779450655, 0.03986934944987297, 0.06715048849582672, 0.02782769314944744, 0.07473253458738327, 0.09158575534820557, -0.013234944082796574, 0.02979876846075058, 0.07201924920082092, 0.022032922133803368, -0.02530524879693985, 0.014873543754220009, 0.01811392419040203, -0.06038058549165726, -0.10977420955896378, 0.06991850584745407, 0.12011668086051941, -0.03058953769505024, -0.03341278061270714, -0.1421782523393631, -0.0033782063983380795, 0.13739198446273804, 0.05180184170603752, -0.07083925604820251, -0.06274531781673431, -0.02580885961651802, -0.02687424048781395, 0.006827197037637234, 0.0023155109956860542, 0.004211020190268755, -0.004564172122627497, 0.007043231278657913, 0.13930214941501617, -0.009050167165696621, -0.02829405665397644, 0.04189513251185417, -0.012847094796597958, 0.012952011078596115, 0.04667417332530022, -0.014256851747632027, 0.03614569082856178, 0.08657366782426834, 0.07332782447338104, -0.007103402633219957, 0.06070252135396004, 0.058333870023489, -0.052733179181814194, 0.02780211716890335, 0.033000167459249496, -0.007030092645436525, -0.17413564026355743, 0.10128764063119888, 0.022446991875767708, -5.009697900959509e-08, -0.06567828357219696, 0.0028008613735437393, -0.02694549970328808, 0.012857107445597649, -0.03499709442257881, -0.021376105025410652, 0.12942269444465637, 0.06173160672187805, 0.03752364590764046, 0.052641939371824265, 0.046999141573905945, 0.008706125430762768, 0.05851319059729576, -0.052934445440769196, 0.013882759027183056, 0.012870260514318943, -0.008891441859304905, 0.006908536888659, 0.02817183919250965, 0.05059659853577614, -0.05389264598488808, -0.05682588741183281, -0.08542891591787338, 0.0692269429564476, 0.05569647252559662, -0.02456989698112011, -0.0020102234557271004, 0.020235152915120125, 0.03114933893084526, -0.009052910842001438, -0.03943375125527382, -0.0010123716201633215, 0.060697901993989944, 0.05146297067403793, -0.05515148118138313, -0.08423537760972977, 0.029900241643190384, 0.009697319008409977, -0.016279665753245354, 0.09743939340114594, -0.01145593635737896, 0.04036217927932739, -0.071529321372509, 0.05099938437342644, -0.029786337167024612, 0.05180566385388374, 0.006964835803955793, 0.040369171649217606, 0.055625881999731064, -0.021286752074956894, -0.050193000584840775, -0.03829152509570122, -0.03317568451166153, -0.10144638270139694, -0.06930619478225708, 0.031191309913992882, -0.02139551006257534, 0.008051494136452675, 0.040514204651117325, 0.0038813292048871517, -0.006000223569571972, 0.011724899522960186, -0.04250846803188324, -0.03199348598718643], "keywords": ["java"], "redirects": []}}